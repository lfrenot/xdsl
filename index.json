{
  "!instanceof": {
    "0DTensorOf": [],
    "1DTensorOf": [],
    "2DTensorOf": [],
    "3DTensorOf": [],
    "4DTensorOf": [],
    "APFloatParameter": [],
    "AllAttrOf": [],
    "AllElementCountsMatch": [],
    "AllElementTypesMatch": [],
    "AllMatch": [],
    "AllMatchPred": [],
    "AllMatchSameOperatorPred": [],
    "AllMatchSameOperatorTrait": [],
    "AllOfType": [],
    "AllRanksMatch": [],
    "AllShapesMatch": [],
    "AllTypesMatch": [],
    "And": [
      "IsVectorTypePred",
      "IsVectorTypeWithAllDimsScalablePred",
      "IsVectorTypeWithOnlyTrailingDimScalablePred",
      "anonymous_103",
      "anonymous_108",
      "anonymous_113",
      "anonymous_114",
      "anonymous_116",
      "anonymous_117",
      "anonymous_118",
      "anonymous_119",
      "anonymous_120",
      "anonymous_121",
      "anonymous_123",
      "anonymous_126",
      "anonymous_127",
      "anonymous_130",
      "anonymous_131",
      "anonymous_134",
      "anonymous_135",
      "anonymous_138",
      "anonymous_139",
      "anonymous_142",
      "anonymous_143",
      "anonymous_144",
      "anonymous_145",
      "anonymous_146",
      "anonymous_148",
      "anonymous_149",
      "anonymous_150",
      "anonymous_152",
      "anonymous_153",
      "anonymous_154",
      "anonymous_155",
      "anonymous_156",
      "anonymous_157",
      "anonymous_158",
      "anonymous_159",
      "anonymous_160",
      "anonymous_161",
      "anonymous_162",
      "anonymous_165",
      "anonymous_168",
      "anonymous_176",
      "anonymous_179",
      "anonymous_181",
      "anonymous_188",
      "anonymous_195",
      "anonymous_197",
      "anonymous_199",
      "anonymous_201",
      "anonymous_203",
      "anonymous_205",
      "anonymous_207",
      "anonymous_209",
      "anonymous_211",
      "anonymous_213",
      "anonymous_215",
      "anonymous_217",
      "anonymous_219",
      "anonymous_221",
      "anonymous_223",
      "anonymous_225",
      "anonymous_227",
      "anonymous_229",
      "anonymous_231",
      "anonymous_233",
      "anonymous_235",
      "anonymous_238",
      "anonymous_240",
      "anonymous_245",
      "anonymous_258",
      "anonymous_259",
      "anonymous_261",
      "anonymous_263",
      "anonymous_265",
      "anonymous_267",
      "anonymous_276",
      "anonymous_279",
      "anonymous_282",
      "anonymous_285",
      "anonymous_288",
      "anonymous_291",
      "anonymous_294",
      "anonymous_297",
      "anonymous_300",
      "anonymous_303",
      "anonymous_306",
      "anonymous_311",
      "anonymous_314",
      "anonymous_345",
      "anonymous_57",
      "anonymous_58",
      "anonymous_59",
      "anonymous_60",
      "anonymous_61",
      "anonymous_62",
      "anonymous_63",
      "anonymous_68",
      "anonymous_73",
      "anonymous_78",
      "anonymous_83",
      "anonymous_88",
      "anonymous_93",
      "anonymous_98"
    ],
    "AnyAttrOf": [],
    "AnyI": [
      "AnyI1",
      "AnyI16",
      "AnyI32",
      "AnyI64",
      "AnyI8"
    ],
    "AnyIntOfWidths": [],
    "AnyIntegerAttrBase": [
      "AnyI16Attr",
      "AnyI1Attr",
      "AnyI32Attr",
      "AnyI64Attr",
      "AnyI8Attr"
    ],
    "AnyMatchOperatorPred": [],
    "AnyMatchOperatorTrait": [],
    "AnyPred": [],
    "AnyStridedMemRefOfRank": [],
    "AnyTypeOf": [
      "AnyNon0RankedOrUnrankedMemRef",
      "AnyNon0RankedOrUnrankedTensor",
      "anonymous_104",
      "anonymous_109",
      "anonymous_164",
      "anonymous_172",
      "anonymous_184",
      "anonymous_380",
      "anonymous_53",
      "anonymous_64",
      "anonymous_69",
      "anonymous_74",
      "anonymous_79",
      "anonymous_84",
      "anonymous_89",
      "anonymous_94",
      "anonymous_99"
    ],
    "Arg": [],
    "Arguments": [],
    "ArrayAttrBase": [
      "AffineMapArrayAttr",
      "ArrayAttr",
      "BoolArrayAttr",
      "DictArrayAttr",
      "F32ArrayAttr",
      "F64ArrayAttr",
      "FlatSymbolRefArrayAttr",
      "I32ArrayAttr",
      "I64ArrayAttr",
      "I64SmallVectorArrayAttr",
      "IndexListArrayAttr",
      "LocationArrayAttr",
      "StrArrayAttr",
      "SymbolRefArrayAttr",
      "TypeArrayAttr"
    ],
    "ArrayCount": [],
    "ArrayMaxCount": [],
    "ArrayMinCount": [],
    "ArrayOfAttr": [],
    "ArrayProperty": [],
    "ArrayRefOfSelfAllocationParameter": [],
    "ArrayRefParameter": [],
    "Attr": [
      "APIntAttr",
      "AffineMapArrayAttr",
      "AffineMapAttr",
      "AnyAttr",
      "AnyI16Attr",
      "AnyI1Attr",
      "AnyI32Attr",
      "AnyI32ElementsAttr",
      "AnyI64Attr",
      "AnyI64ElementsAttr",
      "AnyI8Attr",
      "AnyIntElementsAttr",
      "ArrayAttr",
      "BoolArrayAttr",
      "BoolAttr",
      "DenseBoolArrayAttr",
      "DenseF32ArrayAttr",
      "DenseF64ArrayAttr",
      "DenseI16ArrayAttr",
      "DenseI32ArrayAttr",
      "DenseI64ArrayAttr",
      "DenseI8ArrayAttr",
      "DictArrayAttr",
      "DictionaryAttr",
      "ElementsAttr",
      "F32ArrayAttr",
      "F32Attr",
      "F64ArrayAttr",
      "F64Attr",
      "F64ElementsAttr",
      "FlatSymbolRefArrayAttr",
      "FlatSymbolRefAttr",
      "I16Attr",
      "I1Attr",
      "I32ArrayAttr",
      "I32Attr",
      "I32ElementsAttr",
      "I64ArrayAttr",
      "I64Attr",
      "I64ElementsAttr",
      "I64SmallVectorArrayAttr",
      "I8Attr",
      "IndexAttr",
      "IndexCmpPredicate",
      "IndexCmpPredicateAttr",
      "IndexElementsAttr",
      "IndexListArrayAttr",
      "LocationArrayAttr",
      "LocationAttr",
      "SI16Attr",
      "SI1Attr",
      "SI32Attr",
      "SI64Attr",
      "SI8Attr",
      "StrArrayAttr",
      "StrAttr",
      "StringElementsAttr",
      "SymbolNameAttr",
      "SymbolRefArrayAttr",
      "SymbolRefAttr",
      "TypeArrayAttr",
      "TypeAttr",
      "UI16Attr",
      "UI1Attr",
      "UI32Attr",
      "UI64Attr",
      "UI8Attr",
      "UnitAttr",
      "anonymous_268",
      "anonymous_269",
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340",
      "anonymous_342",
      "anonymous_344"
    ],
    "AttrBuilder": [],
    "AttrBuilderWithInferredContext": [],
    "AttrConstraint": [
      "APIntAttr",
      "AffineMapArrayAttr",
      "AffineMapAttr",
      "AnyAttr",
      "AnyI16Attr",
      "AnyI1Attr",
      "AnyI32Attr",
      "AnyI32ElementsAttr",
      "AnyI64Attr",
      "AnyI64ElementsAttr",
      "AnyI8Attr",
      "AnyIntElementsAttr",
      "ArrayAttr",
      "BoolArrayAttr",
      "BoolAttr",
      "ConstBoolAttrFalse",
      "ConstBoolAttrTrue",
      "ConstUnitAttr",
      "DenseBoolArrayAttr",
      "DenseF32ArrayAttr",
      "DenseF64ArrayAttr",
      "DenseI16ArrayAttr",
      "DenseI32ArrayAttr",
      "DenseI64ArrayAttr",
      "DenseI8ArrayAttr",
      "DictArrayAttr",
      "DictionaryAttr",
      "ElementsAttr",
      "F32ArrayAttr",
      "F32Attr",
      "F64ArrayAttr",
      "F64Attr",
      "F64ElementsAttr",
      "FlatSymbolRefArrayAttr",
      "FlatSymbolRefAttr",
      "I16Attr",
      "I1Attr",
      "I32ArrayAttr",
      "I32Attr",
      "I32ElementsAttr",
      "I64ArrayAttr",
      "I64Attr",
      "I64ElementsAttr",
      "I64SmallVectorArrayAttr",
      "I8Attr",
      "IndexAttr",
      "IndexCmpPredicate",
      "IndexCmpPredicateAttr",
      "IndexElementsAttr",
      "IndexListArrayAttr",
      "IntNonNegative",
      "IntPositive",
      "IsNullAttr",
      "LocationArrayAttr",
      "LocationAttr",
      "SI16Attr",
      "SI1Attr",
      "SI32Attr",
      "SI64Attr",
      "SI8Attr",
      "StrArrayAttr",
      "StrAttr",
      "StringElementsAttr",
      "SymbolNameAttr",
      "SymbolRefArrayAttr",
      "SymbolRefAttr",
      "TypeArrayAttr",
      "TypeAttr",
      "UI16Attr",
      "UI1Attr",
      "UI32Attr",
      "UI64Attr",
      "UI8Attr",
      "UnitAttr",
      "anonymous_268",
      "anonymous_269",
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340",
      "anonymous_342",
      "anonymous_344"
    ],
    "AttrDef": [
      "IndexCmpPredicateAttr"
    ],
    "AttrInterface": [],
    "AttrOrTypeBuilder": [],
    "AttrOrTypeBuilderWithInferredContext": [],
    "AttrOrTypeDef": [
      "IndexCmpPredicateAttr"
    ],
    "AttrOrTypeParameter": [
      "anonymous_346"
    ],
    "AttrParameter": [
      "anonymous_346"
    ],
    "AttributeSelfTypeParameter": [],
    "BitEnumAttr": [],
    "BitEnumAttrBase": [],
    "BitEnumAttrCaseBase": [],
    "BitEnumAttrCaseBit": [],
    "BitEnumAttrCaseGroup": [],
    "BuildableType": [
      "BF16",
      "F128",
      "F16",
      "F32",
      "F64",
      "F6E2M3FN",
      "F6E3M2FN",
      "F80",
      "F8E3M4",
      "F8E4M3",
      "F8E4M3B11FNUZ",
      "F8E4M3FN",
      "F8E4M3FNUZ",
      "F8E5M2",
      "F8E5M2FNUZ",
      "I1",
      "I128",
      "I16",
      "I32",
      "I64",
      "I8",
      "Index",
      "NoneType",
      "SI1",
      "SI16",
      "SI32",
      "SI64",
      "SI8",
      "TF32",
      "UI1",
      "UI16",
      "UI32",
      "UI64",
      "UI8"
    ],
    "CArg": [],
    "CPred": [
      "HasRankPred",
      "HasStaticShapePred",
      "HasStridesPred",
      "HasValueSemanticsPred",
      "IsBaseMemRefTypePred",
      "IsFixedVectorTypePred",
      "IsMemRefTypePred",
      "IsRankedTensorTypePred",
      "IsShapedTypePred",
      "IsTensorTypePred",
      "IsTupleTypePred",
      "IsUnrankedMemRefTypePred",
      "IsUnrankedTensorTypePred",
      "IsVectorOfAnyRankTypePred",
      "IsVectorTypeWithAnyDimScalablePred",
      "anonymous_0",
      "anonymous_1",
      "anonymous_10",
      "anonymous_11",
      "anonymous_115",
      "anonymous_12",
      "anonymous_124",
      "anonymous_128",
      "anonymous_13",
      "anonymous_132",
      "anonymous_136",
      "anonymous_14",
      "anonymous_140",
      "anonymous_15",
      "anonymous_16",
      "anonymous_17",
      "anonymous_18",
      "anonymous_19",
      "anonymous_191",
      "anonymous_192",
      "anonymous_193",
      "anonymous_194",
      "anonymous_196",
      "anonymous_198",
      "anonymous_2",
      "anonymous_20",
      "anonymous_200",
      "anonymous_202",
      "anonymous_204",
      "anonymous_206",
      "anonymous_208",
      "anonymous_21",
      "anonymous_210",
      "anonymous_212",
      "anonymous_214",
      "anonymous_216",
      "anonymous_218",
      "anonymous_22",
      "anonymous_220",
      "anonymous_222",
      "anonymous_224",
      "anonymous_226",
      "anonymous_228",
      "anonymous_23",
      "anonymous_230",
      "anonymous_232",
      "anonymous_234",
      "anonymous_236",
      "anonymous_237",
      "anonymous_239",
      "anonymous_24",
      "anonymous_241",
      "anonymous_242",
      "anonymous_243",
      "anonymous_246",
      "anonymous_247",
      "anonymous_248",
      "anonymous_249",
      "anonymous_25",
      "anonymous_250",
      "anonymous_251",
      "anonymous_252",
      "anonymous_253",
      "anonymous_254",
      "anonymous_255",
      "anonymous_256",
      "anonymous_257",
      "anonymous_26",
      "anonymous_260",
      "anonymous_262",
      "anonymous_264",
      "anonymous_266",
      "anonymous_27",
      "anonymous_270",
      "anonymous_271",
      "anonymous_272",
      "anonymous_273",
      "anonymous_28",
      "anonymous_29",
      "anonymous_3",
      "anonymous_30",
      "anonymous_307",
      "anonymous_308",
      "anonymous_31",
      "anonymous_315",
      "anonymous_316",
      "anonymous_317",
      "anonymous_318",
      "anonymous_319",
      "anonymous_32",
      "anonymous_320",
      "anonymous_321",
      "anonymous_323",
      "anonymous_325",
      "anonymous_327",
      "anonymous_329",
      "anonymous_33",
      "anonymous_331",
      "anonymous_333",
      "anonymous_335",
      "anonymous_337",
      "anonymous_339",
      "anonymous_34",
      "anonymous_341",
      "anonymous_347",
      "anonymous_35",
      "anonymous_36",
      "anonymous_37",
      "anonymous_38",
      "anonymous_39",
      "anonymous_4",
      "anonymous_40",
      "anonymous_41",
      "anonymous_42",
      "anonymous_43",
      "anonymous_44",
      "anonymous_45",
      "anonymous_46",
      "anonymous_47",
      "anonymous_48",
      "anonymous_49",
      "anonymous_5",
      "anonymous_50",
      "anonymous_51",
      "anonymous_52",
      "anonymous_6",
      "anonymous_7",
      "anonymous_8",
      "anonymous_9"
    ],
    "CombinedPred": [
      "IsVectorTypePred",
      "IsVectorTypeWithAllDimsScalablePred",
      "IsVectorTypeWithOnlyTrailingDimScalablePred",
      "anonymous_100",
      "anonymous_101",
      "anonymous_102",
      "anonymous_103",
      "anonymous_105",
      "anonymous_106",
      "anonymous_107",
      "anonymous_108",
      "anonymous_110",
      "anonymous_111",
      "anonymous_112",
      "anonymous_113",
      "anonymous_114",
      "anonymous_116",
      "anonymous_117",
      "anonymous_118",
      "anonymous_119",
      "anonymous_120",
      "anonymous_121",
      "anonymous_122",
      "anonymous_123",
      "anonymous_125",
      "anonymous_126",
      "anonymous_127",
      "anonymous_129",
      "anonymous_130",
      "anonymous_131",
      "anonymous_133",
      "anonymous_134",
      "anonymous_135",
      "anonymous_137",
      "anonymous_138",
      "anonymous_139",
      "anonymous_141",
      "anonymous_142",
      "anonymous_143",
      "anonymous_144",
      "anonymous_145",
      "anonymous_146",
      "anonymous_148",
      "anonymous_149",
      "anonymous_150",
      "anonymous_151",
      "anonymous_152",
      "anonymous_153",
      "anonymous_154",
      "anonymous_155",
      "anonymous_156",
      "anonymous_157",
      "anonymous_158",
      "anonymous_159",
      "anonymous_160",
      "anonymous_161",
      "anonymous_162",
      "anonymous_165",
      "anonymous_166",
      "anonymous_168",
      "anonymous_170",
      "anonymous_173",
      "anonymous_174",
      "anonymous_175",
      "anonymous_176",
      "anonymous_177",
      "anonymous_179",
      "anonymous_181",
      "anonymous_182",
      "anonymous_185",
      "anonymous_186",
      "anonymous_187",
      "anonymous_188",
      "anonymous_189",
      "anonymous_190",
      "anonymous_195",
      "anonymous_197",
      "anonymous_199",
      "anonymous_201",
      "anonymous_203",
      "anonymous_205",
      "anonymous_207",
      "anonymous_209",
      "anonymous_211",
      "anonymous_213",
      "anonymous_215",
      "anonymous_217",
      "anonymous_219",
      "anonymous_221",
      "anonymous_223",
      "anonymous_225",
      "anonymous_227",
      "anonymous_229",
      "anonymous_231",
      "anonymous_233",
      "anonymous_235",
      "anonymous_238",
      "anonymous_240",
      "anonymous_244",
      "anonymous_245",
      "anonymous_258",
      "anonymous_259",
      "anonymous_261",
      "anonymous_263",
      "anonymous_265",
      "anonymous_267",
      "anonymous_274",
      "anonymous_275",
      "anonymous_276",
      "anonymous_277",
      "anonymous_278",
      "anonymous_279",
      "anonymous_280",
      "anonymous_281",
      "anonymous_282",
      "anonymous_283",
      "anonymous_284",
      "anonymous_285",
      "anonymous_286",
      "anonymous_287",
      "anonymous_288",
      "anonymous_289",
      "anonymous_290",
      "anonymous_291",
      "anonymous_292",
      "anonymous_293",
      "anonymous_294",
      "anonymous_295",
      "anonymous_296",
      "anonymous_297",
      "anonymous_298",
      "anonymous_299",
      "anonymous_300",
      "anonymous_301",
      "anonymous_302",
      "anonymous_303",
      "anonymous_304",
      "anonymous_305",
      "anonymous_306",
      "anonymous_309",
      "anonymous_310",
      "anonymous_311",
      "anonymous_312",
      "anonymous_313",
      "anonymous_314",
      "anonymous_343",
      "anonymous_345",
      "anonymous_381",
      "anonymous_54",
      "anonymous_55",
      "anonymous_56",
      "anonymous_57",
      "anonymous_58",
      "anonymous_59",
      "anonymous_60",
      "anonymous_61",
      "anonymous_62",
      "anonymous_63",
      "anonymous_65",
      "anonymous_66",
      "anonymous_67",
      "anonymous_68",
      "anonymous_70",
      "anonymous_71",
      "anonymous_72",
      "anonymous_73",
      "anonymous_75",
      "anonymous_76",
      "anonymous_77",
      "anonymous_78",
      "anonymous_80",
      "anonymous_81",
      "anonymous_82",
      "anonymous_83",
      "anonymous_85",
      "anonymous_86",
      "anonymous_87",
      "anonymous_88",
      "anonymous_90",
      "anonymous_91",
      "anonymous_92",
      "anonymous_93",
      "anonymous_95",
      "anonymous_96",
      "anonymous_97",
      "anonymous_98"
    ],
    "Complex": [],
    "Concat": [
      "anonymous_102",
      "anonymous_107",
      "anonymous_112",
      "anonymous_175",
      "anonymous_187",
      "anonymous_275",
      "anonymous_278",
      "anonymous_281",
      "anonymous_284",
      "anonymous_287",
      "anonymous_290",
      "anonymous_293",
      "anonymous_296",
      "anonymous_299",
      "anonymous_302",
      "anonymous_305",
      "anonymous_310",
      "anonymous_313",
      "anonymous_56",
      "anonymous_67",
      "anonymous_72",
      "anonymous_77",
      "anonymous_82",
      "anonymous_87",
      "anonymous_92",
      "anonymous_97"
    ],
    "ConfinedAttr": [],
    "ConfinedType": [
      "AnyNon0RankedMemRef",
      "AnyStaticShapeMemRef",
      "AnyStridedMemRef"
    ],
    "ConstF32Attr": [],
    "ConstantAttr": [
      "ConstBoolAttrFalse",
      "ConstBoolAttrTrue",
      "ConstUnitAttr"
    ],
    "ConstantEnumCase": [],
    "ConstantEnumCaseBase": [],
    "ConstantStrAttr": [],
    "Constraint": [
      "APIntAttr",
      "AffineMapArrayAttr",
      "AffineMapAttr",
      "AnyAttr",
      "AnyComplex",
      "AnyFixedVector",
      "AnyFloat",
      "AnyI1",
      "AnyI16",
      "AnyI16Attr",
      "AnyI1Attr",
      "AnyI32",
      "AnyI32Attr",
      "AnyI32ElementsAttr",
      "AnyI64",
      "AnyI64Attr",
      "AnyI64ElementsAttr",
      "AnyI8",
      "AnyI8Attr",
      "AnyIntElementsAttr",
      "AnyInteger",
      "AnyMemRef",
      "AnyNon0RankedMemRef",
      "AnyNon0RankedOrUnrankedMemRef",
      "AnyNon0RankedOrUnrankedTensor",
      "AnyNon0RankedTensor",
      "AnyRankedOrUnrankedMemRef",
      "AnyRankedTensor",
      "AnyRegion",
      "AnyScalableVector",
      "AnyShaped",
      "AnySignedInteger",
      "AnySignlessInteger",
      "AnySignlessIntegerOrIndex",
      "AnyStaticShapeMemRef",
      "AnyStaticShapeTensor",
      "AnyStridedMemRef",
      "AnySuccessor",
      "AnyTensor",
      "AnyTuple",
      "AnyType",
      "AnyUnrankedMemRef",
      "AnyUnrankedTensor",
      "AnyUnsignedInteger",
      "AnyVector",
      "AnyVectorOfAnyRank",
      "ArrayAttr",
      "BF16",
      "BF16MemRef",
      "BF16Tensor",
      "BoolArrayAttr",
      "BoolAttr",
      "BoolLike",
      "BoolLikeOfAnyRank",
      "ConstBoolAttrFalse",
      "ConstBoolAttrTrue",
      "ConstUnitAttr",
      "DenseBoolArrayAttr",
      "DenseF32ArrayAttr",
      "DenseF64ArrayAttr",
      "DenseI16ArrayAttr",
      "DenseI32ArrayAttr",
      "DenseI64ArrayAttr",
      "DenseI8ArrayAttr",
      "DictArrayAttr",
      "DictionaryAttr",
      "ElementsAttr",
      "F128",
      "F16",
      "F16MemRef",
      "F16Tensor",
      "F32",
      "F32ArrayAttr",
      "F32Attr",
      "F32MemRef",
      "F32Tensor",
      "F64",
      "F64ArrayAttr",
      "F64Attr",
      "F64ElementsAttr",
      "F64MemRef",
      "F64Tensor",
      "F6E2M3FN",
      "F6E3M2FN",
      "F80",
      "F8E3M4",
      "F8E4M3",
      "F8E4M3B11FNUZ",
      "F8E4M3FN",
      "F8E4M3FNUZ",
      "F8E5M2",
      "F8E5M2FNUZ",
      "FlatSymbolRefArrayAttr",
      "FlatSymbolRefAttr",
      "FloatLike",
      "FunctionType",
      "I1",
      "I128",
      "I16",
      "I16Attr",
      "I16MemRef",
      "I16Tensor",
      "I1Attr",
      "I1MemRef",
      "I1Tensor",
      "I32",
      "I32ArrayAttr",
      "I32Attr",
      "I32ElementsAttr",
      "I32MemRef",
      "I32Tensor",
      "I64",
      "I64ArrayAttr",
      "I64Attr",
      "I64ElementsAttr",
      "I64MemRef",
      "I64SmallVectorArrayAttr",
      "I64Tensor",
      "I8",
      "I8Attr",
      "I8MemRef",
      "I8Tensor",
      "Index",
      "IndexAttr",
      "IndexCmpPredicate",
      "IndexCmpPredicateAttr",
      "IndexElementsAttr",
      "IndexListArrayAttr",
      "IndexTensor",
      "IntNonNegative",
      "IntPositive",
      "IsNullAttr",
      "LocationArrayAttr",
      "LocationAttr",
      "NoneType",
      "SI1",
      "SI16",
      "SI16Attr",
      "SI1Attr",
      "SI32",
      "SI32Attr",
      "SI64",
      "SI64Attr",
      "SI8",
      "SI8Attr",
      "SignlessIntegerLike",
      "SignlessIntegerLikeOfAnyRank",
      "SignlessIntegerOrFloatLike",
      "StrArrayAttr",
      "StrAttr",
      "StringElementsAttr",
      "SymbolNameAttr",
      "SymbolRefArrayAttr",
      "SymbolRefAttr",
      "TF32",
      "TypeArrayAttr",
      "TypeAttr",
      "UI1",
      "UI16",
      "UI16Attr",
      "UI1Attr",
      "UI32",
      "UI32Attr",
      "UI64",
      "UI64Attr",
      "UI8",
      "UI8Attr",
      "UnitAttr",
      "anonymous_104",
      "anonymous_109",
      "anonymous_147",
      "anonymous_163",
      "anonymous_164",
      "anonymous_167",
      "anonymous_169",
      "anonymous_171",
      "anonymous_172",
      "anonymous_178",
      "anonymous_180",
      "anonymous_183",
      "anonymous_184",
      "anonymous_268",
      "anonymous_269",
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340",
      "anonymous_342",
      "anonymous_344",
      "anonymous_380",
      "anonymous_53",
      "anonymous_64",
      "anonymous_69",
      "anonymous_74",
      "anonymous_79",
      "anonymous_84",
      "anonymous_89",
      "anonymous_94",
      "anonymous_99"
    ],
    "ContainerType": [],
    "CppDeprecated": [],
    "DeclareAttrInterfaceMethods": [],
    "DeclareInterfaceMethods": [
      "anonymous_361",
      "anonymous_365",
      "anonymous_366",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "DeclareOpInterfaceMethods": [
      "anonymous_361",
      "anonymous_365",
      "anonymous_366",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "DeclareTypeInterfaceMethods": [],
    "DefaultValuedAttr": [],
    "DefaultValuedOptionalAttr": [],
    "DefaultValuedOptionalStrAttr": [],
    "DefaultValuedParameter": [],
    "DefaultValuedProperty": [],
    "DefaultValuedStrAttr": [],
    "DenseArrayAttrBase": [
      "DenseBoolArrayAttr",
      "DenseF32ArrayAttr",
      "DenseF64ArrayAttr",
      "DenseI16ArrayAttr",
      "DenseI32ArrayAttr",
      "DenseI64ArrayAttr",
      "DenseI8ArrayAttr"
    ],
    "DenseArrayCount": [],
    "DenseArrayMaxCt": [],
    "DenseArrayMinCt": [],
    "DenseArrayNonNegative": [],
    "DenseArraySorted": [],
    "DenseArrayStrictlyPositive": [],
    "DenseArrayStrictlySorted": [],
    "Deprecated": [],
    "DeprecatedOpBuilder": [],
    "DerivedAttr": [],
    "DerivedTypeAttr": [],
    "Dialect": [
      "IndexDialect"
    ],
    "DialectAttr": [
      "IndexCmpPredicateAttr"
    ],
    "DialectType": [],
    "DictionaryAttrBase": [
      "DictionaryAttr"
    ],
    "EffectOpInterfaceBase": [
      "MemoryEffectsOpInterface"
    ],
    "EffectRange": [
      "FullEffect",
      "PartialEffect"
    ],
    "ElementCount": [
      "anonymous_349"
    ],
    "ElementType": [
      "anonymous_350"
    ],
    "ElementTypeIs": [],
    "ElementTypeIsPred": [],
    "ElementsAttrBase": [
      "AnyI32ElementsAttr",
      "AnyI64ElementsAttr",
      "AnyIntElementsAttr",
      "DenseBoolArrayAttr",
      "DenseF32ArrayAttr",
      "DenseF64ArrayAttr",
      "DenseI16ArrayAttr",
      "DenseI32ArrayAttr",
      "DenseI64ArrayAttr",
      "DenseI8ArrayAttr",
      "ElementsAttr",
      "F64ElementsAttr",
      "I32ElementsAttr",
      "I64ElementsAttr",
      "IndexElementsAttr",
      "StringElementsAttr",
      "anonymous_268",
      "anonymous_269"
    ],
    "EnumAttr": [
      "IndexCmpPredicateAttr"
    ],
    "EnumAttrCaseInfo": [
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340"
    ],
    "EnumAttrInfo": [
      "IndexCmpPredicate"
    ],
    "EnumParameter": [
      "anonymous_346"
    ],
    "EnumProperty": [],
    "F": [
      "F128",
      "F16",
      "F32",
      "F64",
      "F80"
    ],
    "FixedVectorOf": [
      "AnyFixedVector"
    ],
    "FixedVectorOfLength": [],
    "FixedVectorOfLengthAndType": [],
    "FixedVectorOfRank": [],
    "FixedVectorOfRankAndType": [],
    "FloatAttrBase": [
      "F32Attr",
      "F64Attr"
    ],
    "FloatElementsAttr": [
      "F64ElementsAttr"
    ],
    "FloatOfWidths": [],
    "GenInternalAttrTrait": [],
    "GenInternalOpTrait": [
      "FirstAttrDerivedResultType",
      "SameVariadicOperandSize",
      "SameVariadicResultSize"
    ],
    "GenInternalTrait": [
      "FirstAttrDerivedResultType",
      "SameVariadicOperandSize",
      "SameVariadicResultSize"
    ],
    "GenInternalTypeTrait": [],
    "HasAnyRankOfPred": [
      "anonymous_123",
      "anonymous_127",
      "anonymous_131",
      "anonymous_135",
      "anonymous_139"
    ],
    "HasParent": [],
    "HasPromiseOrImplementsTypeInterface": [],
    "HasRankGreaterOrEqualPred": [
      "anonymous_114"
    ],
    "I": [
      "I1",
      "I128",
      "I16",
      "I32",
      "I64",
      "I8"
    ],
    "I16BitEnumAttr": [],
    "I16BitEnumAttrCase": [],
    "I16BitEnumAttrCaseBit": [],
    "I16BitEnumAttrCaseGroup": [],
    "I16BitEnumAttrCaseNone": [],
    "I32BitEnumAttr": [],
    "I32BitEnumAttrCase": [],
    "I32BitEnumAttrCaseBit": [],
    "I32BitEnumAttrCaseGroup": [],
    "I32BitEnumAttrCaseNone": [],
    "I32EnumAttr": [
      "IndexCmpPredicate"
    ],
    "I32EnumAttrCase": [
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340"
    ],
    "I64BitEnumAttr": [],
    "I64BitEnumAttrCase": [],
    "I64BitEnumAttrCaseBit": [],
    "I64BitEnumAttrCaseGroup": [],
    "I64BitEnumAttrCaseNone": [],
    "I64EnumAttr": [],
    "I64EnumAttrCase": [],
    "I8BitEnumAttr": [],
    "I8BitEnumAttrCase": [],
    "I8BitEnumAttrCaseBit": [],
    "I8BitEnumAttrCaseGroup": [],
    "I8BitEnumAttrCaseNone": [],
    "IndexBinaryOp": [
      "Index_AddOp",
      "Index_AndOp",
      "Index_CeilDivSOp",
      "Index_CeilDivUOp",
      "Index_DivSOp",
      "Index_DivUOp",
      "Index_FloorDivSOp",
      "Index_MaxSOp",
      "Index_MaxUOp",
      "Index_MinSOp",
      "Index_MinUOp",
      "Index_MulOp",
      "Index_OrOp",
      "Index_RemSOp",
      "Index_RemUOp",
      "Index_ShlOp",
      "Index_ShrSOp",
      "Index_ShrUOp",
      "Index_SubOp",
      "Index_XOrOp"
    ],
    "IndexOp": [
      "Index_AddOp",
      "Index_AndOp",
      "Index_BoolConstantOp",
      "Index_CastSOp",
      "Index_CastUOp",
      "Index_CeilDivSOp",
      "Index_CeilDivUOp",
      "Index_CmpOp",
      "Index_ConstantOp",
      "Index_DivSOp",
      "Index_DivUOp",
      "Index_FloorDivSOp",
      "Index_MaxSOp",
      "Index_MaxUOp",
      "Index_MinSOp",
      "Index_MinUOp",
      "Index_MulOp",
      "Index_OrOp",
      "Index_RemSOp",
      "Index_RemUOp",
      "Index_ShlOp",
      "Index_ShrSOp",
      "Index_ShrUOp",
      "Index_SizeOfOp",
      "Index_SubOp",
      "Index_XOrOp"
    ],
    "InferShapedTypeOpAdaptorBase": [
      "InferShapedTypeOpAdaptor",
      "InferShapedTypeOpAdaptorWithReify",
      "anonymous_369",
      "anonymous_370"
    ],
    "InferTensorTypeAdaptorBase": [
      "InferTensorTypeAdaptor",
      "InferTensorTypeAdaptorWithReify"
    ],
    "InferTensorTypeBase": [
      "InferTensorType",
      "InferTensorTypeWithReify"
    ],
    "InferTypeOpAdaptorBase": [
      "InferTypeOpAdaptor",
      "InferTypeOpAdaptorWithIsCompatible"
    ],
    "IntArrayNthElemEq": [],
    "IntArrayNthElemInRange": [],
    "IntArrayNthElemMaxValue": [],
    "IntArrayNthElemMinValue": [],
    "IntArrayProperty": [],
    "IntElementsAttrBase": [
      "AnyI32ElementsAttr",
      "AnyI64ElementsAttr",
      "AnyIntElementsAttr",
      "I32ElementsAttr",
      "I64ElementsAttr",
      "IndexElementsAttr",
      "anonymous_268",
      "anonymous_269"
    ],
    "IntElementsAttrOf": [
      "AnyI32ElementsAttr",
      "AnyI64ElementsAttr"
    ],
    "IntEnumAttr": [
      "IndexCmpPredicate"
    ],
    "IntEnumAttrBase": [
      "anonymous_342"
    ],
    "IntEnumAttrCaseBase": [
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340"
    ],
    "IntMaxValue": [],
    "IntMinValue": [],
    "IntNEQValue": [],
    "IntProperty": [
      "BoolProperty",
      "I32Property",
      "I64Property"
    ],
    "Interface": [
      "CastOpInterface",
      "ConditionallySpeculatable",
      "InferIntRangeInterface",
      "InferShapedTypeOpInterface",
      "InferTypeOpInterface",
      "MemoryEffectsOpInterface",
      "OpAsmOpInterface",
      "ReifyRankedShapedTypeOpInterface",
      "anonymous_361",
      "anonymous_365",
      "anonymous_366",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "InterfaceMethod": [
      "anonymous_353",
      "anonymous_354",
      "anonymous_355",
      "anonymous_356",
      "anonymous_357",
      "anonymous_358",
      "anonymous_359",
      "anonymous_360",
      "anonymous_371",
      "anonymous_372",
      "anonymous_373",
      "anonymous_374",
      "anonymous_375",
      "anonymous_376",
      "anonymous_377"
    ],
    "InterfaceTrait": [
      "CastOpInterface",
      "ConditionallySpeculatable",
      "InferIntRangeInterface",
      "InferShapedTypeOpInterface",
      "InferTypeOpInterface",
      "MemoryEffectsOpInterface",
      "NoMemoryEffect",
      "OpAsmOpInterface",
      "ReifyRankedShapedTypeOpInterface",
      "anonymous_361",
      "anonymous_365",
      "anonymous_366",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "IntrinsicResource": [
      "AutomaticAllocationScopeResource",
      "DefaultResource"
    ],
    "IsFixedVectorOfLengthPred": [],
    "IsFixedVectorOfRankPred": [],
    "IsNthDimSizeIsOneOfPred": [],
    "IsScalableVectorOfLengthPred": [],
    "IsScalableVectorOfRankPred": [],
    "IsVectorOfLengthPred": [],
    "IsVectorOfRankPred": [],
    "IsVectorOfShape": [],
    "MaxSizedRegion": [],
    "MemAlloc": [
      "MemAlloc"
    ],
    "MemAllocAt": [],
    "MemFree": [
      "MemFree"
    ],
    "MemFreeAt": [],
    "MemRead": [
      "MemRead"
    ],
    "MemReadAt": [],
    "MemRefOf": [
      "AnyMemRef",
      "BF16MemRef",
      "F16MemRef",
      "F32MemRef",
      "F64MemRef",
      "I16MemRef",
      "I1MemRef",
      "I32MemRef",
      "I64MemRef",
      "I8MemRef",
      "anonymous_147"
    ],
    "MemRefRankOf": [],
    "MemWrite": [
      "MemWrite"
    ],
    "MemWriteAt": [],
    "MemoryEffect": [
      "MemAlloc",
      "MemFree",
      "MemRead",
      "MemWrite"
    ],
    "MemoryEffects": [
      "NoMemoryEffect"
    ],
    "MinSizedRegion": [],
    "MixedContainerType": [],
    "NativeAttrTrait": [],
    "NativeOpTrait": [
      "AffineScope",
      "AlwaysSpeculatableImplTrait",
      "AttrSizedOperandSegments",
      "AttrSizedResultSegments",
      "AutomaticAllocationScope",
      "Commutative",
      "ConstantLike",
      "Elementwise",
      "Idempotent",
      "Involution",
      "IsolatedFromAbove",
      "MemRefsNormalizable",
      "NoRegionArguments",
      "NoTerminator",
      "RecursiveMemoryEffects",
      "RecursivelySpeculatableImplTrait",
      "ResultsAreFloatLike",
      "ResultsBroadcastableShape",
      "SameOperandsAndResultElementType",
      "SameOperandsAndResultRank",
      "SameOperandsAndResultShape",
      "SameOperandsAndResultType",
      "SameOperandsElementType",
      "SameOperandsShape",
      "SameTypeOperands",
      "Scalarizable",
      "SingleBlock",
      "Tensorizable",
      "Terminator",
      "Vectorizable",
      "anonymous_362",
      "anonymous_363",
      "anonymous_364",
      "anonymous_367",
      "anonymous_368"
    ],
    "NativeTrait": [
      "AffineScope",
      "AlwaysSpeculatableImplTrait",
      "AttrSizedOperandSegments",
      "AttrSizedResultSegments",
      "AutomaticAllocationScope",
      "CastOpInterface",
      "Commutative",
      "ConditionallySpeculatable",
      "ConstantLike",
      "Elementwise",
      "Idempotent",
      "InferIntRangeInterface",
      "InferShapedTypeOpInterface",
      "InferTypeOpInterface",
      "Involution",
      "IsolatedFromAbove",
      "MemRefsNormalizable",
      "MemoryEffectsOpInterface",
      "NoMemoryEffect",
      "NoRegionArguments",
      "NoTerminator",
      "OpAsmOpInterface",
      "RecursiveMemoryEffects",
      "RecursivelySpeculatableImplTrait",
      "ReifyRankedShapedTypeOpInterface",
      "ResultsAreFloatLike",
      "ResultsBroadcastableShape",
      "SameOperandsAndResultElementType",
      "SameOperandsAndResultRank",
      "SameOperandsAndResultShape",
      "SameOperandsAndResultType",
      "SameOperandsElementType",
      "SameOperandsShape",
      "SameTypeOperands",
      "Scalarizable",
      "SingleBlock",
      "Tensorizable",
      "Terminator",
      "Vectorizable",
      "anonymous_361",
      "anonymous_362",
      "anonymous_363",
      "anonymous_364",
      "anonymous_365",
      "anonymous_366",
      "anonymous_367",
      "anonymous_368",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "NativeTypeTrait": [],
    "Neg": [],
    "NestedTupleOf": [],
    "Non0RankedMemRefOf": [
      "AnyNon0RankedMemRef"
    ],
    "Non0RankedTensorOf": [
      "AnyNon0RankedTensor"
    ],
    "NormalizeIndex": [],
    "Op": [
      "Index_AddOp",
      "Index_AndOp",
      "Index_BoolConstantOp",
      "Index_CastSOp",
      "Index_CastUOp",
      "Index_CeilDivSOp",
      "Index_CeilDivUOp",
      "Index_CmpOp",
      "Index_ConstantOp",
      "Index_DivSOp",
      "Index_DivUOp",
      "Index_FloorDivSOp",
      "Index_MaxSOp",
      "Index_MaxUOp",
      "Index_MinSOp",
      "Index_MinUOp",
      "Index_MulOp",
      "Index_OrOp",
      "Index_RemSOp",
      "Index_RemUOp",
      "Index_ShlOp",
      "Index_ShrSOp",
      "Index_ShrUOp",
      "Index_SizeOfOp",
      "Index_SubOp",
      "Index_XOrOp"
    ],
    "OpBuilder": [
      "anonymous_383"
    ],
    "OpDocGroup": [],
    "OpInterface": [
      "CastOpInterface",
      "ConditionallySpeculatable",
      "InferIntRangeInterface",
      "InferShapedTypeOpInterface",
      "InferTypeOpInterface",
      "MemoryEffectsOpInterface",
      "OpAsmOpInterface",
      "ReifyRankedShapedTypeOpInterface",
      "anonymous_361",
      "anonymous_365",
      "anonymous_366",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "OpInterfaceTrait": [
      "CastOpInterface",
      "ConditionallySpeculatable",
      "InferIntRangeInterface",
      "InferShapedTypeOpInterface",
      "InferTypeOpInterface",
      "MemoryEffectsOpInterface",
      "NoMemoryEffect",
      "OpAsmOpInterface",
      "ReifyRankedShapedTypeOpInterface",
      "anonymous_361",
      "anonymous_365",
      "anonymous_366",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "OpVariable": [],
    "OpVariableDecorator": [
      "MemAlloc",
      "MemFree",
      "MemRead",
      "MemWrite"
    ],
    "OpaqueType": [],
    "Optional": [],
    "OptionalArrayRefParameter": [],
    "OptionalAttr": [],
    "OptionalParameter": [],
    "OptionalProperty": [],
    "OptionalTypesMatchWith": [],
    "Or": [
      "anonymous_100",
      "anonymous_105",
      "anonymous_110",
      "anonymous_122",
      "anonymous_125",
      "anonymous_129",
      "anonymous_133",
      "anonymous_137",
      "anonymous_141",
      "anonymous_151",
      "anonymous_166",
      "anonymous_170",
      "anonymous_173",
      "anonymous_177",
      "anonymous_182",
      "anonymous_185",
      "anonymous_189",
      "anonymous_190",
      "anonymous_343",
      "anonymous_381",
      "anonymous_54",
      "anonymous_65",
      "anonymous_70",
      "anonymous_75",
      "anonymous_80",
      "anonymous_85",
      "anonymous_90",
      "anonymous_95"
    ],
    "ParamNativeAttrTrait": [],
    "ParamNativeOpTrait": [],
    "ParamNativeTrait": [],
    "ParamNativeTypeTrait": [],
    "ParentOneOf": [],
    "Pred": [
      "HasRankPred",
      "HasStaticShapePred",
      "HasStridesPred",
      "HasValueSemanticsPred",
      "IsBaseMemRefTypePred",
      "IsFixedVectorTypePred",
      "IsMemRefTypePred",
      "IsRankedTensorTypePred",
      "IsShapedTypePred",
      "IsTensorTypePred",
      "IsTupleTypePred",
      "IsUnrankedMemRefTypePred",
      "IsUnrankedTensorTypePred",
      "IsVectorOfAnyRankTypePred",
      "IsVectorTypePred",
      "IsVectorTypeWithAllDimsScalablePred",
      "IsVectorTypeWithAnyDimScalablePred",
      "IsVectorTypeWithOnlyTrailingDimScalablePred",
      "anonymous_0",
      "anonymous_1",
      "anonymous_10",
      "anonymous_100",
      "anonymous_101",
      "anonymous_102",
      "anonymous_103",
      "anonymous_105",
      "anonymous_106",
      "anonymous_107",
      "anonymous_108",
      "anonymous_11",
      "anonymous_110",
      "anonymous_111",
      "anonymous_112",
      "anonymous_113",
      "anonymous_114",
      "anonymous_115",
      "anonymous_116",
      "anonymous_117",
      "anonymous_118",
      "anonymous_119",
      "anonymous_12",
      "anonymous_120",
      "anonymous_121",
      "anonymous_122",
      "anonymous_123",
      "anonymous_124",
      "anonymous_125",
      "anonymous_126",
      "anonymous_127",
      "anonymous_128",
      "anonymous_129",
      "anonymous_13",
      "anonymous_130",
      "anonymous_131",
      "anonymous_132",
      "anonymous_133",
      "anonymous_134",
      "anonymous_135",
      "anonymous_136",
      "anonymous_137",
      "anonymous_138",
      "anonymous_139",
      "anonymous_14",
      "anonymous_140",
      "anonymous_141",
      "anonymous_142",
      "anonymous_143",
      "anonymous_144",
      "anonymous_145",
      "anonymous_146",
      "anonymous_148",
      "anonymous_149",
      "anonymous_15",
      "anonymous_150",
      "anonymous_151",
      "anonymous_152",
      "anonymous_153",
      "anonymous_154",
      "anonymous_155",
      "anonymous_156",
      "anonymous_157",
      "anonymous_158",
      "anonymous_159",
      "anonymous_16",
      "anonymous_160",
      "anonymous_161",
      "anonymous_162",
      "anonymous_165",
      "anonymous_166",
      "anonymous_168",
      "anonymous_17",
      "anonymous_170",
      "anonymous_173",
      "anonymous_174",
      "anonymous_175",
      "anonymous_176",
      "anonymous_177",
      "anonymous_179",
      "anonymous_18",
      "anonymous_181",
      "anonymous_182",
      "anonymous_185",
      "anonymous_186",
      "anonymous_187",
      "anonymous_188",
      "anonymous_189",
      "anonymous_19",
      "anonymous_190",
      "anonymous_191",
      "anonymous_192",
      "anonymous_193",
      "anonymous_194",
      "anonymous_195",
      "anonymous_196",
      "anonymous_197",
      "anonymous_198",
      "anonymous_199",
      "anonymous_2",
      "anonymous_20",
      "anonymous_200",
      "anonymous_201",
      "anonymous_202",
      "anonymous_203",
      "anonymous_204",
      "anonymous_205",
      "anonymous_206",
      "anonymous_207",
      "anonymous_208",
      "anonymous_209",
      "anonymous_21",
      "anonymous_210",
      "anonymous_211",
      "anonymous_212",
      "anonymous_213",
      "anonymous_214",
      "anonymous_215",
      "anonymous_216",
      "anonymous_217",
      "anonymous_218",
      "anonymous_219",
      "anonymous_22",
      "anonymous_220",
      "anonymous_221",
      "anonymous_222",
      "anonymous_223",
      "anonymous_224",
      "anonymous_225",
      "anonymous_226",
      "anonymous_227",
      "anonymous_228",
      "anonymous_229",
      "anonymous_23",
      "anonymous_230",
      "anonymous_231",
      "anonymous_232",
      "anonymous_233",
      "anonymous_234",
      "anonymous_235",
      "anonymous_236",
      "anonymous_237",
      "anonymous_238",
      "anonymous_239",
      "anonymous_24",
      "anonymous_240",
      "anonymous_241",
      "anonymous_242",
      "anonymous_243",
      "anonymous_244",
      "anonymous_245",
      "anonymous_246",
      "anonymous_247",
      "anonymous_248",
      "anonymous_249",
      "anonymous_25",
      "anonymous_250",
      "anonymous_251",
      "anonymous_252",
      "anonymous_253",
      "anonymous_254",
      "anonymous_255",
      "anonymous_256",
      "anonymous_257",
      "anonymous_258",
      "anonymous_259",
      "anonymous_26",
      "anonymous_260",
      "anonymous_261",
      "anonymous_262",
      "anonymous_263",
      "anonymous_264",
      "anonymous_265",
      "anonymous_266",
      "anonymous_267",
      "anonymous_27",
      "anonymous_270",
      "anonymous_271",
      "anonymous_272",
      "anonymous_273",
      "anonymous_274",
      "anonymous_275",
      "anonymous_276",
      "anonymous_277",
      "anonymous_278",
      "anonymous_279",
      "anonymous_28",
      "anonymous_280",
      "anonymous_281",
      "anonymous_282",
      "anonymous_283",
      "anonymous_284",
      "anonymous_285",
      "anonymous_286",
      "anonymous_287",
      "anonymous_288",
      "anonymous_289",
      "anonymous_29",
      "anonymous_290",
      "anonymous_291",
      "anonymous_292",
      "anonymous_293",
      "anonymous_294",
      "anonymous_295",
      "anonymous_296",
      "anonymous_297",
      "anonymous_298",
      "anonymous_299",
      "anonymous_3",
      "anonymous_30",
      "anonymous_300",
      "anonymous_301",
      "anonymous_302",
      "anonymous_303",
      "anonymous_304",
      "anonymous_305",
      "anonymous_306",
      "anonymous_307",
      "anonymous_308",
      "anonymous_309",
      "anonymous_31",
      "anonymous_310",
      "anonymous_311",
      "anonymous_312",
      "anonymous_313",
      "anonymous_314",
      "anonymous_315",
      "anonymous_316",
      "anonymous_317",
      "anonymous_318",
      "anonymous_319",
      "anonymous_32",
      "anonymous_320",
      "anonymous_321",
      "anonymous_323",
      "anonymous_325",
      "anonymous_327",
      "anonymous_329",
      "anonymous_33",
      "anonymous_331",
      "anonymous_333",
      "anonymous_335",
      "anonymous_337",
      "anonymous_339",
      "anonymous_34",
      "anonymous_341",
      "anonymous_343",
      "anonymous_345",
      "anonymous_347",
      "anonymous_35",
      "anonymous_36",
      "anonymous_37",
      "anonymous_38",
      "anonymous_381",
      "anonymous_39",
      "anonymous_4",
      "anonymous_40",
      "anonymous_41",
      "anonymous_42",
      "anonymous_43",
      "anonymous_44",
      "anonymous_45",
      "anonymous_46",
      "anonymous_47",
      "anonymous_48",
      "anonymous_49",
      "anonymous_5",
      "anonymous_50",
      "anonymous_51",
      "anonymous_52",
      "anonymous_54",
      "anonymous_55",
      "anonymous_56",
      "anonymous_57",
      "anonymous_58",
      "anonymous_59",
      "anonymous_6",
      "anonymous_60",
      "anonymous_61",
      "anonymous_62",
      "anonymous_63",
      "anonymous_65",
      "anonymous_66",
      "anonymous_67",
      "anonymous_68",
      "anonymous_7",
      "anonymous_70",
      "anonymous_71",
      "anonymous_72",
      "anonymous_73",
      "anonymous_75",
      "anonymous_76",
      "anonymous_77",
      "anonymous_78",
      "anonymous_8",
      "anonymous_80",
      "anonymous_81",
      "anonymous_82",
      "anonymous_83",
      "anonymous_85",
      "anonymous_86",
      "anonymous_87",
      "anonymous_88",
      "anonymous_9",
      "anonymous_90",
      "anonymous_91",
      "anonymous_92",
      "anonymous_93",
      "anonymous_95",
      "anonymous_96",
      "anonymous_97",
      "anonymous_98"
    ],
    "PredAttrTrait": [],
    "PredCombinerKind": [
      "PredCombinerAnd",
      "PredCombinerConcat",
      "PredCombinerNot",
      "PredCombinerOr",
      "PredCombinerSubstLeaves"
    ],
    "PredOpTrait": [],
    "PredTrait": [],
    "PredTypeTrait": [],
    "PromisedAttrInterface": [],
    "PromisedTypeInterface": [],
    "Property": [
      "BoolProperty",
      "I32Property",
      "I64Property",
      "StringProperty",
      "UnitProperty",
      "anonymous_348"
    ],
    "RangedTypesMatchWith": [],
    "Rank": [
      "anonymous_351"
    ],
    "RankedF32ElementsAttr": [],
    "RankedF64ElementsAttr": [],
    "RankedFloatElementsAttr": [],
    "RankedI32ElementsAttr": [],
    "RankedI64ElementsAttr": [],
    "RankedOrUnrankedMemRefOf": [
      "AnyRankedOrUnrankedMemRef"
    ],
    "RankedSignlessIntElementsAttr": [],
    "RankedTensorOf": [
      "AnyRankedTensor",
      "AnyStaticShapeTensor"
    ],
    "Region": [
      "AnyRegion"
    ],
    "RegionConstraint": [
      "AnyRegion"
    ],
    "Res": [],
    "Resource": [
      "AutomaticAllocationScopeResource",
      "DefaultResource"
    ],
    "ResourceHandleParameter": [],
    "Results": [],
    "SI": [
      "SI1",
      "SI16",
      "SI32",
      "SI64",
      "SI8"
    ],
    "SameBuildabilityAs": [],
    "ScalableVectorOf": [
      "AnyScalableVector"
    ],
    "ScalableVectorOfLength": [],
    "ScalableVectorOfLengthAndType": [],
    "ScalableVectorOfRank": [],
    "ScalableVectorOfRankAndLengthAndType": [],
    "SelfAllocationParameter": [],
    "Shape": [
      "anonymous_352"
    ],
    "ShapedContainerType": [
      "AnyFixedVector",
      "AnyMemRef",
      "AnyNon0RankedTensor",
      "AnyRankedOrUnrankedMemRef",
      "AnyRankedTensor",
      "AnyScalableVector",
      "AnyShaped",
      "AnyStaticShapeTensor",
      "AnyTensor",
      "AnyUnrankedMemRef",
      "AnyUnrankedTensor",
      "AnyVector",
      "AnyVectorOfAnyRank",
      "BF16MemRef",
      "BF16Tensor",
      "F16MemRef",
      "F16Tensor",
      "F32MemRef",
      "F32Tensor",
      "F64MemRef",
      "F64Tensor",
      "I16MemRef",
      "I16Tensor",
      "I1MemRef",
      "I1Tensor",
      "I32MemRef",
      "I32Tensor",
      "I64MemRef",
      "I64Tensor",
      "I8MemRef",
      "I8Tensor",
      "IndexTensor",
      "anonymous_147",
      "anonymous_163",
      "anonymous_167",
      "anonymous_169",
      "anonymous_171",
      "anonymous_178",
      "anonymous_180",
      "anonymous_183"
    ],
    "ShapedTypeWithNthDimOfSize": [],
    "SideEffect": [
      "MemAlloc",
      "MemFree",
      "MemRead",
      "MemWrite"
    ],
    "SideEffectsTraitBase": [
      "NoMemoryEffect"
    ],
    "SignedIntOfWidths": [],
    "SignedIntegerAttrBase": [
      "SI16Attr",
      "SI1Attr",
      "SI32Attr",
      "SI64Attr",
      "SI8Attr"
    ],
    "SignlessIntElementsAttr": [
      "I32ElementsAttr",
      "I64ElementsAttr",
      "anonymous_268",
      "anonymous_269"
    ],
    "SignlessIntOfWidths": [],
    "SignlessIntegerAttrBase": [
      "I16Attr",
      "I1Attr",
      "I32Attr",
      "I64Attr",
      "I8Attr",
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340",
      "anonymous_342",
      "anonymous_344"
    ],
    "SingleBlockImplicitTerminator": [],
    "SingleBlockImplicitTerminatorImpl": [],
    "SizedRegion": [],
    "StaticInterfaceMethod": [
      "anonymous_353",
      "anonymous_356",
      "anonymous_357",
      "anonymous_358",
      "anonymous_359",
      "anonymous_377"
    ],
    "StaticShapeMemRefOf": [
      "AnyStaticShapeMemRef"
    ],
    "StaticShapeTensorOf": [
      "AnyStaticShapeTensor"
    ],
    "StrFunc": [
      "anonymous_349",
      "anonymous_350",
      "anonymous_351",
      "anonymous_352"
    ],
    "StridedMemRefOf": [
      "AnyStridedMemRef"
    ],
    "StridedMemRefRankOf": [],
    "StringBasedAttr": [
      "StrAttr",
      "SymbolNameAttr"
    ],
    "StringRefParameter": [],
    "StructuralOpTrait": [
      "AttrSizedOperandSegments",
      "AttrSizedResultSegments",
      "NoRegionArguments",
      "NoTerminator",
      "SingleBlock"
    ],
    "SubstLeaves": [
      "anonymous_101",
      "anonymous_106",
      "anonymous_111",
      "anonymous_174",
      "anonymous_186",
      "anonymous_244",
      "anonymous_274",
      "anonymous_277",
      "anonymous_280",
      "anonymous_283",
      "anonymous_286",
      "anonymous_289",
      "anonymous_292",
      "anonymous_295",
      "anonymous_298",
      "anonymous_301",
      "anonymous_304",
      "anonymous_309",
      "anonymous_312",
      "anonymous_55",
      "anonymous_66",
      "anonymous_71",
      "anonymous_76",
      "anonymous_81",
      "anonymous_86",
      "anonymous_91",
      "anonymous_96"
    ],
    "Successor": [
      "AnySuccessor"
    ],
    "SuccessorConstraint": [
      "AnySuccessor"
    ],
    "TCOpIsBroadcastableToRes": [],
    "TCOpResIsShapedTypePred": [],
    "TCopVTEtAreSameAt": [],
    "TCopVTEtIs": [],
    "TCopVTEtIsSameAs": [],
    "TCresIsSameAsOpBase": [],
    "TCresVTEtIsSameAsOp": [],
    "TCresVTEtIsSameAsOpBase": [],
    "TensorOf": [
      "AnyNon0RankedTensor",
      "AnyTensor",
      "BF16Tensor",
      "F16Tensor",
      "F32Tensor",
      "F64Tensor",
      "I16Tensor",
      "I1Tensor",
      "I32Tensor",
      "I64Tensor",
      "I8Tensor",
      "IndexTensor",
      "anonymous_169",
      "anonymous_180"
    ],
    "TensorRankOf": [],
    "Trait": [
      "AffineScope",
      "AlwaysSpeculatable",
      "AlwaysSpeculatableImplTrait",
      "AttrSizedOperandSegments",
      "AttrSizedResultSegments",
      "AutomaticAllocationScope",
      "CastOpInterface",
      "Commutative",
      "ConditionallySpeculatable",
      "ConstantLike",
      "Elementwise",
      "ElementwiseMappable",
      "FirstAttrDerivedResultType",
      "Idempotent",
      "InferIntRangeInterface",
      "InferShapedTypeOpAdaptor",
      "InferShapedTypeOpAdaptorWithReify",
      "InferShapedTypeOpInterface",
      "InferTensorType",
      "InferTensorTypeAdaptor",
      "InferTensorTypeAdaptorWithReify",
      "InferTensorTypeWithReify",
      "InferTypeOpAdaptor",
      "InferTypeOpAdaptorWithIsCompatible",
      "InferTypeOpInterface",
      "Involution",
      "IsolatedFromAbove",
      "MemRefsNormalizable",
      "MemoryEffectsOpInterface",
      "NoMemoryEffect",
      "NoRegionArguments",
      "NoTerminator",
      "OpAsmOpInterface",
      "Pure",
      "RecursiveMemoryEffects",
      "RecursivelySpeculatable",
      "RecursivelySpeculatableImplTrait",
      "ReifyRankedShapedTypeOpInterface",
      "ResultsAreFloatLike",
      "ResultsBroadcastableShape",
      "SameOperandsAndResultElementType",
      "SameOperandsAndResultRank",
      "SameOperandsAndResultShape",
      "SameOperandsAndResultType",
      "SameOperandsElementType",
      "SameOperandsShape",
      "SameTypeOperands",
      "SameVariadicOperandSize",
      "SameVariadicResultSize",
      "Scalarizable",
      "SingleBlock",
      "Tensorizable",
      "Terminator",
      "Vectorizable",
      "anonymous_361",
      "anonymous_362",
      "anonymous_363",
      "anonymous_364",
      "anonymous_365",
      "anonymous_366",
      "anonymous_367",
      "anonymous_368",
      "anonymous_369",
      "anonymous_370",
      "anonymous_378",
      "anonymous_379",
      "anonymous_382"
    ],
    "TraitList": [
      "AlwaysSpeculatable",
      "ElementwiseMappable",
      "InferShapedTypeOpAdaptor",
      "InferShapedTypeOpAdaptorWithReify",
      "InferTensorType",
      "InferTensorTypeAdaptor",
      "InferTensorTypeAdaptorWithReify",
      "InferTensorTypeWithReify",
      "InferTypeOpAdaptor",
      "InferTypeOpAdaptorWithIsCompatible",
      "Pure",
      "RecursivelySpeculatable",
      "anonymous_369",
      "anonymous_370"
    ],
    "TupleOf": [],
    "Type": [
      "AnyComplex",
      "AnyFixedVector",
      "AnyFloat",
      "AnyI1",
      "AnyI16",
      "AnyI32",
      "AnyI64",
      "AnyI8",
      "AnyInteger",
      "AnyMemRef",
      "AnyNon0RankedMemRef",
      "AnyNon0RankedOrUnrankedMemRef",
      "AnyNon0RankedOrUnrankedTensor",
      "AnyNon0RankedTensor",
      "AnyRankedOrUnrankedMemRef",
      "AnyRankedTensor",
      "AnyScalableVector",
      "AnyShaped",
      "AnySignedInteger",
      "AnySignlessInteger",
      "AnySignlessIntegerOrIndex",
      "AnyStaticShapeMemRef",
      "AnyStaticShapeTensor",
      "AnyStridedMemRef",
      "AnyTensor",
      "AnyTuple",
      "AnyType",
      "AnyUnrankedMemRef",
      "AnyUnrankedTensor",
      "AnyUnsignedInteger",
      "AnyVector",
      "AnyVectorOfAnyRank",
      "BF16",
      "BF16MemRef",
      "BF16Tensor",
      "F128",
      "F16",
      "F16MemRef",
      "F16Tensor",
      "F32",
      "F32MemRef",
      "F32Tensor",
      "F64",
      "F64MemRef",
      "F64Tensor",
      "F6E2M3FN",
      "F6E3M2FN",
      "F80",
      "F8E3M4",
      "F8E4M3",
      "F8E4M3B11FNUZ",
      "F8E4M3FN",
      "F8E4M3FNUZ",
      "F8E5M2",
      "F8E5M2FNUZ",
      "FunctionType",
      "I1",
      "I128",
      "I16",
      "I16MemRef",
      "I16Tensor",
      "I1MemRef",
      "I1Tensor",
      "I32",
      "I32MemRef",
      "I32Tensor",
      "I64",
      "I64MemRef",
      "I64Tensor",
      "I8",
      "I8MemRef",
      "I8Tensor",
      "Index",
      "IndexTensor",
      "NoneType",
      "SI1",
      "SI16",
      "SI32",
      "SI64",
      "SI8",
      "TF32",
      "UI1",
      "UI16",
      "UI32",
      "UI64",
      "UI8",
      "anonymous_104",
      "anonymous_109",
      "anonymous_147",
      "anonymous_163",
      "anonymous_164",
      "anonymous_167",
      "anonymous_169",
      "anonymous_171",
      "anonymous_172",
      "anonymous_178",
      "anonymous_180",
      "anonymous_183",
      "anonymous_184",
      "anonymous_380",
      "anonymous_53",
      "anonymous_64",
      "anonymous_69",
      "anonymous_74",
      "anonymous_79",
      "anonymous_84",
      "anonymous_89",
      "anonymous_94",
      "anonymous_99"
    ],
    "TypeAlias": [],
    "TypeAttrBase": [
      "TypeAttr"
    ],
    "TypeAttrOf": [],
    "TypeBuilder": [],
    "TypeBuilderWithInferredContext": [],
    "TypeConstraint": [
      "AnyComplex",
      "AnyFixedVector",
      "AnyFloat",
      "AnyI1",
      "AnyI16",
      "AnyI32",
      "AnyI64",
      "AnyI8",
      "AnyInteger",
      "AnyMemRef",
      "AnyNon0RankedMemRef",
      "AnyNon0RankedOrUnrankedMemRef",
      "AnyNon0RankedOrUnrankedTensor",
      "AnyNon0RankedTensor",
      "AnyRankedOrUnrankedMemRef",
      "AnyRankedTensor",
      "AnyScalableVector",
      "AnyShaped",
      "AnySignedInteger",
      "AnySignlessInteger",
      "AnySignlessIntegerOrIndex",
      "AnyStaticShapeMemRef",
      "AnyStaticShapeTensor",
      "AnyStridedMemRef",
      "AnyTensor",
      "AnyTuple",
      "AnyType",
      "AnyUnrankedMemRef",
      "AnyUnrankedTensor",
      "AnyUnsignedInteger",
      "AnyVector",
      "AnyVectorOfAnyRank",
      "BF16",
      "BF16MemRef",
      "BF16Tensor",
      "BoolLike",
      "BoolLikeOfAnyRank",
      "F128",
      "F16",
      "F16MemRef",
      "F16Tensor",
      "F32",
      "F32MemRef",
      "F32Tensor",
      "F64",
      "F64MemRef",
      "F64Tensor",
      "F6E2M3FN",
      "F6E3M2FN",
      "F80",
      "F8E3M4",
      "F8E4M3",
      "F8E4M3B11FNUZ",
      "F8E4M3FN",
      "F8E4M3FNUZ",
      "F8E5M2",
      "F8E5M2FNUZ",
      "FloatLike",
      "FunctionType",
      "I1",
      "I128",
      "I16",
      "I16MemRef",
      "I16Tensor",
      "I1MemRef",
      "I1Tensor",
      "I32",
      "I32MemRef",
      "I32Tensor",
      "I64",
      "I64MemRef",
      "I64Tensor",
      "I8",
      "I8MemRef",
      "I8Tensor",
      "Index",
      "IndexTensor",
      "NoneType",
      "SI1",
      "SI16",
      "SI32",
      "SI64",
      "SI8",
      "SignlessIntegerLike",
      "SignlessIntegerLikeOfAnyRank",
      "SignlessIntegerOrFloatLike",
      "TF32",
      "UI1",
      "UI16",
      "UI32",
      "UI64",
      "UI8",
      "anonymous_104",
      "anonymous_109",
      "anonymous_147",
      "anonymous_163",
      "anonymous_164",
      "anonymous_167",
      "anonymous_169",
      "anonymous_171",
      "anonymous_172",
      "anonymous_178",
      "anonymous_180",
      "anonymous_183",
      "anonymous_184",
      "anonymous_380",
      "anonymous_53",
      "anonymous_64",
      "anonymous_69",
      "anonymous_74",
      "anonymous_79",
      "anonymous_84",
      "anonymous_89",
      "anonymous_94",
      "anonymous_99"
    ],
    "TypeDef": [],
    "TypeInterface": [],
    "TypeIs": [],
    "TypeIsPred": [],
    "TypeOrContainer": [
      "BoolLike",
      "FloatLike"
    ],
    "TypeOrContainerOfAnyRank": [
      "BoolLikeOfAnyRank",
      "SignlessIntegerLikeOfAnyRank"
    ],
    "TypeOrValueSemanticsContainer": [
      "SignlessIntegerLike"
    ],
    "TypeParameter": [],
    "TypedArrayAttrBase": [
      "AffineMapArrayAttr",
      "BoolArrayAttr",
      "DictArrayAttr",
      "F32ArrayAttr",
      "F64ArrayAttr",
      "FlatSymbolRefArrayAttr",
      "I32ArrayAttr",
      "I64ArrayAttr",
      "I64SmallVectorArrayAttr",
      "IndexListArrayAttr",
      "LocationArrayAttr",
      "StrArrayAttr",
      "SymbolRefArrayAttr",
      "TypeArrayAttr"
    ],
    "TypedAttrBase": [
      "AnyI16Attr",
      "AnyI1Attr",
      "AnyI32Attr",
      "AnyI64Attr",
      "AnyI8Attr",
      "F32Attr",
      "F64Attr",
      "I16Attr",
      "I1Attr",
      "I32Attr",
      "I64Attr",
      "I8Attr",
      "IndexAttr",
      "SI16Attr",
      "SI1Attr",
      "SI32Attr",
      "SI64Attr",
      "SI8Attr",
      "UI16Attr",
      "UI1Attr",
      "UI32Attr",
      "UI64Attr",
      "UI8Attr",
      "anonymous_322",
      "anonymous_324",
      "anonymous_326",
      "anonymous_328",
      "anonymous_330",
      "anonymous_332",
      "anonymous_334",
      "anonymous_336",
      "anonymous_338",
      "anonymous_340",
      "anonymous_342",
      "anonymous_344"
    ],
    "TypedSignedIntegerAttrBase": [
      "SI16Attr",
      "SI1Attr",
      "SI32Attr",
      "SI64Attr",
      "SI8Attr"
    ],
    "TypedSignlessIntegerAttrBase": [
      "I16Attr",
      "I1Attr",
      "I32Attr",
      "I64Attr",
      "I8Attr"
    ],
    "TypedStrAttr": [],
    "TypedUnsignedIntegerAttrBase": [
      "UI16Attr",
      "UI1Attr",
      "UI32Attr",
      "UI64Attr",
      "UI8Attr"
    ],
    "TypesMatchWith": [],
    "UI": [
      "UI1",
      "UI16",
      "UI32",
      "UI64",
      "UI8"
    ],
    "UnrankedMemRefOf": [
      "AnyUnrankedMemRef"
    ],
    "UnrankedTensorOf": [
      "AnyUnrankedTensor"
    ],
    "UnsignedIntOfWidths": [],
    "UnsignedIntegerAttrBase": [
      "UI16Attr",
      "UI1Attr",
      "UI32Attr",
      "UI64Attr",
      "UI8Attr"
    ],
    "ValueSemanticsContainerOf": [
      "anonymous_163",
      "anonymous_171",
      "anonymous_183"
    ],
    "Variadic": [],
    "VariadicOfVariadic": [],
    "VariadicRegion": [],
    "VariadicSuccessor": [],
    "VectorOf": [
      "AnyVector"
    ],
    "VectorOfAnyRankOf": [
      "AnyVectorOfAnyRank",
      "anonymous_167",
      "anonymous_178"
    ],
    "VectorOfLength": [],
    "VectorOfLengthAndType": [],
    "VectorOfRank": [],
    "VectorOfRankAndType": [],
    "VectorWithTrailingDimScalableOf": [],
    "VectorWithTrailingDimScalableOfSizeAndType": [],
    "_bitSymbolsToValue": [],
    "_makePropStorage": [],
    "_snakeCaseHelper": [],
    "_symbolToValue": [],
    "firstCharToUpper": [],
    "snakeCaseToCamelCase": []
  },
  "!tablegen_json_version": 1,
  "APIntAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:223"
    ],
    "!name": "APIntAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_193",
      "kind": "def",
      "printable": "anonymous_193"
    },
    "returnType": " ::mlir::APInt ",
    "storageType": " ::mlir::IntegerAttr ",
    "summary": "arbitrary integer attribute",
    "valueType": null
  },
  "AffineMapArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:592"
    ],
    "!name": "AffineMapArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getAffineMapArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "AffineMapAttr",
      "kind": "def",
      "printable": "AffineMapAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_279",
      "kind": "def",
      "printable": "anonymous_279"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "AffineMap array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "AffineMapAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:553"
    ],
    "!name": "AffineMapAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::mlir::AffineMapAttr::get($0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_272",
      "kind": "def",
      "printable": "anonymous_272"
    },
    "returnType": " ::mlir::AffineMap ",
    "storageType": "::mlir::AffineMapAttr ",
    "summary": "AffineMap attribute",
    "valueType": {
      "def": "Index",
      "kind": "def",
      "printable": "Index"
    }
  },
  "AffineScope": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:65"
    ],
    "!name": "AffineScope",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "AffineScope"
  },
  "AlwaysSpeculatable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:136"
    ],
    "!name": "AlwaysSpeculatable",
    "!superclasses": [
      "Trait",
      "TraitList"
    ],
    "traits": [
      {
        "def": "ConditionallySpeculatable",
        "kind": "def",
        "printable": "ConditionallySpeculatable"
      },
      {
        "def": "AlwaysSpeculatableImplTrait",
        "kind": "def",
        "printable": "AlwaysSpeculatableImplTrait"
      }
    ]
  },
  "AlwaysSpeculatableImplTrait": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:110"
    ],
    "!name": "AlwaysSpeculatableImplTrait",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "AlwaysSpeculatableImplTrait"
  },
  "AnyAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:163"
    ],
    "!name": "AnyAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": "$0",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_5",
      "kind": "def",
      "printable": "anonymous_5"
    },
    "returnType": "::mlir::Attribute",
    "storageType": "::mlir::Attribute",
    "summary": "any attribute",
    "valueType": null
  },
  "AnyComplex": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:355"
    ],
    "!name": "AnyComplex",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::ComplexType",
    "description": "",
    "predicate": {
      "def": "anonymous_51",
      "kind": "def",
      "printable": "anonymous_51"
    },
    "summary": "complex-type"
  },
  "AnyFixedVector": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:660"
    ],
    "!name": "AnyFixedVector",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "FixedVectorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::VectorType",
    "description": "",
    "predicate": {
      "def": "anonymous_59",
      "kind": "def",
      "printable": "anonymous_59"
    },
    "summary": "fixed-length vector of any type values"
  },
  "AnyFloat": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:311"
    ],
    "!name": "AnyFloat",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::FloatType",
    "description": "",
    "predicate": {
      "def": "anonymous_34",
      "kind": "def",
      "printable": "anonymous_34"
    },
    "summary": "floating-point"
  },
  "AnyI1": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:223"
    ],
    "!name": "AnyI1",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyI"
    ],
    "bitwidth": 1,
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_8",
      "kind": "def",
      "printable": "anonymous_8"
    },
    "summary": "1-bit integer"
  },
  "AnyI16": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:225"
    ],
    "!name": "AnyI16",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyI"
    ],
    "bitwidth": 16,
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_10",
      "kind": "def",
      "printable": "anonymous_10"
    },
    "summary": "16-bit integer"
  },
  "AnyI16Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:219"
    ],
    "!name": "AnyI16Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "AnyIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_201",
      "kind": "def",
      "printable": "anonymous_201"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "16-bit integer attribute",
    "valueType": {
      "def": "AnyI16",
      "kind": "def",
      "printable": "AnyI16"
    }
  },
  "AnyI1Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:217"
    ],
    "!name": "AnyI1Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "AnyIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_197",
      "kind": "def",
      "printable": "anonymous_197"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "1-bit integer attribute",
    "valueType": {
      "def": "AnyI1",
      "kind": "def",
      "printable": "AnyI1"
    }
  },
  "AnyI32": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:226"
    ],
    "!name": "AnyI32",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyI"
    ],
    "bitwidth": 32,
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_11",
      "kind": "def",
      "printable": "anonymous_11"
    },
    "summary": "32-bit integer"
  },
  "AnyI32Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:220"
    ],
    "!name": "AnyI32Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "AnyIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_203",
      "kind": "def",
      "printable": "anonymous_203"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "32-bit integer attribute",
    "valueType": {
      "def": "AnyI32",
      "kind": "def",
      "printable": "AnyI32"
    }
  },
  "AnyI32ElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:456"
    ],
    "!name": "AnyI32ElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase",
      "IntElementsAttrOf"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_261",
      "kind": "def",
      "printable": "anonymous_261"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "32-bit integer elements attribute",
    "valueType": null
  },
  "AnyI64": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:227"
    ],
    "!name": "AnyI64",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyI"
    ],
    "bitwidth": 64,
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_12",
      "kind": "def",
      "printable": "anonymous_12"
    },
    "summary": "64-bit integer"
  },
  "AnyI64Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:221"
    ],
    "!name": "AnyI64Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "AnyIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_205",
      "kind": "def",
      "printable": "anonymous_205"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "64-bit integer attribute",
    "valueType": {
      "def": "AnyI64",
      "kind": "def",
      "printable": "AnyI64"
    }
  },
  "AnyI64ElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:457"
    ],
    "!name": "AnyI64ElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase",
      "IntElementsAttrOf"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_263",
      "kind": "def",
      "printable": "anonymous_263"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "64-bit integer elements attribute",
    "valueType": null
  },
  "AnyI8": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:224"
    ],
    "!name": "AnyI8",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyI"
    ],
    "bitwidth": 8,
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_9",
      "kind": "def",
      "printable": "anonymous_9"
    },
    "summary": "8-bit integer"
  },
  "AnyI8Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:218"
    ],
    "!name": "AnyI8Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "AnyIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_199",
      "kind": "def",
      "printable": "anonymous_199"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "8-bit integer attribute",
    "valueType": {
      "def": "AnyI8",
      "kind": "def",
      "printable": "AnyI8"
    }
  },
  "AnyIntElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:449"
    ],
    "!name": "AnyIntElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_259",
      "kind": "def",
      "printable": "anonymous_259"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "integer elements attribute",
    "valueType": null
  },
  "AnyInteger": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:209"
    ],
    "!name": "AnyInteger",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_7",
      "kind": "def",
      "printable": "anonymous_7"
    },
    "summary": "integer"
  },
  "AnyMemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:766"
    ],
    "!name": "AnyMemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_146",
      "kind": "def",
      "printable": "anonymous_146"
    },
    "summary": "memref of any type values"
  },
  "AnyNon0RankedMemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:767"
    ],
    "!name": "AnyNon0RankedMemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ConfinedType",
      "Non0RankedMemRefOf"
    ],
    "baseType": {
      "def": "anonymous_147",
      "kind": "def",
      "printable": "anonymous_147"
    },
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_148",
      "kind": "def",
      "printable": "anonymous_148"
    },
    "predicateList": [
      {
        "def": "anonymous_114",
        "kind": "def",
        "printable": "anonymous_114"
      }
    ],
    "summary": "non-0-ranked.memref of any type values"
  },
  "AnyNon0RankedOrUnrankedMemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:781"
    ],
    "!name": "AnyNon0RankedOrUnrankedMemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "AnyUnrankedMemRef",
        "kind": "def",
        "printable": "AnyUnrankedMemRef"
      },
      {
        "def": "AnyNon0RankedMemRef",
        "kind": "def",
        "printable": "AnyNon0RankedMemRef"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_151",
      "kind": "def",
      "printable": "anonymous_151"
    },
    "summary": "unranked.memref of any type values or non-0-ranked.memref of any type values"
  },
  "AnyNon0RankedOrUnrankedTensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:723"
    ],
    "!name": "AnyNon0RankedOrUnrankedTensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "AnyUnrankedTensor",
        "kind": "def",
        "printable": "AnyUnrankedTensor"
      },
      {
        "def": "AnyNon0RankedTensor",
        "kind": "def",
        "printable": "AnyNon0RankedTensor"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_122",
      "kind": "def",
      "printable": "anonymous_122"
    },
    "summary": "non-0-ranked or unranked tensor"
  },
  "AnyNon0RankedTensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:720"
    ],
    "!name": "AnyNon0RankedTensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf",
      "Non0RankedTensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_119",
      "kind": "def",
      "printable": "anonymous_119"
    },
    "summary": "non-0-ranked.tensor of any type values"
  },
  "AnyRankedOrUnrankedMemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:780"
    ],
    "!name": "AnyRankedOrUnrankedMemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "RankedOrUnrankedMemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::BaseMemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_150",
      "kind": "def",
      "printable": "anonymous_150"
    },
    "summary": "ranked or unranked memref of any type values"
  },
  "AnyRankedTensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:719"
    ],
    "!name": "AnyRankedTensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "RankedTensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::RankedTensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_118",
      "kind": "def",
      "printable": "anonymous_118"
    },
    "summary": "ranked tensor of any type values"
  },
  "AnyRegion": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:204"
    ],
    "!name": "AnyRegion",
    "!superclasses": [
      "Constraint",
      "RegionConstraint",
      "Region"
    ],
    "predicate": {
      "def": "anonymous_5",
      "kind": "def",
      "printable": "anonymous_5"
    },
    "summary": "any region"
  },
  "AnyScalableVector": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:662"
    ],
    "!name": "AnyScalableVector",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "ScalableVectorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::VectorType",
    "description": "",
    "predicate": {
      "def": "anonymous_60",
      "kind": "def",
      "printable": "anonymous_60"
    },
    "summary": "scalable vector of any type values"
  },
  "AnyShaped": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:666"
    ],
    "!name": "AnyShaped",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::ShapedType",
    "description": "",
    "predicate": {
      "def": "anonymous_61",
      "kind": "def",
      "printable": "anonymous_61"
    },
    "summary": "shaped of any type values"
  },
  "AnySignedInteger": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:254"
    ],
    "!name": "AnySignedInteger",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_20",
      "kind": "def",
      "printable": "anonymous_20"
    },
    "summary": "signed integer"
  },
  "AnySignlessInteger": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:230"
    ],
    "!name": "AnySignlessInteger",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_13",
      "kind": "def",
      "printable": "anonymous_13"
    },
    "summary": "signless integer"
  },
  "AnySignlessIntegerOrIndex": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:305"
    ],
    "!name": "AnySignlessIntegerOrIndex",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_33",
      "kind": "def",
      "printable": "anonymous_33"
    },
    "summary": "signless integer or index"
  },
  "AnyStaticShapeMemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:809"
    ],
    "!name": "AnyStaticShapeMemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ConfinedType",
      "StaticShapeMemRefOf"
    ],
    "baseType": {
      "def": "anonymous_147",
      "kind": "def",
      "printable": "anonymous_147"
    },
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_161",
      "kind": "def",
      "printable": "anonymous_161"
    },
    "predicateList": [
      {
        "def": "HasStaticShapePred",
        "kind": "def",
        "printable": "HasStaticShapePred"
      }
    ],
    "summary": "statically shaped memref of any type values"
  },
  "AnyStaticShapeTensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:743"
    ],
    "!name": "AnyStaticShapeTensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "RankedTensorOf",
      "StaticShapeTensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::RankedTensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_144",
      "kind": "def",
      "printable": "anonymous_144"
    },
    "summary": "statically shaped tensor of any type values"
  },
  "AnyStridedMemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:818"
    ],
    "!name": "AnyStridedMemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ConfinedType",
      "StridedMemRefOf"
    ],
    "baseType": {
      "def": "anonymous_147",
      "kind": "def",
      "printable": "anonymous_147"
    },
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_162",
      "kind": "def",
      "printable": "anonymous_162"
    },
    "predicateList": [
      {
        "def": "HasStridesPred",
        "kind": "def",
        "printable": "HasStridesPred"
      }
    ],
    "summary": "strided memref of any type values"
  },
  "AnySuccessor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:189"
    ],
    "!name": "AnySuccessor",
    "!superclasses": [
      "Constraint",
      "SuccessorConstraint",
      "Successor"
    ],
    "predicate": null,
    "summary": "any successor"
  },
  "AnyTensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:701"
    ],
    "!name": "AnyTensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_63",
      "kind": "def",
      "printable": "anonymous_63"
    },
    "summary": "tensor of any type values"
  },
  "AnyTuple": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:830"
    ],
    "!name": "AnyTuple",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TupleType",
    "description": "",
    "predicate": {
      "def": "IsTupleTypePred",
      "kind": "def",
      "printable": "IsTupleTypePred"
    },
    "summary": "tuple"
  },
  "AnyType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:166"
    ],
    "!name": "AnyType",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_5",
      "kind": "def",
      "printable": "anonymous_5"
    },
    "summary": "any type"
  },
  "AnyUnrankedMemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:754"
    ],
    "!name": "AnyUnrankedMemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "UnrankedMemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::UnrankedMemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_145",
      "kind": "def",
      "printable": "anonymous_145"
    },
    "summary": "unranked.memref of any type values"
  },
  "AnyUnrankedTensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:721"
    ],
    "!name": "AnyUnrankedTensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "UnrankedTensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::UnrankedTensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_121",
      "kind": "def",
      "printable": "anonymous_121"
    },
    "summary": "unranked tensor of any type values"
  },
  "AnyUnsignedInteger": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:277"
    ],
    "!name": "AnyUnsignedInteger",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_26",
      "kind": "def",
      "printable": "anonymous_26"
    },
    "summary": "unsigned integer"
  },
  "AnyVector": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:656"
    ],
    "!name": "AnyVector",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "VectorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::VectorType",
    "description": "",
    "predicate": {
      "def": "anonymous_57",
      "kind": "def",
      "printable": "anonymous_57"
    },
    "summary": "vector of any type values"
  },
  "AnyVectorOfAnyRank": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:658"
    ],
    "!name": "AnyVectorOfAnyRank",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "VectorOfAnyRankOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::VectorType",
    "description": "",
    "predicate": {
      "def": "anonymous_58",
      "kind": "def",
      "printable": "anonymous_58"
    },
    "summary": "vector of any type values"
  },
  "ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:570"
    ],
    "!name": "ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_273",
      "kind": "def",
      "printable": "anonymous_273"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "AttrSizedOperandSegments": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:171"
    ],
    "!name": "AttrSizedOperandSegments",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait",
      "StructuralOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "AttrSizedOperandSegments"
  },
  "AttrSizedResultSegments": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:175"
    ],
    "!name": "AttrSizedResultSegments",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait",
      "StructuralOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "AttrSizedResultSegments"
  },
  "AutomaticAllocationScope": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:67"
    ],
    "!name": "AutomaticAllocationScope",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "AutomaticAllocationScope"
  },
  "AutomaticAllocationScopeResource": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaceBase.td:38"
    ],
    "!name": "AutomaticAllocationScopeResource",
    "!superclasses": [
      "Resource",
      "IntrinsicResource"
    ],
    "name": "::mlir::SideEffects::AutomaticAllocationScopeResource"
  },
  "BF16": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:332"
    ],
    "!name": "BF16",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getBF16Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_40",
      "kind": "def",
      "printable": "anonymous_40"
    },
    "summary": "bfloat16 type"
  },
  "BF16MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:792"
    ],
    "!name": "BF16MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_157",
      "kind": "def",
      "printable": "anonymous_157"
    },
    "summary": "memref of bfloat16 type values"
  },
  "BF16Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:710"
    ],
    "!name": "BF16Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_98",
      "kind": "def",
      "printable": "anonymous_98"
    },
    "summary": "tensor of bfloat16 type values"
  },
  "BoolArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:597"
    ],
    "!name": "BoolArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getBoolArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "BoolAttr",
      "kind": "def",
      "printable": "BoolAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_282",
      "kind": "def",
      "printable": "anonymous_282"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "1-bit boolean array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "BoolAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:187"
    ],
    "!name": "BoolAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getBoolAttr($0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_192",
      "kind": "def",
      "printable": "anonymous_192"
    },
    "returnType": " bool ",
    "storageType": " ::mlir::BoolAttr ",
    "summary": "bool attribute",
    "valueType": {
      "def": "I1",
      "kind": "def",
      "printable": "I1"
    }
  },
  "BoolLike": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:896"
    ],
    "!name": "BoolLike",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "TypeOrContainer"
    ],
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "predicate": {
      "def": "anonymous_166",
      "kind": "def",
      "printable": "anonymous_166"
    },
    "summary": "bool-like"
  },
  "BoolLikeOfAnyRank": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:898"
    ],
    "!name": "BoolLikeOfAnyRank",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "TypeOrContainerOfAnyRank"
    ],
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "predicate": {
      "def": "anonymous_170",
      "kind": "def",
      "printable": "anonymous_170"
    },
    "summary": "bool-like"
  },
  "BoolProperty": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Properties.td:261"
    ],
    "!name": "BoolProperty",
    "!superclasses": [
      "Property",
      "IntProperty"
    ],
    "assignToStorage": "$_storage = $_value",
    "baseProperty": null,
    "convertFromAttribute": "\n    return convertFromAttribute($_storage, $_attr, $_diag);\n  ",
    "convertFromStorage": "$_storage",
    "convertToAttribute": "\n    return convertToAttribute($_ctxt, $_storage);\n  ",
    "defaultValue": "",
    "description": "",
    "hashProperty": "",
    "interfaceType": "bool",
    "optionalParser": "\n    return $_parser.parseOptionalInteger($_storage);\n  ",
    "parser": "\n    auto value = ::mlir::FieldParser<bool>::parse($_parser);\n    if (::mlir::failed(value))\n      return ::mlir::failure();\n    $_storage = std::move(*value);\n  ",
    "printer": " $_printer << ($_storage ? \"true\" : \"false\") ",
    "readFromMlirBytecode": "\n    return $_reader.readBool($_storage);\n  ",
    "storageType": "bool",
    "storageTypeValueOverride": "",
    "summary": "boolean",
    "writeToMlirBytecode": "\n    $_writer.writeOwnedBool($_storage);\n  "
  },
  "CastOpInterface": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CastInterfaces.td:19"
    ],
    "!name": "CastOpInterface",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "CastOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    A cast-like operation is one that converts from a set of input types to a\n    set of output types. The arity of the inputs may be from 0-N, whereas the\n    arity of the outputs may be anything from 1-N. Cast-like operations are\n    trivially removable in cases where they produce an No-op, i.e when the\n    input types and output types match 1-1.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "\n    /// Attempt to fold the given cast operation.\n    static LogicalResult foldTrait(Operation *op, ArrayRef<Attribute> operands,\n                                   SmallVectorImpl<OpFoldResult> &results) {\n      return impl::foldCastInterfaceOp(op, operands, results);\n    }\n  ",
    "methods": [
      {
        "def": "anonymous_353",
        "kind": "def",
        "printable": "anonymous_353"
      }
    ],
    "trait": "CastOpInterface::Trait",
    "verify": "\n    return impl::verifyCastInterfaceOp($_op);\n  ",
    "verifyWithRegions": 0
  },
  "Commutative": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:73"
    ],
    "!name": "Commutative",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "IsCommutative"
  },
  "ConditionallySpeculatable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:118"
    ],
    "!name": "ConditionallySpeculatable",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "ConditionallySpeculatable",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    An interface used to query information about the speculability of an\n    operation.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_373",
        "kind": "def",
        "printable": "anonymous_373"
      }
    ],
    "trait": "ConditionallySpeculatable::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "ConstBoolAttrFalse": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:718"
    ],
    "!name": "ConstBoolAttrFalse",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "ConstantAttr"
    ],
    "attr": {
      "def": "BoolAttr",
      "kind": "def",
      "printable": "BoolAttr"
    },
    "predicate": {
      "def": "anonymous_315",
      "kind": "def",
      "printable": "anonymous_315"
    },
    "summary": "constant attribute false",
    "value": "false"
  },
  "ConstBoolAttrTrue": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:719"
    ],
    "!name": "ConstBoolAttrTrue",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "ConstantAttr"
    ],
    "attr": {
      "def": "BoolAttr",
      "kind": "def",
      "printable": "BoolAttr"
    },
    "predicate": {
      "def": "anonymous_316",
      "kind": "def",
      "printable": "anonymous_316"
    },
    "summary": "constant attribute true",
    "value": "true"
  },
  "ConstUnitAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:720"
    ],
    "!name": "ConstUnitAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "ConstantAttr"
    ],
    "attr": {
      "def": "UnitAttr",
      "kind": "def",
      "printable": "UnitAttr"
    },
    "predicate": {
      "def": "anonymous_317",
      "kind": "def",
      "printable": "anonymous_317"
    },
    "summary": "constant attribute true",
    "value": "true"
  },
  "ConstantLike": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:81"
    ],
    "!name": "ConstantLike",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "ConstantLike"
  },
  "DefaultResource": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaceBase.td:36"
    ],
    "!name": "DefaultResource",
    "!superclasses": [
      "Resource",
      "IntrinsicResource"
    ],
    "name": "::mlir::SideEffects::DefaultResource"
  },
  "DenseBoolArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:434"
    ],
    "!name": "DenseBoolArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "DenseArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDenseBoolArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_250",
      "kind": "def",
      "printable": "anonymous_250"
    },
    "returnType": "::llvm::ArrayRef<bool>",
    "storageType": "::mlir::DenseBoolArrayAttr",
    "summary": "i1 dense array attribute",
    "valueType": null
  },
  "DenseF32ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:439"
    ],
    "!name": "DenseF32ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "DenseArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDenseF32ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_255",
      "kind": "def",
      "printable": "anonymous_255"
    },
    "returnType": "::llvm::ArrayRef<float>",
    "storageType": "::mlir::DenseF32ArrayAttr",
    "summary": "f32 dense array attribute",
    "valueType": null
  },
  "DenseF64ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:440"
    ],
    "!name": "DenseF64ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "DenseArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDenseF64ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_256",
      "kind": "def",
      "printable": "anonymous_256"
    },
    "returnType": "::llvm::ArrayRef<double>",
    "storageType": "::mlir::DenseF64ArrayAttr",
    "summary": "f64 dense array attribute",
    "valueType": null
  },
  "DenseI16ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:436"
    ],
    "!name": "DenseI16ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "DenseArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDenseI16ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_252",
      "kind": "def",
      "printable": "anonymous_252"
    },
    "returnType": "::llvm::ArrayRef<int16_t>",
    "storageType": "::mlir::DenseI16ArrayAttr",
    "summary": "i16 dense array attribute",
    "valueType": null
  },
  "DenseI32ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:437"
    ],
    "!name": "DenseI32ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "DenseArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDenseI32ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_253",
      "kind": "def",
      "printable": "anonymous_253"
    },
    "returnType": "::llvm::ArrayRef<int32_t>",
    "storageType": "::mlir::DenseI32ArrayAttr",
    "summary": "i32 dense array attribute",
    "valueType": null
  },
  "DenseI64ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:438"
    ],
    "!name": "DenseI64ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "DenseArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDenseI64ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_254",
      "kind": "def",
      "printable": "anonymous_254"
    },
    "returnType": "::llvm::ArrayRef<int64_t>",
    "storageType": "::mlir::DenseI64ArrayAttr",
    "summary": "i64 dense array attribute",
    "valueType": null
  },
  "DenseI8ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:435"
    ],
    "!name": "DenseI8ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "DenseArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDenseI8ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_251",
      "kind": "def",
      "printable": "anonymous_251"
    },
    "returnType": "::llvm::ArrayRef<int8_t>",
    "storageType": "::mlir::DenseI8ArrayAttr",
    "summary": "i8 dense array attribute",
    "valueType": null
  },
  "DictArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:634"
    ],
    "!name": "DictArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "DictionaryAttr",
      "kind": "def",
      "printable": "DictionaryAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_306",
      "kind": "def",
      "printable": "anonymous_306"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "Array of dictionary attributes",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "DictionaryAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:403"
    ],
    "!name": "DictionaryAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "DictionaryAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getDictionaryAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_247",
      "kind": "def",
      "printable": "anonymous_247"
    },
    "returnType": " ::mlir::DictionaryAttr ",
    "storageType": " ::mlir::DictionaryAttr ",
    "summary": "dictionary of named attribute values",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "ElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:414"
    ],
    "!name": "ElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_248",
      "kind": "def",
      "printable": "anonymous_248"
    },
    "returnType": " ::mlir::ElementsAttr ",
    "storageType": " ::mlir::ElementsAttr ",
    "summary": "constant vector/tensor attribute",
    "valueType": null
  },
  "Elementwise": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:105"
    ],
    "!name": "Elementwise",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "Elementwise"
  },
  "ElementwiseMappable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:115"
    ],
    "!name": "ElementwiseMappable",
    "!superclasses": [
      "Trait",
      "TraitList"
    ],
    "traits": [
      {
        "def": "Elementwise",
        "kind": "def",
        "printable": "Elementwise"
      },
      {
        "def": "Scalarizable",
        "kind": "def",
        "printable": "Scalarizable"
      },
      {
        "def": "Vectorizable",
        "kind": "def",
        "printable": "Vectorizable"
      },
      {
        "def": "Tensorizable",
        "kind": "def",
        "printable": "Tensorizable"
      }
    ]
  },
  "F128": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:330"
    ],
    "!name": "F128",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "F"
    ],
    "bitwidth": 128,
    "builderCall": "$_builder.getF128Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::FloatType",
    "description": "",
    "predicate": {
      "def": "anonymous_39",
      "kind": "def",
      "printable": "anonymous_39"
    },
    "summary": "128-bit float"
  },
  "F16": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:326"
    ],
    "!name": "F16",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "F"
    ],
    "bitwidth": 16,
    "builderCall": "$_builder.getF16Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::FloatType",
    "description": "",
    "predicate": {
      "def": "anonymous_35",
      "kind": "def",
      "printable": "anonymous_35"
    },
    "summary": "16-bit float"
  },
  "F16MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:793"
    ],
    "!name": "F16MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_158",
      "kind": "def",
      "printable": "anonymous_158"
    },
    "summary": "memref of 16-bit float values"
  },
  "F16Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:711"
    ],
    "!name": "F16Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_103",
      "kind": "def",
      "printable": "anonymous_103"
    },
    "summary": "tensor of 16-bit float values"
  },
  "F32": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:327"
    ],
    "!name": "F32",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "F"
    ],
    "bitwidth": 32,
    "builderCall": "$_builder.getF32Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::FloatType",
    "description": "",
    "predicate": {
      "def": "anonymous_36",
      "kind": "def",
      "printable": "anonymous_36"
    },
    "summary": "32-bit float"
  },
  "F32ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:620"
    ],
    "!name": "F32ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getF32ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "F32Attr",
      "kind": "def",
      "printable": "F32Attr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_291",
      "kind": "def",
      "printable": "anonymous_291"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "32-bit float array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "F32Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:326"
    ],
    "!name": "F32Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "FloatAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getFloatAttr($_builder.getF32Type(), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_238",
      "kind": "def",
      "printable": "anonymous_238"
    },
    "returnType": " ::llvm::APFloat ",
    "storageType": "::mlir::FloatAttr",
    "summary": "32-bit float attribute",
    "valueType": {
      "def": "F32",
      "kind": "def",
      "printable": "F32"
    }
  },
  "F32MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:794"
    ],
    "!name": "F32MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_159",
      "kind": "def",
      "printable": "anonymous_159"
    },
    "summary": "memref of 32-bit float values"
  },
  "F32Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:712"
    ],
    "!name": "F32Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_108",
      "kind": "def",
      "printable": "anonymous_108"
    },
    "summary": "tensor of 32-bit float values"
  },
  "F64": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:328"
    ],
    "!name": "F64",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "F"
    ],
    "bitwidth": 64,
    "builderCall": "$_builder.getF64Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::FloatType",
    "description": "",
    "predicate": {
      "def": "anonymous_37",
      "kind": "def",
      "printable": "anonymous_37"
    },
    "summary": "64-bit float"
  },
  "F64ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:623"
    ],
    "!name": "F64ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getF64ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "F64Attr",
      "kind": "def",
      "printable": "F64Attr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_294",
      "kind": "def",
      "printable": "anonymous_294"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "64-bit float array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "F64Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:327"
    ],
    "!name": "F64Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "FloatAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getFloatAttr($_builder.getF64Type(), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_240",
      "kind": "def",
      "printable": "anonymous_240"
    },
    "returnType": " ::llvm::APFloat ",
    "storageType": "::mlir::FloatAttr",
    "summary": "64-bit float attribute",
    "valueType": {
      "def": "F64",
      "kind": "def",
      "printable": "F64"
    }
  },
  "F64ElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:513"
    ],
    "!name": "F64ElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "FloatElementsAttr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::mlir::DenseElementsAttr::get(::mlir::RankedTensorType::get({}, $_builder.getF64Type()),::llvm::ArrayRef($0))",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_270",
      "kind": "def",
      "printable": "anonymous_270"
    },
    "returnType": " ::mlir::DenseElementsAttr ",
    "storageType": " ::mlir::DenseElementsAttr ",
    "summary": "64-bit float elements attribute",
    "valueType": null
  },
  "F64MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:795"
    ],
    "!name": "F64MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_160",
      "kind": "def",
      "printable": "anonymous_160"
    },
    "summary": "memref of 64-bit float values"
  },
  "F64Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:713"
    ],
    "!name": "F64Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_113",
      "kind": "def",
      "printable": "anonymous_113"
    },
    "summary": "tensor of 64-bit float values"
  },
  "F6E2M3FN": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:350"
    ],
    "!name": "F6E2M3FN",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat6E2M3FNType()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_49",
      "kind": "def",
      "printable": "anonymous_49"
    },
    "summary": "f6E2M3FN type"
  },
  "F6E3M2FN": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:352"
    ],
    "!name": "F6E3M2FN",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat6E3M2FNType()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_50",
      "kind": "def",
      "printable": "anonymous_50"
    },
    "summary": "f6E3M2FN type"
  },
  "F80": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:329"
    ],
    "!name": "F80",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "F"
    ],
    "bitwidth": 80,
    "builderCall": "$_builder.getF80Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::FloatType",
    "description": "",
    "predicate": {
      "def": "anonymous_38",
      "kind": "def",
      "printable": "anonymous_38"
    },
    "summary": "80-bit float"
  },
  "F8E3M4": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:348"
    ],
    "!name": "F8E3M4",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat8E3M4Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_48",
      "kind": "def",
      "printable": "anonymous_48"
    },
    "summary": "f8E3M4 type"
  },
  "F8E4M3": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:340"
    ],
    "!name": "F8E4M3",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat8E4M3Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_44",
      "kind": "def",
      "printable": "anonymous_44"
    },
    "summary": "f8E4M3 type"
  },
  "F8E4M3B11FNUZ": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:344"
    ],
    "!name": "F8E4M3B11FNUZ",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat8E4M3B11FNUZType()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_46",
      "kind": "def",
      "printable": "anonymous_46"
    },
    "summary": "f8E4M3B11FNUZ type"
  },
  "F8E4M3FN": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:336"
    ],
    "!name": "F8E4M3FN",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat8E4M3FNType()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_42",
      "kind": "def",
      "printable": "anonymous_42"
    },
    "summary": "f8E4M3FN type"
  },
  "F8E4M3FNUZ": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:342"
    ],
    "!name": "F8E4M3FNUZ",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat8E4M3FNUZType()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_45",
      "kind": "def",
      "printable": "anonymous_45"
    },
    "summary": "f8E4M3FNUZ type"
  },
  "F8E5M2": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:338"
    ],
    "!name": "F8E5M2",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat8E5M2Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_43",
      "kind": "def",
      "printable": "anonymous_43"
    },
    "summary": "f8E5M2 type"
  },
  "F8E5M2FNUZ": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:346"
    ],
    "!name": "F8E5M2FNUZ",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getFloat8E5M2FNUZType()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_47",
      "kind": "def",
      "printable": "anonymous_47"
    },
    "summary": "f8E5M2FNUZ type"
  },
  "FirstAttrDerivedResultType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:147"
    ],
    "!name": "FirstAttrDerivedResultType",
    "!superclasses": [
      "Trait",
      "GenInternalTrait",
      "GenInternalOpTrait"
    ],
    "dependentTraits": [],
    "trait": "::mlir::OpTrait::FirstAttrDerivedResultType"
  },
  "FlatSymbolRefArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:663"
    ],
    "!name": "FlatSymbolRefArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "FlatSymbolRefAttr",
      "kind": "def",
      "printable": "FlatSymbolRefAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_314",
      "kind": "def",
      "printable": "anonymous_314"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "flat symbol ref array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "FlatSymbolRefAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:648"
    ],
    "!name": "FlatSymbolRefAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::mlir::SymbolRefAttr::get($_builder.getContext(), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_308",
      "kind": "def",
      "printable": "anonymous_308"
    },
    "returnType": " ::llvm::StringRef ",
    "storageType": " ::mlir::FlatSymbolRefAttr ",
    "summary": "flat symbol reference attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "FloatLike": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:910"
    ],
    "!name": "FloatLike",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "TypeOrContainer"
    ],
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "predicate": {
      "def": "anonymous_189",
      "kind": "def",
      "printable": "anonymous_189"
    },
    "summary": "floating-point-like"
  },
  "FullEffect": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaceBase.td:157"
    ],
    "!name": "FullEffect",
    "!superclasses": [
      "EffectRange"
    ],
    "Value": [
      1
    ]
  },
  "FunctionType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:380"
    ],
    "!name": "FunctionType",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::FunctionType",
    "description": "",
    "predicate": {
      "def": "anonymous_52",
      "kind": "def",
      "printable": "anonymous_52"
    },
    "summary": "function type"
  },
  "HasRankPred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:404"
    ],
    "!name": "HasRankPred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).hasRank())"
  },
  "HasStaticShapePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:86"
    ],
    "!name": "HasStaticShapePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).hasStaticShape())"
  },
  "HasStridesPred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:812"
    ],
    "!name": "HasStridesPred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "( isStrided(::llvm::cast<::mlir::MemRefType>($_self)) )"
  },
  "HasValueSemanticsPred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:93"
    ],
    "!name": "HasValueSemanticsPred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.hasTrait<::mlir::ValueSemantics>())"
  },
  "I1": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:246"
    ],
    "!name": "I1",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "I"
    ],
    "bitwidth": 1,
    "builderCall": "$_builder.getIntegerType(1)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_14",
      "kind": "def",
      "printable": "anonymous_14"
    },
    "summary": "1-bit signless integer"
  },
  "I128": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:251"
    ],
    "!name": "I128",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "I"
    ],
    "bitwidth": 128,
    "builderCall": "$_builder.getIntegerType(128)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_19",
      "kind": "def",
      "printable": "anonymous_19"
    },
    "summary": "128-bit signless integer"
  },
  "I16": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:248"
    ],
    "!name": "I16",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "I"
    ],
    "bitwidth": 16,
    "builderCall": "$_builder.getIntegerType(16)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_16",
      "kind": "def",
      "printable": "anonymous_16"
    },
    "summary": "16-bit signless integer"
  },
  "I16Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:251"
    ],
    "!name": "I16Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "TypedSignlessIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(16), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_211",
      "kind": "def",
      "printable": "anonymous_211"
    },
    "returnType": "uint16_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "16-bit signless integer attribute",
    "valueType": {
      "def": "I16",
      "kind": "def",
      "printable": "I16"
    }
  },
  "I16MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:788"
    ],
    "!name": "I16MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_154",
      "kind": "def",
      "printable": "anonymous_154"
    },
    "summary": "memref of 16-bit signless integer values"
  },
  "I16Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:705"
    ],
    "!name": "I16Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_78",
      "kind": "def",
      "printable": "anonymous_78"
    },
    "summary": "tensor of 16-bit signless integer values"
  },
  "I1Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:247"
    ],
    "!name": "I1Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "TypedSignlessIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(1), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_207",
      "kind": "def",
      "printable": "anonymous_207"
    },
    "returnType": "bool",
    "storageType": "::mlir::IntegerAttr",
    "summary": "1-bit signless integer attribute",
    "valueType": {
      "def": "I1",
      "kind": "def",
      "printable": "I1"
    }
  },
  "I1MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:786"
    ],
    "!name": "I1MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_152",
      "kind": "def",
      "printable": "anonymous_152"
    },
    "summary": "memref of 1-bit signless integer values"
  },
  "I1Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:703"
    ],
    "!name": "I1Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_68",
      "kind": "def",
      "printable": "anonymous_68"
    },
    "summary": "tensor of 1-bit signless integer values"
  },
  "I32": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:249"
    ],
    "!name": "I32",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "I"
    ],
    "bitwidth": 32,
    "builderCall": "$_builder.getIntegerType(32)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_17",
      "kind": "def",
      "printable": "anonymous_17"
    },
    "summary": "32-bit signless integer"
  },
  "I32ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:601"
    ],
    "!name": "I32ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getI32ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "I32Attr",
      "kind": "def",
      "printable": "I32Attr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_285",
      "kind": "def",
      "printable": "anonymous_285"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "32-bit integer array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "I32Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:253"
    ],
    "!name": "I32Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "TypedSignlessIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_213",
      "kind": "def",
      "printable": "anonymous_213"
    },
    "returnType": "uint32_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "32-bit signless integer attribute",
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "I32ElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:471"
    ],
    "!name": "I32ElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase",
      "SignlessIntElementsAttr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::llvm::cast<::mlir::DenseIntElementsAttr>(::mlir::DenseElementsAttr::get(::mlir::RankedTensorType::get({}, $_builder.getIntegerType(32)), ::llvm::ArrayRef($0)))",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_265",
      "kind": "def",
      "printable": "anonymous_265"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "32-bit signless integer elements attribute",
    "valueType": null
  },
  "I32MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:789"
    ],
    "!name": "I32MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_155",
      "kind": "def",
      "printable": "anonymous_155"
    },
    "summary": "memref of 32-bit signless integer values"
  },
  "I32Property": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Properties.td:222"
    ],
    "!name": "I32Property",
    "!superclasses": [
      "Property",
      "IntProperty"
    ],
    "assignToStorage": "$_storage = $_value",
    "baseProperty": null,
    "convertFromAttribute": "\n    return convertFromAttribute($_storage, $_attr, $_diag);\n  ",
    "convertFromStorage": "$_storage",
    "convertToAttribute": "\n    return convertToAttribute($_ctxt, $_storage);\n  ",
    "defaultValue": "",
    "description": "",
    "hashProperty": "",
    "interfaceType": "int32_t",
    "optionalParser": "\n    return $_parser.parseOptionalInteger($_storage);\n  ",
    "parser": "\n    auto value = ::mlir::FieldParser<int32_t>::parse($_parser);\n    if (::mlir::failed(value))\n      return ::mlir::failure();\n    $_storage = std::move(*value);\n  ",
    "printer": "$_printer << $_storage",
    "readFromMlirBytecode": "\n    uint64_t val;\n    if (failed($_reader.readVarInt(val)))\n      return ::mlir::failure();\n    $_storage = val;\n  ",
    "storageType": "int32_t",
    "storageTypeValueOverride": "",
    "summary": "int32_t",
    "writeToMlirBytecode": "\n    $_writer.writeVarInt($_storage);\n  "
  },
  "I32Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:706"
    ],
    "!name": "I32Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_83",
      "kind": "def",
      "printable": "anonymous_83"
    },
    "summary": "tensor of 32-bit signless integer values"
  },
  "I64": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:250"
    ],
    "!name": "I64",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "I"
    ],
    "bitwidth": 64,
    "builderCall": "$_builder.getIntegerType(64)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_18",
      "kind": "def",
      "printable": "anonymous_18"
    },
    "summary": "64-bit signless integer"
  },
  "I64ArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:605"
    ],
    "!name": "I64ArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getI64ArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "I64Attr",
      "kind": "def",
      "printable": "I64Attr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_288",
      "kind": "def",
      "printable": "anonymous_288"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "64-bit integer array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "I64Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:255"
    ],
    "!name": "I64Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "TypedSignlessIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(64), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_215",
      "kind": "def",
      "printable": "anonymous_215"
    },
    "returnType": "uint64_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "64-bit signless integer attribute",
    "valueType": {
      "def": "I64",
      "kind": "def",
      "printable": "I64"
    }
  },
  "I64ElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:472"
    ],
    "!name": "I64ElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase",
      "SignlessIntElementsAttr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::llvm::cast<::mlir::DenseIntElementsAttr>(::mlir::DenseElementsAttr::get(::mlir::RankedTensorType::get({}, $_builder.getIntegerType(64)), ::llvm::ArrayRef($0)))",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_267",
      "kind": "def",
      "printable": "anonymous_267"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "64-bit signless integer elements attribute",
    "valueType": null
  },
  "I64MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:790"
    ],
    "!name": "I64MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_156",
      "kind": "def",
      "printable": "anonymous_156"
    },
    "summary": "memref of 64-bit signless integer values"
  },
  "I64Property": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Properties.td:223"
    ],
    "!name": "I64Property",
    "!superclasses": [
      "Property",
      "IntProperty"
    ],
    "assignToStorage": "$_storage = $_value",
    "baseProperty": null,
    "convertFromAttribute": "\n    return convertFromAttribute($_storage, $_attr, $_diag);\n  ",
    "convertFromStorage": "$_storage",
    "convertToAttribute": "\n    return convertToAttribute($_ctxt, $_storage);\n  ",
    "defaultValue": "",
    "description": "",
    "hashProperty": "",
    "interfaceType": "int64_t",
    "optionalParser": "\n    return $_parser.parseOptionalInteger($_storage);\n  ",
    "parser": "\n    auto value = ::mlir::FieldParser<int64_t>::parse($_parser);\n    if (::mlir::failed(value))\n      return ::mlir::failure();\n    $_storage = std::move(*value);\n  ",
    "printer": "$_printer << $_storage",
    "readFromMlirBytecode": "\n    uint64_t val;\n    if (failed($_reader.readVarInt(val)))\n      return ::mlir::failure();\n    $_storage = val;\n  ",
    "storageType": "int64_t",
    "storageTypeValueOverride": "",
    "summary": "int64_t",
    "writeToMlirBytecode": "\n    $_writer.writeVarInt($_storage);\n  "
  },
  "I64SmallVectorArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:610"
    ],
    "!name": "I64SmallVectorArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getI64ArrayAttr($0)",
    "convertFromStorage": "\n    llvm::to_vector<4>(\n      llvm::map_range($_self.getAsRange<mlir::IntegerAttr>(),\n      [](mlir::IntegerAttr attr) { return attr.getInt(); }));\n  ",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "I64Attr",
      "kind": "def",
      "printable": "I64Attr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_288",
      "kind": "def",
      "printable": "anonymous_288"
    },
    "returnType": " ::llvm::SmallVector<int64_t, 8> ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "64-bit integer array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "I64Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:707"
    ],
    "!name": "I64Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_88",
      "kind": "def",
      "printable": "anonymous_88"
    },
    "summary": "tensor of 64-bit signless integer values"
  },
  "I8": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:247"
    ],
    "!name": "I8",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "I"
    ],
    "bitwidth": 8,
    "builderCall": "$_builder.getIntegerType(8)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_15",
      "kind": "def",
      "printable": "anonymous_15"
    },
    "summary": "8-bit signless integer"
  },
  "I8Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:249"
    ],
    "!name": "I8Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "TypedSignlessIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(8), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_209",
      "kind": "def",
      "printable": "anonymous_209"
    },
    "returnType": "uint8_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "8-bit signless integer attribute",
    "valueType": {
      "def": "I8",
      "kind": "def",
      "printable": "I8"
    }
  },
  "I8MemRef": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:787"
    ],
    "!name": "I8MemRef",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_153",
      "kind": "def",
      "printable": "anonymous_153"
    },
    "summary": "memref of 8-bit signless integer values"
  },
  "I8Tensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:704"
    ],
    "!name": "I8Tensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_73",
      "kind": "def",
      "printable": "anonymous_73"
    },
    "summary": "tensor of 8-bit signless integer values"
  },
  "Idempotent": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:76"
    ],
    "!name": "Idempotent",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "IsIdempotent"
  },
  "Index": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:300"
    ],
    "!name": "Index",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getIndexType()",
    "cppFunctionName": "",
    "cppType": "::mlir::IndexType",
    "description": "",
    "predicate": {
      "def": "anonymous_32",
      "kind": "def",
      "printable": "anonymous_32"
    },
    "summary": "index"
  },
  "IndexAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:195"
    ],
    "!name": "IndexAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIndexType(), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_195",
      "kind": "def",
      "printable": "anonymous_195"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "index attribute",
    "valueType": {
      "def": "Index",
      "kind": "def",
      "printable": "Index"
    }
  },
  "IndexCmpPredicate": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexEnums.td:19"
    ],
    "!name": "IndexCmpPredicate",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "EnumAttrInfo",
      "IntEnumAttr",
      "I32EnumAttr"
    ],
    "baseAttr": null,
    "baseAttrClass": {
      "def": "anonymous_342",
      "kind": "def",
      "printable": "anonymous_342"
    },
    "className": "IndexCmpPredicate",
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "::mlir::index",
    "cppType": "::mlir::index::IndexCmpPredicate",
    "defaultValue": null,
    "description": "Enum cases:\n* eq (`EQ`)\n* ne (`NE`)\n* slt (`SLT`)\n* sle (`SLE`)\n* sgt (`SGT`)\n* sge (`SGE`)\n* ult (`ULT`)\n* ule (`ULE`)\n* ugt (`UGT`)\n* uge (`UGE`)",
    "enumerants": [
      {
        "def": "anonymous_322",
        "kind": "def",
        "printable": "anonymous_322"
      },
      {
        "def": "anonymous_324",
        "kind": "def",
        "printable": "anonymous_324"
      },
      {
        "def": "anonymous_326",
        "kind": "def",
        "printable": "anonymous_326"
      },
      {
        "def": "anonymous_328",
        "kind": "def",
        "printable": "anonymous_328"
      },
      {
        "def": "anonymous_330",
        "kind": "def",
        "printable": "anonymous_330"
      },
      {
        "def": "anonymous_332",
        "kind": "def",
        "printable": "anonymous_332"
      },
      {
        "def": "anonymous_334",
        "kind": "def",
        "printable": "anonymous_334"
      },
      {
        "def": "anonymous_336",
        "kind": "def",
        "printable": "anonymous_336"
      },
      {
        "def": "anonymous_338",
        "kind": "def",
        "printable": "anonymous_338"
      },
      {
        "def": "anonymous_340",
        "kind": "def",
        "printable": "anonymous_340"
      }
    ],
    "genSpecializedAttr": 0,
    "isOptional": 0,
    "maxEnumValFnName": "getMaxEnumValForIndexCmpPredicate",
    "parameterParser": "[&]() -> ::mlir::FailureOr<::mlir::index::IndexCmpPredicate> {\n    auto loc = $_parser.getCurrentLocation();\n    ::llvm::StringRef enumKeyword;\n    if (::mlir::failed($_parser.parseKeyword(&enumKeyword)))\n      return ::mlir::failure();\n    auto maybeEnum = ::mlir::index::symbolizeIndexCmpPredicate(enumKeyword);\n    if (maybeEnum)\n      return *maybeEnum;\n    return {(::llvm::LogicalResult)($_parser.emitError(loc) << \"expected \" << \"::mlir::index::IndexCmpPredicate\" << \" to be one of: \" << \"eq\" << \", \" << \"ne\" << \", \" << \"slt\" << \", \" << \"sle\" << \", \" << \"sgt\" << \", \" << \"sge\" << \", \" << \"ult\" << \", \" << \"ule\" << \", \" << \"ugt\" << \", \" << \"uge\")};\n  }()",
    "parameterPrinter": "$_printer << stringifyIndexCmpPredicate($_self)",
    "predicate": {
      "def": "anonymous_345",
      "kind": "def",
      "printable": "anonymous_345"
    },
    "returnType": " ::llvm::APInt ",
    "specializedAttrClassName": "IndexCmpPredicateAttr",
    "storageType": "::mlir::IntegerAttr",
    "stringToSymbolFnName": "symbolizeIndexCmpPredicate",
    "summary": "index comparison predicate kind",
    "symbolToStringFnName": "stringifyIndexCmpPredicate",
    "symbolToStringFnRetType": "::llvm::StringRef",
    "underlyingToSymbolFnName": "symbolizeIndexCmpPredicate",
    "underlyingType": "uint32_t",
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "IndexCmpPredicateAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexEnums.td:41"
    ],
    "!name": "IndexCmpPredicateAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "DialectAttr",
      "AttrOrTypeDef",
      "AttrDef",
      "EnumAttr"
    ],
    "assemblyFormat": "$value",
    "attrName": "index.cmp_predicate",
    "baseAttr": null,
    "builders": null,
    "constBuilderCall": "::mlir::index::IndexCmpPredicateAttr::get($_builder.getContext(), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppBaseClassName": "::mlir::Attribute",
    "cppClassName": "IndexCmpPredicateAttr",
    "cppNamespace": "::mlir::index",
    "cppType": "::mlir::index::IndexCmpPredicateAttr",
    "defaultValue": null,
    "description": "Enum cases:\n* eq (`EQ`)\n* ne (`NE`)\n* slt (`SLT`)\n* sle (`SLE`)\n* sgt (`SGT`)\n* sge (`SGE`)\n* ult (`ULT`)\n* ule (`ULE`)\n* ugt (`UGT`)\n* uge (`UGE`)",
    "dialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "enum": {
      "def": "IndexCmpPredicate",
      "kind": "def",
      "printable": "IndexCmpPredicate"
    },
    "extraClassDeclaration": "",
    "extraClassDefinition": "",
    "genAccessors": 1,
    "genStorageClass": 1,
    "genVerifyDecl": 0,
    "hasCustomAssemblyFormat": 0,
    "hasStorageCustomConstructor": 0,
    "isOptional": 0,
    "mnemonic": "cmp_predicate",
    "parameters": {
      "args": [
        [
          {
            "def": "anonymous_346",
            "kind": "def",
            "printable": "anonymous_346"
          },
          "value"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins anonymous_346:$value)"
    },
    "predicate": {
      "def": "anonymous_347",
      "kind": "def",
      "printable": "anonymous_347"
    },
    "returnType": "::mlir::index::IndexCmpPredicate",
    "skipDefaultBuilders": 0,
    "storageClass": "IndexCmpPredicateAttrStorage",
    "storageNamespace": "detail",
    "storageType": "::mlir::index::IndexCmpPredicateAttr",
    "summary": "index comparison predicate kind",
    "traits": [],
    "valueType": null
  },
  "IndexDialect": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexDialect.td:18"
    ],
    "!name": "IndexDialect",
    "!superclasses": [
      "Dialect"
    ],
    "cppNamespace": "::mlir::index",
    "dependentDialects": [],
    "description": "\n    The Index dialect contains operations for manipulating values of the builtin\n    `index` type. The index type models target-specific values of pointer width,\n    like `intptr_t`. Index values are typically used as loop bounds, array\n    subscripts, tensor dimensions, etc.\n\n    The operations in this dialect operate exclusively on scalar index types.\n    The dialect and its operations treat the index type as signless and contains\n    signed and unsigned versions of certain operations where the distinction is\n    meaningful. In particular, the operations and transformations are careful to\n    be aware of the target-independent-ness of the index type, such as when\n    folding.\n\n    The folding semantics of the Index dialect operations ensure that folding\n    produces the same results irrespective of the eventual target pointer width.\n    All index constants are stored in `APInt`s of maximum index bitwidth: 64.\n    Operations are folded using 64-bit integer arithmetic.\n\n    For operations where the values of the upper 32 bits don't impact the values\n    of the lower 32 bits, no additional handling is required because if the\n    target is 32-bit, the truncated folded result will be the same as if the\n    operation were computed with 32-bit arithmetic, and if the target is 64-bit,\n    the fold result is valid by default.\n\n    Consider addition: an overflow in 32-bit is the same as truncating the\n    result computed in 64-bit. For example, `add(0x800000008, 0x800000008)` is\n    `0x1000000010` in 64-bit, which truncates to `0x10`, the same result as\n    truncating the operands first: `add(0x08, 0x08)`. Specifically, an operation\n    `f` can always be folded if it satisfies the following for all 64-bit values\n    of `a` and `b`:\n\n    ```\n    trunc(f(a, b)) = f(trunc(a), trunc(b))\n    ```\n\n    When materializing target-specific code, constants just need to be truncated\n    as appropriate.\n\n    Operations where the values of the upper 32 bits do impact the values of the\n    lower 32 bits are not folded if the results would be different in 32-bit.\n    These are operations that right shift -- division, remainder, etc. These\n    operations are only folded for subsets of `a` and `b` for which the above\n    property is satisfied. This is checked per fold attempt.\n\n    Consider division: the 32-bit computation will differ from 64-bit if the\n    latter results in a high bit shifted into the lower 32 bits. For example,\n    `div(0x100000002, 2)` is `0x80000001` in 64-bit but `0x01` in 32-bit; it\n    cannot be folded. However, `div(0x200000002, 2)` can be folded. The 64-bit\n    result is `0x100000001`, which truncated to 32 bits is `0x01`. The 32-bit\n    result of the operation with truncated operands `div(0x02, 2)` which is\n    `0x01`, the same as truncating the 64-bit result.\n  ",
    "discardableAttrs": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins)"
    },
    "extraClassDeclaration": "\n    /// Register all dialect attributes.\n    void registerAttributes();\n    /// Register all dialect operations.\n    void registerOperations();\n  ",
    "hasCanonicalizer": 0,
    "hasConstantMaterializer": 1,
    "hasNonDefaultDestructor": 0,
    "hasOperationAttrVerify": 0,
    "hasOperationInterfaceFallback": 0,
    "hasRegionArgAttrVerify": 0,
    "hasRegionResultAttrVerify": 0,
    "isExtensible": 0,
    "name": "index",
    "summary": "The Index dialect",
    "useDefaultAttributePrinterParser": 1,
    "useDefaultTypePrinterParser": 0,
    "usePropertiesForAttributes": 1
  },
  "IndexElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:442"
    ],
    "!name": "IndexElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_258",
      "kind": "def",
      "printable": "anonymous_258"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "index elements attribute",
    "valueType": null
  },
  "IndexListArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:632"
    ],
    "!name": "IndexListArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "I64ArrayAttr",
      "kind": "def",
      "printable": "I64ArrayAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_303",
      "kind": "def",
      "printable": "anonymous_303"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "Array of 64-bit integer array attributes",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "IndexTensor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:708"
    ],
    "!name": "IndexTensor",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_93",
      "kind": "def",
      "printable": "anonymous_93"
    },
    "summary": "tensor of index values"
  },
  "Index_AddOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:47"
    ],
    "!name": "Index_AddOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.add` operation takes two index values and computes their sum.\n\n    Example:\n\n    ```mlir\n    // c = a + b\n    %c = index.add %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "add",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index addition",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_AndOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:392"
    ],
    "!name": "Index_AndOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.and` operation takes two index values and computes their bitwise\n    and.\n\n    Example:\n\n    ```mlir\n    // c = a & b\n    %c = index.and %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "and",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index bitwise and",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_BoolConstantOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:604"
    ],
    "!name": "Index_BoolConstantOp",
    "!superclasses": [
      "Op",
      "IndexOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "BoolAttr",
            "kind": "def",
            "printable": "BoolAttr"
          },
          "value"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins BoolAttr:$value)"
    },
    "assemblyFormat": "attr-dict $value",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.bool.constant` operation produces an bool-typed SSA value equal\n    to either `true` or `false`.\n\n    This operation is used to materialize bool constants that arise when folding\n    `index.cmp`.\n\n    Example:\n\n    ```mlir\n    %0 = index.bool.constant true\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "bool.constant",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "I1",
            "kind": "def",
            "printable": "I1"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs I1:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "boolean constant",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "ConstantLike",
        "kind": "def",
        "printable": "ConstantLike"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      },
      {
        "def": "anonymous_382",
        "kind": "def",
        "printable": "anonymous_382"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_CastSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:449"
    ],
    "!name": "Index_CastSOp",
    "!superclasses": [
      "Op",
      "IndexOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "anonymous_380",
            "kind": "def",
            "printable": "anonymous_380"
          },
          "input"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins anonymous_380:$input)"
    },
    "assemblyFormat": "$input attr-dict `:` type($input) `to` type($output)",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.casts` operation enables conversions between values of index type\n    and concrete fixed-width integer types. If casting to a wider integer, the\n    value is sign-extended. If casting to a narrower integer, the value is\n    truncated.\n\n    Example:\n\n    ```mlir\n    // Cast to i32\n    %0 = index.casts %a : index to i32\n\n    // Cast from i64\n    %1 = index.casts %b : i64 to index\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "casts",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "anonymous_380",
            "kind": "def",
            "printable": "anonymous_380"
          },
          "output"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs anonymous_380:$output)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index signed cast",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      },
      {
        "def": "anonymous_379",
        "kind": "def",
        "printable": "anonymous_379"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_CastUOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:479"
    ],
    "!name": "Index_CastUOp",
    "!superclasses": [
      "Op",
      "IndexOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "anonymous_380",
            "kind": "def",
            "printable": "anonymous_380"
          },
          "input"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins anonymous_380:$input)"
    },
    "assemblyFormat": "$input attr-dict `:` type($input) `to` type($output)",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.castu` operation enables conversions between values of index type\n    and concrete fixed-width integer types. If casting to a wider integer, the\n    value is zero-extended. If casting to a narrower integer, the value is\n    truncated.\n\n    Example:\n\n    ```mlir\n    // Cast to i32\n    %0 = index.castu %a : index to i32\n\n    // Cast from i64\n    %1 = index.castu %b : i64 to index\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "castu",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "anonymous_380",
            "kind": "def",
            "printable": "anonymous_380"
          },
          "output"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs anonymous_380:$output)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index unsigned cast",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      },
      {
        "def": "anonymous_379",
        "kind": "def",
        "printable": "anonymous_379"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_CeilDivSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:146"
    ],
    "!name": "Index_CeilDivSOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.ceildivs` operation takes two index values and computes their\n    signed quotient. Treats the leading bit as the sign and rounds towards\n    positive infinity, i.e. `7 / -2 = -3`.\n\n    Note: division by zero and signed division overflow are undefined behaviour.\n\n    Example:\n\n    ```mlir\n    // c = ceil(a / b)\n    %c = index.ceildivs %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "ceildivs",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index signed ceil division",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_CeilDivUOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:168"
    ],
    "!name": "Index_CeilDivUOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.ceildivu` operation takes two index values and computes their\n    unsigned quotient. Treats the leading bit as the most significant and rounds\n    towards positive infinity, i.e. `6 / -2 = 1`.\n\n    Note: division by zero is undefined behaviour.\n\n    Example:\n\n    ```mlir\n    // c = ceil(a / b)\n    %c = index.ceildivu %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "ceildivu",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index unsigned ceil division",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_CmpOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:509"
    ],
    "!name": "Index_CmpOp",
    "!superclasses": [
      "Op",
      "IndexOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "IndexCmpPredicateAttr",
            "kind": "def",
            "printable": "IndexCmpPredicateAttr"
          },
          "pred"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins IndexCmpPredicateAttr:$pred, Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "`` $pred `(` $lhs `,` $rhs `)` attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.cmp` operation takes two index values and compares them according\n    to the comparison predicate and returns an `i1`. The following comparisons\n    are supported:\n\n    -   `eq`:  equal\n    -   `ne`:  not equal\n    -   `slt`: signed less than\n    -   `sle`: signed less than or equal\n    -   `sgt`: signed greater than\n    -   `sge`: signed greater than or equal\n    -   `ult`: unsigned less than\n    -   `ule`: unsigned less than or equal\n    -   `ugt`: unsigned greater than\n    -   `uge`: unsigned greater than or equal\n\n    The result is `1` if the comparison is true and `0` otherwise.\n\n    Example:\n\n    ```mlir\n    // Signed less than comparison.\n    %0 = index.cmp slt(%a, %b)\n\n    // Unsigned greater than or equal comparison.\n    %1 = index.cmp uge(%a, %b)\n\n    // Not equal comparison.\n    %2 = index.cmp ne(%a, %b)\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 1,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "cmp",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "I1",
            "kind": "def",
            "printable": "I1"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs I1:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index compare",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_ConstantOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:576"
    ],
    "!name": "Index_ConstantOp",
    "!superclasses": [
      "Op",
      "IndexOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "IndexAttr",
            "kind": "def",
            "printable": "IndexAttr"
          },
          "value"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins IndexAttr:$value)"
    },
    "assemblyFormat": "attr-dict $value",
    "builders": [
      {
        "def": "anonymous_383",
        "kind": "def",
        "printable": "anonymous_383"
      }
    ],
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.constant` operation produces an index-typed SSA value equal to\n    some index-typed integer constant.\n\n    Example:\n\n    ```mlir\n    %0 = index.constant 42\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "constant",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index constant",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "ConstantLike",
        "kind": "def",
        "printable": "ConstantLike"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      },
      {
        "def": "anonymous_382",
        "kind": "def",
        "printable": "anonymous_382"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_DivSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:102"
    ],
    "!name": "Index_DivSOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.divs` operation takes two index values and computes their signed\n    quotient. Treats the leading bit as the sign and rounds towards zero, i.e.\n    `6 / -2 = -3`.\n\n    Note: division by zero and signed division overflow are undefined behaviour.\n\n    Example:\n\n    ```mlir\n    // c = a / b\n    %c = index.divs %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "divs",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index signed division",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_DivUOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:124"
    ],
    "!name": "Index_DivUOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.divu` operation takes two index values and computes their\n    unsigned quotient. Treats the leading bit as the most significant and rounds\n    towards zero, i.e. `6 / -2 = 0`.\n\n    Note: division by zero is undefined behaviour.\n\n    Example:\n\n    ```mlir\n    // c = a / b\n    %c = index.divu %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "divu",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index unsigned division",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_FloorDivSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:190"
    ],
    "!name": "Index_FloorDivSOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.floordivs` operation takes two index values and computes their\n    signed quotient. Treats the leading bit as the sign and rounds towards\n    negative infinity, i.e. `5 / -2 = -3`.\n\n    Note: division by zero and signed division overflow are undefined behaviour.\n\n    Example:\n\n    ```mlir\n    // c = floor(a / b)\n    %c = index.floordivs %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "floordivs",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index signed floor division",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_MaxSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:251"
    ],
    "!name": "Index_MaxSOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.maxs` operation takes two index values and computes their signed\n    maximum value. Treats the leading bit as the sign, i.e. `max(-2, 6) = 6`.\n\n    Example:\n\n    ```mlir\n    // c = max(a, b)\n    %c = index.maxs %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "maxs",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index signed maximum",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_MaxUOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:270"
    ],
    "!name": "Index_MaxUOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.maxu` operation takes two index values and computes their\n    unsigned maximum value. Treats the leading bit as the most significant, i.e.\n    `max(15, 6) = 15` or `max(-2, 6) = -2`.\n\n    Example:\n\n    ```mlir\n    // c = max(a, b)\n    %c = index.maxu %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "maxu",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index unsigned maximum",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_MinSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:290"
    ],
    "!name": "Index_MinSOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.mins` operation takes two index values and computes their signed\n    minimum value. Treats the leading bit as the sign, i.e. `min(-2, 6) = -2`.\n\n    Example:\n\n    ```mlir\n    // c = min(a, b)\n    %c = index.mins %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "mins",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index signed minimum",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_MinUOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:309"
    ],
    "!name": "Index_MinUOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.minu` operation takes two index values and computes their\n    unsigned minimum value. Treats the leading bit as the most significant, i.e.\n    `min(15, 6) = 6` or `min(-2, 6) = 6`.\n\n    Example:\n\n    ```mlir\n    // c = min(a, b)\n    %c = index.minu %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "minu",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index unsigned minimum",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_MulOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:84"
    ],
    "!name": "Index_MulOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.mul` operation takes two index values and computes their product.\n\n    Example:\n\n    ```mlir\n    // c = a * b\n    %c = index.mul %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "mul",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index multiplication",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_OrOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:411"
    ],
    "!name": "Index_OrOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.or` operation takes two index values and computes their bitwise\n    or.\n\n    Example:\n\n    ```mlir\n    // c = a | b\n    %c = index.or %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "or",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index bitwise or",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_RemSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:212"
    ],
    "!name": "Index_RemSOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.rems` operation takes two index values and computes their signed\n    remainder. Treats the leading bit as the sign, i.e. `6 % -2 = 0`.\n\n    Example:\n\n    ```mlir\n    // c = a % b\n    %c = index.rems %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "rems",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index signed remainder",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_RemUOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:231"
    ],
    "!name": "Index_RemUOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.remu` operation takes two index values and computes their\n    unsigned remainder. Treats the leading bit as the most significant, i.e.\n    `6 % -2 = 6`.\n\n    Example:\n\n    ```mlir\n    // c = a % b\n    %c = index.remu %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "remu",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index unsigned remainder",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_ShlOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:329"
    ],
    "!name": "Index_ShlOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.shl` operation shifts an index value to the left by a variable\n    amount. The low order bits are filled with zeroes. The RHS operand is always\n    treated as unsigned. If the RHS operand is equal to or greater than the\n    index bitwidth, the result is a poison value.\n\n    Example:\n\n    ```mlir\n    // c = a << b\n    %c = index.shl %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "shl",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index shift left",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_ShrSOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:350"
    ],
    "!name": "Index_ShrSOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.shrs` operation shifts an index value to the right by a variable\n    amount. The LHS operand is treated as signed. The high order bits are filled\n    with copies of the most significant bit. If the RHS operand is equal to or\n    greater than the index bitwidth, the result is a poison value.\n\n    Example:\n\n    ```mlir\n    // c = a >> b\n    %c = index.shrs %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "shrs",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "signed index shift right",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_ShrUOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:371"
    ],
    "!name": "Index_ShrUOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.shru` operation shifts an index value to the right by a variable\n    amount. The LHS operand is treated as unsigned. The high order bits are\n    filled with zeroes. If the RHS operand is equal to or greater than the index\n    bitwidth, the result is a poison value.\n\n    Example:\n\n    ```mlir\n    // c = a >> b\n    %c = index.shru %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "shru",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "unsigned index shift right",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_SizeOfOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:554"
    ],
    "!name": "Index_SizeOfOp",
    "!superclasses": [
      "Op",
      "IndexOp"
    ],
    "arguments": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins)"
    },
    "assemblyFormat": "attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.sizeof` operation produces an index-typed SSA value equal to the\n    size in bits of the `index` type. For example, on 32-bit systems, the result\n    is `32 : index`, and on 64-bit systems, the result is `64 : index`.\n\n    Example:\n\n    ```mlir\n    %0 = index.sizeof\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 0,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "sizeof",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "size in bits of the index type",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_SubOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:65"
    ],
    "!name": "Index_SubOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.sub` operation takes two index values and computes the difference\n    of the first from the second operand.\n\n    Example:\n\n    ```mlir\n    // c = a - b\n    %c = index.sub %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "sub",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index subtraction",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "Index_XOrOp": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "IndexOps.td:430"
    ],
    "!name": "Index_XOrOp",
    "!superclasses": [
      "Op",
      "IndexOp",
      "IndexBinaryOp"
    ],
    "arguments": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "lhs"
        ],
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins Index:$lhs, Index:$rhs)"
    },
    "assemblyFormat": "$lhs `,` $rhs attr-dict",
    "builders": null,
    "cppNamespace": "::mlir::index",
    "description": "\n    The `index.xor` operation takes two index values and computes their bitwise\n    xor.\n\n    Example:\n\n    ```mlir\n    // c = a ^ b\n    %c = index.xor %a, %b\n    ```\n  ",
    "extraClassDeclaration": null,
    "extraClassDefinition": null,
    "hasCanonicalizeMethod": 0,
    "hasCanonicalizer": 0,
    "hasCustomAssemblyFormat": 0,
    "hasFolder": 1,
    "hasRegionVerifier": 0,
    "hasVerifier": 0,
    "opDialect": {
      "def": "IndexDialect",
      "kind": "def",
      "printable": "IndexDialect"
    },
    "opDocGroup": null,
    "opName": "xor",
    "regions": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "region",
        "kind": "def",
        "printable": "region"
      },
      "printable": "(region)"
    },
    "results": {
      "args": [
        [
          {
            "def": "Index",
            "kind": "def",
            "printable": "Index"
          },
          "result"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "outs",
        "kind": "def",
        "printable": "outs"
      },
      "printable": "(outs Index:$result)"
    },
    "skipDefaultBuilders": 0,
    "successors": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "successor",
        "kind": "def",
        "printable": "successor"
      },
      "printable": "(successor)"
    },
    "summary": "index bitwise xor",
    "traits": [
      {
        "def": "anonymous_378",
        "kind": "def",
        "printable": "anonymous_378"
      },
      {
        "def": "Commutative",
        "kind": "def",
        "printable": "Commutative"
      },
      {
        "def": "Pure",
        "kind": "def",
        "printable": "Pure"
      }
    ],
    "useCustomPropertiesEncoding": 0
  },
  "InferIntRangeInterface": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferIntRangeInterface.td:18"
    ],
    "!name": "InferIntRangeInterface",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "InferIntRangeInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Allows operations to participate in range analysis for scalar integer values by\n    providing a methods that allows them to specify lower and upper bounds on their\n    result(s) given lower and upper bounds on their input(s) if known.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_354",
        "kind": "def",
        "printable": "anonymous_354"
      },
      {
        "def": "anonymous_355",
        "kind": "def",
        "printable": "anonymous_355"
      }
    ],
    "trait": "InferIntRangeInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "InferShapedTypeOpAdaptor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:263"
    ],
    "!name": "InferShapedTypeOpAdaptor",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferShapedTypeOpAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_365",
        "kind": "def",
        "printable": "anonymous_365"
      },
      {
        "def": "anonymous_364",
        "kind": "def",
        "printable": "anonymous_364"
      }
    ]
  },
  "InferShapedTypeOpAdaptorWithReify": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:265"
    ],
    "!name": "InferShapedTypeOpAdaptorWithReify",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferShapedTypeOpAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_366",
        "kind": "def",
        "printable": "anonymous_366"
      },
      {
        "def": "anonymous_364",
        "kind": "def",
        "printable": "anonymous_364"
      }
    ]
  },
  "InferShapedTypeOpInterface": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:126"
    ],
    "!name": "InferShapedTypeOpInterface",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "InferShapedTypeOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Interface to infer the components of a ShapedType returned by an operation\n    that could be used during op construction, verification or shape inference.\n\n    The components consists of element type, shape and raw attribute.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_359",
        "kind": "def",
        "printable": "anonymous_359"
      },
      {
        "def": "anonymous_360",
        "kind": "def",
        "printable": "anonymous_360"
      }
    ],
    "trait": "InferShapedTypeOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "InferTensorType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:302"
    ],
    "!name": "InferTensorType",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferTensorTypeBase"
    ],
    "traits": [
      {
        "def": "anonymous_361",
        "kind": "def",
        "printable": "anonymous_361"
      },
      {
        "def": "anonymous_365",
        "kind": "def",
        "printable": "anonymous_365"
      },
      {
        "def": "anonymous_367",
        "kind": "def",
        "printable": "anonymous_367"
      }
    ]
  },
  "InferTensorTypeAdaptor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:340"
    ],
    "!name": "InferTensorTypeAdaptor",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferTensorTypeAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_361",
        "kind": "def",
        "printable": "anonymous_361"
      },
      {
        "def": "anonymous_369",
        "kind": "def",
        "printable": "anonymous_369"
      },
      {
        "def": "anonymous_368",
        "kind": "def",
        "printable": "anonymous_368"
      }
    ]
  },
  "InferTensorTypeAdaptorWithReify": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:341"
    ],
    "!name": "InferTensorTypeAdaptorWithReify",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferTensorTypeAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_361",
        "kind": "def",
        "printable": "anonymous_361"
      },
      {
        "def": "anonymous_370",
        "kind": "def",
        "printable": "anonymous_370"
      },
      {
        "def": "anonymous_368",
        "kind": "def",
        "printable": "anonymous_368"
      }
    ]
  },
  "InferTensorTypeWithReify": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:303"
    ],
    "!name": "InferTensorTypeWithReify",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferTensorTypeBase"
    ],
    "traits": [
      {
        "def": "anonymous_361",
        "kind": "def",
        "printable": "anonymous_361"
      },
      {
        "def": "anonymous_366",
        "kind": "def",
        "printable": "anonymous_366"
      },
      {
        "def": "anonymous_367",
        "kind": "def",
        "printable": "anonymous_367"
      }
    ]
  },
  "InferTypeOpAdaptor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:225"
    ],
    "!name": "InferTypeOpAdaptor",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferTypeOpAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_361",
        "kind": "def",
        "printable": "anonymous_361"
      },
      {
        "def": "anonymous_362",
        "kind": "def",
        "printable": "anonymous_362"
      }
    ]
  },
  "InferTypeOpAdaptorWithIsCompatible": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:226"
    ],
    "!name": "InferTypeOpAdaptorWithIsCompatible",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferTypeOpAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_361",
        "kind": "def",
        "printable": "anonymous_361"
      },
      {
        "def": "anonymous_363",
        "kind": "def",
        "printable": "anonymous_363"
      }
    ]
  },
  "InferTypeOpInterface": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:23"
    ],
    "!name": "InferTypeOpInterface",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "InferTypeOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Interface to infer the return types for an operation that could be used\n    during op construction, verification or type inference.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_356",
        "kind": "def",
        "printable": "anonymous_356"
      },
      {
        "def": "anonymous_357",
        "kind": "def",
        "printable": "anonymous_357"
      },
      {
        "def": "anonymous_358",
        "kind": "def",
        "printable": "anonymous_358"
      }
    ],
    "trait": "InferTypeOpInterface::Trait",
    "verify": "\n    return detail::verifyInferredResultTypes($_op);\n  ",
    "verifyWithRegions": 1
  },
  "IntNonNegative": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:771"
    ],
    "!name": "IntNonNegative",
    "!superclasses": [
      "Constraint",
      "AttrConstraint"
    ],
    "predicate": {
      "def": "anonymous_318",
      "kind": "def",
      "printable": "anonymous_318"
    },
    "summary": "whose value is non-negative"
  },
  "IntPositive": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:775"
    ],
    "!name": "IntPositive",
    "!superclasses": [
      "Constraint",
      "AttrConstraint"
    ],
    "predicate": {
      "def": "anonymous_319",
      "kind": "def",
      "printable": "anonymous_319"
    },
    "summary": "whose value is positive"
  },
  "Involution": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:79"
    ],
    "!name": "Involution",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "IsInvolution"
  },
  "IsBaseMemRefTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:79"
    ],
    "!name": "IsBaseMemRefTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::BaseMemRefType>($_self))"
  },
  "IsFixedVectorTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:33"
    ],
    "!name": "IsFixedVectorTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::VectorType>($_self) &&\n                                  !::llvm::cast<VectorType>($_self).isScalable())"
  },
  "IsMemRefTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:64"
    ],
    "!name": "IsMemRefTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::MemRefType>($_self))"
  },
  "IsNullAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:862"
    ],
    "!name": "IsNullAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint"
    ],
    "predicate": {
      "def": "anonymous_320",
      "kind": "def",
      "printable": "anonymous_320"
    },
    "summary": "empty attribute (for optional attributes)"
  },
  "IsRankedTensorTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:75"
    ],
    "!name": "IsRankedTensorTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::RankedTensorType>($_self))"
  },
  "IsShapedTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:83"
    ],
    "!name": "IsShapedTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::ShapedType>($_self))"
  },
  "IsTensorTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:61"
    ],
    "!name": "IsTensorTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::TensorType>($_self))"
  },
  "IsTupleTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:90"
    ],
    "!name": "IsTupleTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::TupleType>($_self))"
  },
  "IsUnrankedMemRefTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:67"
    ],
    "!name": "IsUnrankedMemRefTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::UnrankedMemRefType>($_self))"
  },
  "IsUnrankedTensorTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:71"
    ],
    "!name": "IsUnrankedTensorTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::UnrankedTensorType>($_self))"
  },
  "IsVectorOfAnyRankTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:30"
    ],
    "!name": "IsVectorOfAnyRankTypePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::VectorType>($_self))"
  },
  "IsVectorTypePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:25"
    ],
    "!name": "IsVectorTypePred",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_0",
        "kind": "def",
        "printable": "anonymous_0"
      },
      {
        "def": "anonymous_1",
        "kind": "def",
        "printable": "anonymous_1"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "IsVectorTypeWithAllDimsScalablePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:55"
    ],
    "!name": "IsVectorTypeWithAllDimsScalablePred",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsVectorTypePred",
        "kind": "def",
        "printable": "IsVectorTypePred"
      },
      {
        "def": "anonymous_4",
        "kind": "def",
        "printable": "anonymous_4"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "IsVectorTypeWithAnyDimScalablePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:37"
    ],
    "!name": "IsVectorTypeWithAnyDimScalablePred",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::VectorType>($_self) &&\n                  ::llvm::cast<VectorType>($_self).isScalable())"
  },
  "IsVectorTypeWithOnlyTrailingDimScalablePred": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:47"
    ],
    "!name": "IsVectorTypeWithOnlyTrailingDimScalablePred",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_0",
        "kind": "def",
        "printable": "anonymous_0"
      },
      {
        "def": "anonymous_1",
        "kind": "def",
        "printable": "anonymous_1"
      },
      {
        "def": "anonymous_2",
        "kind": "def",
        "printable": "anonymous_2"
      },
      {
        "def": "anonymous_3",
        "kind": "def",
        "printable": "anonymous_3"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "IsolatedFromAbove": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:83"
    ],
    "!name": "IsolatedFromAbove",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "IsIsolatedFromAbove"
  },
  "LocationArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:589"
    ],
    "!name": "LocationArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "LocationAttr",
      "kind": "def",
      "printable": "LocationAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_276",
      "kind": "def",
      "printable": "anonymous_276"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "location array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "LocationAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:184"
    ],
    "!name": "LocationAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_191",
      "kind": "def",
      "printable": "anonymous_191"
    },
    "returnType": null,
    "storageType": null,
    "summary": "location attribute",
    "valueType": null
  },
  "MemAlloc": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:55"
    ],
    "!name": "MemAlloc",
    "!superclasses": [
      "OpVariableDecorator",
      "SideEffect",
      "MemoryEffect",
      "MemAlloc"
    ],
    "baseEffectName": "::mlir::MemoryEffects::Effect",
    "cppNamespace": "::mlir",
    "effect": "::mlir::MemoryEffects::Allocate",
    "effectOnFullRegion": 0,
    "interfaceTrait": "MemoryEffectOpInterface::Trait",
    "resource": "::mlir::SideEffects::DefaultResource",
    "stage": 0
  },
  "MemFree": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:65"
    ],
    "!name": "MemFree",
    "!superclasses": [
      "OpVariableDecorator",
      "SideEffect",
      "MemoryEffect",
      "MemFree"
    ],
    "baseEffectName": "::mlir::MemoryEffects::Effect",
    "cppNamespace": "::mlir",
    "effect": "::mlir::MemoryEffects::Free",
    "effectOnFullRegion": 0,
    "interfaceTrait": "MemoryEffectOpInterface::Trait",
    "resource": "::mlir::SideEffects::DefaultResource",
    "stage": 0
  },
  "MemRead": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:75"
    ],
    "!name": "MemRead",
    "!superclasses": [
      "OpVariableDecorator",
      "SideEffect",
      "MemoryEffect",
      "MemRead"
    ],
    "baseEffectName": "::mlir::MemoryEffects::Effect",
    "cppNamespace": "::mlir",
    "effect": "::mlir::MemoryEffects::Read",
    "effectOnFullRegion": 0,
    "interfaceTrait": "MemoryEffectOpInterface::Trait",
    "resource": "::mlir::SideEffects::DefaultResource",
    "stage": 0
  },
  "MemRefsNormalizable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:103"
    ],
    "!name": "MemRefsNormalizable",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "MemRefsNormalizable"
  },
  "MemWrite": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:85"
    ],
    "!name": "MemWrite",
    "!superclasses": [
      "OpVariableDecorator",
      "SideEffect",
      "MemoryEffect",
      "MemWrite"
    ],
    "baseEffectName": "::mlir::MemoryEffects::Effect",
    "cppNamespace": "::mlir",
    "effect": "::mlir::MemoryEffects::Write",
    "effectOnFullRegion": 0,
    "interfaceTrait": "MemoryEffectOpInterface::Trait",
    "resource": "::mlir::SideEffects::DefaultResource",
    "stage": 0
  },
  "MemoryEffectsOpInterface": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:26"
    ],
    "!name": "MemoryEffectsOpInterface",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface",
      "EffectOpInterfaceBase"
    ],
    "baseEffectName": "::mlir::MemoryEffects::Effect",
    "baseInterfaces": [],
    "cppInterfaceName": "MemoryEffectOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    An interface used to query information about the memory effects applied by\n    an operation.\n  ",
    "extraClassDeclaration": "\n    /// Collect all of the effect instances that correspond to the given\n    /// `Effect` and place them in 'effects'.\n    template <typename Effect> void getEffects(\n      ::llvm::SmallVectorImpl<::mlir::SideEffects::EffectInstance<\n                                              ::mlir::MemoryEffects::Effect>> &effects) {\n      getEffects(effects);\n      ::llvm::erase_if(effects, [&](auto &it) {\n        return !::llvm::isa<Effect>(it.getEffect());\n      });\n    }\n\n    /// Returns true if this operation exhibits the given effect.\n    template <typename Effect> bool hasEffect() {\n      ::llvm::SmallVector<::mlir::SideEffects::EffectInstance<\n                                            ::mlir::MemoryEffects::Effect>, 4> effects;\n      getEffects(effects);\n      return ::llvm::any_of(effects, [](const auto &it) {\n        return ::llvm::isa<Effect>(it.getEffect());\n      });\n    }\n\n    /// Returns true if this operation only has the given effect.\n    template <typename Effect> bool onlyHasEffect() {\n      ::llvm::SmallVector<::mlir::SideEffects::EffectInstance<\n                                            ::mlir::MemoryEffects::Effect>, 4> effects;\n      getEffects(effects);\n      return !effects.empty() && ::llvm::all_of(effects, [](const auto &it) {\n        return ::llvm::isa<Effect>(it.getEffect());\n      });\n    }\n\n    /// Returns true if this operation has no effects.\n    bool hasNoEffect() {\n      ::llvm::SmallVector<::mlir::SideEffects::EffectInstance<\n                                            ::mlir::MemoryEffects::Effect>, 4> effects;\n      getEffects(effects);\n      return effects.empty();\n    }\n\n    /// Collect all of the effect instances that operate on the provided value\n    /// and place them in 'effects'.\n    void getEffectsOnValue(::mlir::Value value,\n              ::llvm::SmallVectorImpl<::mlir::SideEffects::EffectInstance<\n              ::mlir::MemoryEffects::Effect>> & effects) {\n      getEffects(effects);\n      ::llvm::erase_if(effects, [&](auto &it) { return it.getValue() != value; });\n    }\n\n    /// Return the effect of the given type `Effect` that is applied to the\n    /// given value, or std::nullopt if no effect exists.\n    template <typename Effect>\n    ::std::optional<::mlir::SideEffects::EffectInstance<::mlir::MemoryEffects::Effect>>\n    getEffectOnValue(::mlir::Value value) {\n      ::llvm::SmallVector<::mlir::SideEffects::EffectInstance<\n              ::mlir::MemoryEffects::Effect>, 4> effects;\n      getEffects(effects);\n      auto it = ::llvm::find_if(effects, [&](auto &it) {\n        return ::llvm::isa<Effect>(it.getEffect()) && it.getValue() == value;\n      });\n      if (it == effects.end())\n        return std::nullopt;\n      return *it;\n    }\n\n    /// Collect all of the effect instances that operate on the provided symbol\n    /// reference and place them in 'effects'.\n    void getEffectsOnSymbol(::mlir::SymbolRefAttr value,\n              ::llvm::SmallVectorImpl<::mlir::SideEffects::EffectInstance<\n              ::mlir::MemoryEffects::Effect>> & effects) {\n      getEffects(effects);\n      ::llvm::erase_if(effects, [&](auto &it) {\n        return it.getSymbolRef() != value;\n      });\n    }\n\n    /// Collect all of the effect instances that operate on the provided\n    /// resource and place them in 'effects'.\n    void getEffectsOnResource(::mlir::SideEffects::Resource *resource,\n              ::llvm::SmallVectorImpl<::mlir::SideEffects::EffectInstance<\n              ::mlir::MemoryEffects::Effect>> & effects) {\n      getEffects(effects);\n      ::llvm::erase_if(effects, [&](auto &it) {\n        return it.getResource() != resource;\n      });\n    }\n  ",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_372",
        "kind": "def",
        "printable": "anonymous_372"
      }
    ],
    "trait": "MemoryEffectOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "NoMemoryEffect": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:94"
    ],
    "!name": "NoMemoryEffect",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "SideEffectsTraitBase",
      "MemoryEffects"
    ],
    "baseEffectName": "::mlir::MemoryEffects::Effect",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "effects": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraTraitClassDeclaration": "",
    "trait": "MemoryEffectOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "NoRegionArguments": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:179"
    ],
    "!name": "NoRegionArguments",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait",
      "StructuralOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "NoRegionArguments"
  },
  "NoTerminator": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:134"
    ],
    "!name": "NoTerminator",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait",
      "StructuralOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "NoTerminator"
  },
  "NoneType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:169"
    ],
    "!name": "NoneType",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getType<::mlir::NoneType>()",
    "cppFunctionName": "",
    "cppType": "::mlir::NoneType",
    "description": "",
    "predicate": {
      "def": "anonymous_6",
      "kind": "def",
      "printable": "anonymous_6"
    },
    "summary": "none type"
  },
  "OpAsmOpInterface": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpAsmInterface.td:24"
    ],
    "!name": "OpAsmOpInterface",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "OpAsmOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    This interface provides hooks to interact with the AsmPrinter and AsmParser\n    classes.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_374",
        "kind": "def",
        "printable": "anonymous_374"
      },
      {
        "def": "anonymous_375",
        "kind": "def",
        "printable": "anonymous_375"
      },
      {
        "def": "anonymous_376",
        "kind": "def",
        "printable": "anonymous_376"
      },
      {
        "def": "anonymous_377",
        "kind": "def",
        "printable": "anonymous_377"
      }
    ],
    "trait": "OpAsmOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "PartialEffect": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaceBase.td:158"
    ],
    "!name": "PartialEffect",
    "!superclasses": [
      "EffectRange"
    ],
    "Value": [
      0
    ]
  },
  "PredCombinerAnd": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Constraints.td:70"
    ],
    "!name": "PredCombinerAnd",
    "!superclasses": [
      "PredCombinerKind"
    ]
  },
  "PredCombinerConcat": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Constraints.td:74"
    ],
    "!name": "PredCombinerConcat",
    "!superclasses": [
      "PredCombinerKind"
    ]
  },
  "PredCombinerNot": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Constraints.td:72"
    ],
    "!name": "PredCombinerNot",
    "!superclasses": [
      "PredCombinerKind"
    ]
  },
  "PredCombinerOr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Constraints.td:71"
    ],
    "!name": "PredCombinerOr",
    "!superclasses": [
      "PredCombinerKind"
    ]
  },
  "PredCombinerSubstLeaves": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Constraints.td:73"
    ],
    "!name": "PredCombinerSubstLeaves",
    "!superclasses": [
      "PredCombinerKind"
    ]
  },
  "Pure": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:146"
    ],
    "!name": "Pure",
    "!superclasses": [
      "Trait",
      "TraitList"
    ],
    "traits": [
      {
        "def": "AlwaysSpeculatable",
        "kind": "def",
        "printable": "AlwaysSpeculatable"
      },
      {
        "def": "NoMemoryEffect",
        "kind": "def",
        "printable": "NoMemoryEffect"
      }
    ]
  },
  "RecursiveMemoryEffects": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:97"
    ],
    "!name": "RecursiveMemoryEffects",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "HasRecursiveMemoryEffects"
  },
  "RecursivelySpeculatable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:141"
    ],
    "!name": "RecursivelySpeculatable",
    "!superclasses": [
      "Trait",
      "TraitList"
    ],
    "traits": [
      {
        "def": "ConditionallySpeculatable",
        "kind": "def",
        "printable": "ConditionallySpeculatable"
      },
      {
        "def": "RecursivelySpeculatableImplTrait",
        "kind": "def",
        "printable": "RecursivelySpeculatableImplTrait"
      }
    ]
  },
  "RecursivelySpeculatableImplTrait": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "SideEffectInterfaces.td:105"
    ],
    "!name": "RecursivelySpeculatableImplTrait",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "RecursivelySpeculatableImplTrait"
  },
  "ReifyRankedShapedTypeOpInterface": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:344"
    ],
    "!name": "ReifyRankedShapedTypeOpInterface",
    "!superclasses": [
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "ReifyRankedShapedTypeOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Interface to compute the shape of the result of an operation when\n    the result is a ranked shape type, i.e. `RankedTensorType` or\n    `MemRefType`.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_371",
        "kind": "def",
        "printable": "anonymous_371"
      }
    ],
    "trait": "ReifyRankedShapedTypeOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "ResultsAreFloatLike": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:85"
    ],
    "!name": "ResultsAreFloatLike",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "ResultsAreFloatLike"
  },
  "ResultsBroadcastableShape": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:70"
    ],
    "!name": "ResultsBroadcastableShape",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "ResultsBroadcastableShape"
  },
  "SI1": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:270"
    ],
    "!name": "SI1",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "SI"
    ],
    "bitwidth": 1,
    "builderCall": "$_builder.getIntegerType(1, /*isSigned=*/true)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_21",
      "kind": "def",
      "printable": "anonymous_21"
    },
    "summary": "1-bit signed integer"
  },
  "SI16": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:272"
    ],
    "!name": "SI16",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "SI"
    ],
    "bitwidth": 16,
    "builderCall": "$_builder.getIntegerType(16, /*isSigned=*/true)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_23",
      "kind": "def",
      "printable": "anonymous_23"
    },
    "summary": "16-bit signed integer"
  },
  "SI16Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:280"
    ],
    "!name": "SI16Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignedIntegerAttrBase",
      "TypedSignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(16, /*isSigned=*/true), $0)",
    "convertFromStorage": "$_self.getValue().getSExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_221",
      "kind": "def",
      "printable": "anonymous_221"
    },
    "returnType": "int16_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "16-bit signed integer attribute",
    "valueType": {
      "def": "SI16",
      "kind": "def",
      "printable": "SI16"
    }
  },
  "SI1Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:276"
    ],
    "!name": "SI1Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignedIntegerAttrBase",
      "TypedSignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(1, /*isSigned=*/true), $0)",
    "convertFromStorage": "$_self.getValue().getSExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_217",
      "kind": "def",
      "printable": "anonymous_217"
    },
    "returnType": "bool",
    "storageType": "::mlir::IntegerAttr",
    "summary": "1-bit signed integer attribute",
    "valueType": {
      "def": "SI1",
      "kind": "def",
      "printable": "SI1"
    }
  },
  "SI32": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:273"
    ],
    "!name": "SI32",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "SI"
    ],
    "bitwidth": 32,
    "builderCall": "$_builder.getIntegerType(32, /*isSigned=*/true)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_24",
      "kind": "def",
      "printable": "anonymous_24"
    },
    "summary": "32-bit signed integer"
  },
  "SI32Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:282"
    ],
    "!name": "SI32Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignedIntegerAttrBase",
      "TypedSignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32, /*isSigned=*/true), $0)",
    "convertFromStorage": "$_self.getValue().getSExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_223",
      "kind": "def",
      "printable": "anonymous_223"
    },
    "returnType": "int32_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "32-bit signed integer attribute",
    "valueType": {
      "def": "SI32",
      "kind": "def",
      "printable": "SI32"
    }
  },
  "SI64": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:274"
    ],
    "!name": "SI64",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "SI"
    ],
    "bitwidth": 64,
    "builderCall": "$_builder.getIntegerType(64, /*isSigned=*/true)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_25",
      "kind": "def",
      "printable": "anonymous_25"
    },
    "summary": "64-bit signed integer"
  },
  "SI64Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:284"
    ],
    "!name": "SI64Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignedIntegerAttrBase",
      "TypedSignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(64, /*isSigned=*/true), $0)",
    "convertFromStorage": "$_self.getValue().getSExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_225",
      "kind": "def",
      "printable": "anonymous_225"
    },
    "returnType": "int64_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "64-bit signed integer attribute",
    "valueType": {
      "def": "SI64",
      "kind": "def",
      "printable": "SI64"
    }
  },
  "SI8": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:271"
    ],
    "!name": "SI8",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "SI"
    ],
    "bitwidth": 8,
    "builderCall": "$_builder.getIntegerType(8, /*isSigned=*/true)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_22",
      "kind": "def",
      "printable": "anonymous_22"
    },
    "summary": "8-bit signed integer"
  },
  "SI8Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:278"
    ],
    "!name": "SI8Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignedIntegerAttrBase",
      "TypedSignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(8, /*isSigned=*/true), $0)",
    "convertFromStorage": "$_self.getValue().getSExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_219",
      "kind": "def",
      "printable": "anonymous_219"
    },
    "returnType": "int8_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "8-bit signed integer attribute",
    "valueType": {
      "def": "SI8",
      "kind": "def",
      "printable": "SI8"
    }
  },
  "SameOperandsAndResultElementType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:97"
    ],
    "!name": "SameOperandsAndResultElementType",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SameOperandsAndResultElementType"
  },
  "SameOperandsAndResultRank": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:380"
    ],
    "!name": "SameOperandsAndResultRank",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SameOperandsAndResultRank"
  },
  "SameOperandsAndResultShape": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:91"
    ],
    "!name": "SameOperandsAndResultShape",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SameOperandsAndResultShape"
  },
  "SameOperandsAndResultType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:377"
    ],
    "!name": "SameOperandsAndResultType",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SameOperandsAndResultType"
  },
  "SameOperandsElementType": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:94"
    ],
    "!name": "SameOperandsElementType",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SameOperandsElementType"
  },
  "SameOperandsShape": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:89"
    ],
    "!name": "SameOperandsShape",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SameOperandsShape"
  },
  "SameTypeOperands": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:87"
    ],
    "!name": "SameTypeOperands",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SameTypeOperands"
  },
  "SameVariadicOperandSize": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:157"
    ],
    "!name": "SameVariadicOperandSize",
    "!superclasses": [
      "Trait",
      "GenInternalTrait",
      "GenInternalOpTrait"
    ],
    "dependentTraits": [],
    "trait": "::mlir::OpTrait::SameVariadicOperandSize"
  },
  "SameVariadicResultSize": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:162"
    ],
    "!name": "SameVariadicResultSize",
    "!superclasses": [
      "Trait",
      "GenInternalTrait",
      "GenInternalOpTrait"
    ],
    "dependentTraits": [],
    "trait": "::mlir::OpTrait::SameVariadicResultSize"
  },
  "Scalarizable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:107"
    ],
    "!name": "Scalarizable",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [
      {
        "def": "Elementwise",
        "kind": "def",
        "printable": "Elementwise"
      }
    ],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "Scalarizable"
  },
  "SignlessIntegerLike": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:902"
    ],
    "!name": "SignlessIntegerLike",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "TypeOrValueSemanticsContainer"
    ],
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "predicate": {
      "def": "anonymous_177",
      "kind": "def",
      "printable": "anonymous_177"
    },
    "summary": "signless-integer-like"
  },
  "SignlessIntegerLikeOfAnyRank": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:905"
    ],
    "!name": "SignlessIntegerLikeOfAnyRank",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "TypeOrContainerOfAnyRank"
    ],
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "predicate": {
      "def": "anonymous_182",
      "kind": "def",
      "printable": "anonymous_182"
    },
    "summary": "signless-integer-like"
  },
  "SignlessIntegerOrFloatLike": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:913"
    ],
    "!name": "SignlessIntegerOrFloatLike",
    "!superclasses": [
      "Constraint",
      "TypeConstraint"
    ],
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "predicate": {
      "def": "anonymous_190",
      "kind": "def",
      "printable": "anonymous_190"
    },
    "summary": "signless-integer-like or floating-point-like"
  },
  "SingleBlock": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:123"
    ],
    "!name": "SingleBlock",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait",
      "StructuralOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "SingleBlock"
  },
  "StrArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:626"
    ],
    "!name": "StrArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getStrArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "StrAttr",
      "kind": "def",
      "printable": "StrAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_297",
      "kind": "def",
      "printable": "anonymous_297"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "string array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "StrAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:337"
    ],
    "!name": "StrAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "StringBasedAttr"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getStringAttr($0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_241",
      "kind": "def",
      "printable": "anonymous_241"
    },
    "returnType": " ::llvm::StringRef ",
    "storageType": " ::mlir::StringAttr ",
    "summary": "string attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "StringElementsAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:542"
    ],
    "!name": "StringElementsAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_271",
      "kind": "def",
      "printable": "anonymous_271"
    },
    "returnType": " ::mlir::DenseElementsAttr ",
    "storageType": " ::mlir::DenseElementsAttr ",
    "summary": "string elements attribute",
    "valueType": null
  },
  "StringProperty": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Properties.td:241"
    ],
    "!name": "StringProperty",
    "!superclasses": [
      "Property"
    ],
    "assignToStorage": "$_storage = $_value.str()",
    "baseProperty": null,
    "convertFromAttribute": "\n    return convertFromAttribute($_storage, $_attr, $_diag);\n  ",
    "convertFromStorage": "::llvm::StringRef{$_storage}",
    "convertToAttribute": "\n    return convertToAttribute($_ctxt, $_storage);\n  ",
    "defaultValue": "",
    "description": "",
    "hashProperty": "",
    "interfaceType": "::llvm::StringRef",
    "optionalParser": "\n    if (::mlir::failed($_parser.parseOptionalString(&$_storage)))\n      return std::nullopt;\n  ",
    "parser": "\n    auto value = ::mlir::FieldParser<std::string>::parse($_parser);\n    if (::mlir::failed(value))\n      return ::mlir::failure();\n    $_storage = std::move(*value);\n  ",
    "printer": "$_printer.printString($_storage)",
    "readFromMlirBytecode": "\n    StringRef val;\n    if (::mlir::failed($_reader.readString(val)))\n      return ::mlir::failure();\n    $_storage = val.str();\n  ",
    "storageType": "std::string",
    "storageTypeValueOverride": "",
    "summary": "string",
    "writeToMlirBytecode": "\n    $_writer.writeOwnedString($_storage);\n  "
  },
  "SymbolNameAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:341"
    ],
    "!name": "SymbolNameAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "StringBasedAttr"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getStringAttr($0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_241",
      "kind": "def",
      "printable": "anonymous_241"
    },
    "returnType": " ::llvm::StringRef ",
    "storageType": " ::mlir::StringAttr ",
    "summary": "string attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "SymbolRefArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:658"
    ],
    "!name": "SymbolRefArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": null,
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "SymbolRefAttr",
      "kind": "def",
      "printable": "SymbolRefAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_311",
      "kind": "def",
      "printable": "anonymous_311"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "symbol ref array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "SymbolRefAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:638"
    ],
    "!name": "SymbolRefAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::mlir::SymbolRefAttr::get($_builder.getContext(), $0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_307",
      "kind": "def",
      "printable": "anonymous_307"
    },
    "returnType": " ::mlir::SymbolRefAttr ",
    "storageType": " ::mlir::SymbolRefAttr ",
    "summary": "symbol reference attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "TF32": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:334"
    ],
    "!name": "TF32",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType"
    ],
    "builderCall": "$_builder.getTF32Type()",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_41",
      "kind": "def",
      "printable": "anonymous_41"
    },
    "summary": "tf32 type"
  },
  "Tensorizable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:111"
    ],
    "!name": "Tensorizable",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [
      {
        "def": "Elementwise",
        "kind": "def",
        "printable": "Elementwise"
      }
    ],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "Tensorizable"
  },
  "Terminator": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:100"
    ],
    "!name": "Terminator",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "IsTerminator"
  },
  "TypeArrayAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:629"
    ],
    "!name": "TypeArrayAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ArrayAttrBase",
      "TypedArrayAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getTypeArrayAttr($0)",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "elementAttr": {
      "def": "TypeAttr",
      "kind": "def",
      "printable": "TypeAttr"
    },
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_300",
      "kind": "def",
      "printable": "anonymous_300"
    },
    "returnType": " ::mlir::ArrayAttr ",
    "storageType": " ::mlir::ArrayAttr ",
    "summary": "type array attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "TypeAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:368"
    ],
    "!name": "TypeAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypeAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "::mlir::TypeAttr::get($0)",
    "convertFromStorage": "::llvm::cast<::mlir::Type>($_self.getValue())",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_245",
      "kind": "def",
      "printable": "anonymous_245"
    },
    "returnType": "::mlir::Type",
    "storageType": " ::mlir::TypeAttr ",
    "summary": "any type attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "UI1": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:293"
    ],
    "!name": "UI1",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "UI"
    ],
    "bitwidth": 1,
    "builderCall": "$_builder.getIntegerType(1, /*isSigned=*/false)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_27",
      "kind": "def",
      "printable": "anonymous_27"
    },
    "summary": "1-bit unsigned integer"
  },
  "UI16": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:295"
    ],
    "!name": "UI16",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "UI"
    ],
    "bitwidth": 16,
    "builderCall": "$_builder.getIntegerType(16, /*isSigned=*/false)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_29",
      "kind": "def",
      "printable": "anonymous_29"
    },
    "summary": "16-bit unsigned integer"
  },
  "UI16Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:309"
    ],
    "!name": "UI16Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "UnsignedIntegerAttrBase",
      "TypedUnsignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(16, /*isSigned=*/false), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_231",
      "kind": "def",
      "printable": "anonymous_231"
    },
    "returnType": "uint16_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "16-bit unsigned integer attribute",
    "valueType": {
      "def": "UI16",
      "kind": "def",
      "printable": "UI16"
    }
  },
  "UI1Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:305"
    ],
    "!name": "UI1Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "UnsignedIntegerAttrBase",
      "TypedUnsignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(1, /*isSigned=*/false), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_227",
      "kind": "def",
      "printable": "anonymous_227"
    },
    "returnType": "bool",
    "storageType": "::mlir::IntegerAttr",
    "summary": "1-bit unsigned integer attribute",
    "valueType": {
      "def": "UI1",
      "kind": "def",
      "printable": "UI1"
    }
  },
  "UI32": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:296"
    ],
    "!name": "UI32",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "UI"
    ],
    "bitwidth": 32,
    "builderCall": "$_builder.getIntegerType(32, /*isSigned=*/false)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_30",
      "kind": "def",
      "printable": "anonymous_30"
    },
    "summary": "32-bit unsigned integer"
  },
  "UI32Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:311"
    ],
    "!name": "UI32Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "UnsignedIntegerAttrBase",
      "TypedUnsignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32, /*isSigned=*/false), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_233",
      "kind": "def",
      "printable": "anonymous_233"
    },
    "returnType": "uint32_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "32-bit unsigned integer attribute",
    "valueType": {
      "def": "UI32",
      "kind": "def",
      "printable": "UI32"
    }
  },
  "UI64": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:297"
    ],
    "!name": "UI64",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "UI"
    ],
    "bitwidth": 64,
    "builderCall": "$_builder.getIntegerType(64, /*isSigned=*/false)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_31",
      "kind": "def",
      "printable": "anonymous_31"
    },
    "summary": "64-bit unsigned integer"
  },
  "UI64Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:313"
    ],
    "!name": "UI64Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "UnsignedIntegerAttrBase",
      "TypedUnsignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(64, /*isSigned=*/false), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_235",
      "kind": "def",
      "printable": "anonymous_235"
    },
    "returnType": "uint64_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "64-bit unsigned integer attribute",
    "valueType": {
      "def": "UI64",
      "kind": "def",
      "printable": "UI64"
    }
  },
  "UI8": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:294"
    ],
    "!name": "UI8",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "BuildableType",
      "UI"
    ],
    "bitwidth": 8,
    "builderCall": "$_builder.getIntegerType(8, /*isSigned=*/false)",
    "cppFunctionName": "",
    "cppType": "::mlir::IntegerType",
    "description": "",
    "predicate": {
      "def": "anonymous_28",
      "kind": "def",
      "printable": "anonymous_28"
    },
    "summary": "8-bit unsigned integer"
  },
  "UI8Attr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:307"
    ],
    "!name": "UI8Attr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "UnsignedIntegerAttrBase",
      "TypedUnsignedIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(8, /*isSigned=*/false), $0)",
    "convertFromStorage": "$_self.getValue().getZExtValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_229",
      "kind": "def",
      "printable": "anonymous_229"
    },
    "returnType": "uint8_t",
    "storageType": "::mlir::IntegerAttr",
    "summary": "8-bit unsigned integer attribute",
    "valueType": {
      "def": "UI8",
      "kind": "def",
      "printable": "UI8"
    }
  },
  "UnitAttr": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:381"
    ],
    "!name": "UnitAttr",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr"
    ],
    "baseAttr": null,
    "constBuilderCall": "(($0) ? $_builder.getUnitAttr() : nullptr)",
    "convertFromStorage": "$_self != nullptr",
    "cppNamespace": "",
    "defaultValue": "false",
    "description": "",
    "isOptional": 1,
    "predicate": {
      "def": "anonymous_246",
      "kind": "def",
      "printable": "anonymous_246"
    },
    "returnType": "bool",
    "storageType": " ::mlir::UnitAttr ",
    "summary": "unit attribute",
    "valueType": {
      "def": "NoneType",
      "kind": "def",
      "printable": "NoneType"
    }
  },
  "UnitProperty": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Properties.td:271"
    ],
    "!name": "UnitProperty",
    "!superclasses": [
      "Property"
    ],
    "assignToStorage": "$_storage = $_value",
    "baseProperty": null,
    "convertFromAttribute": "\n    if (::llvm::isa<::mlir::UnitAttr>($_attr)) {\n      $_storage = true;\n      return ::mlir::success();\n    }\n    if (auto boolAttr = ::llvm::dyn_cast<::mlir::BoolAttr>($_attr)) {\n      $_storage = boolAttr.getValue();\n      return ::mlir::success();\n    }\n    return ::mlir::failure();\n  ",
    "convertFromStorage": "$_storage",
    "convertToAttribute": "\n    if ($_storage)\n      return ::mlir::UnitAttr::get($_ctxt);\n    else\n      return ::mlir::BoolAttr::get($_ctxt, false);\n  ",
    "defaultValue": "false",
    "description": "\n    A property whose presence or abscence is used as a flag.\n\n    This is stored as a boolean that defaults to false, and is named UnitProperty\n    by analogy with UnitAttr, which has the more comprehensive rationale and\n    explains the less typical syntax.\n\n    Note that this attribute does have a syntax for the false case to allow for its\n    use in contexts where default values shouldn't be elided.\n  ",
    "hashProperty": "",
    "interfaceType": "bool",
    "optionalParser": "\n    ::llvm::StringRef keyword;\n    if (::mlir::failed($_parser.parseOptionalKeyword(&keyword,\n        {\"unit\", \"unit_absent\"})))\n      return std::nullopt;\n    $_storage = (keyword == \"unit\");\n  ",
    "parser": "\n    ::llvm::StringRef keyword;\n    if (::mlir::failed($_parser.parseOptionalKeyword(&keyword,\n        {\"unit\", \"unit_absent\"})))\n      return $_parser.emitError($_parser.getCurrentLocation(),\n        \"expected 'unit' or 'unit_absent'\");\n    $_storage = (keyword == \"unit\");\n  ",
    "printer": "\n    $_printer << ($_storage ? \"unit\" : \"unit_absent\")\n  ",
    "readFromMlirBytecode": "\n    if (::mlir::failed($_reader.readBool($_storage)))\n      return ::mlir::failure();\n  ",
    "storageType": "bool",
    "storageTypeValueOverride": "",
    "summary": "unit property",
    "writeToMlirBytecode": "\n    $_writer.writeOwnedBool($_storage);\n  "
  },
  "Vectorizable": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:109"
    ],
    "!name": "Vectorizable",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [
      {
        "def": "Elementwise",
        "kind": "def",
        "printable": "Elementwise"
      }
    ],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "trait": "Vectorizable"
  },
  "anonymous_0": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_0",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::VectorType>($_self))"
  },
  "anonymous_1": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_1",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::VectorType>($_self).getRank() > 0)"
  },
  "anonymous_10": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_10",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isInteger(16))"
  },
  "anonymous_100": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_100",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_35",
        "kind": "def",
        "printable": "anonymous_35"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_101": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_101",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_100",
        "kind": "def",
        "printable": "anonymous_100"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_102": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_102",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_101",
        "kind": "def",
        "printable": "anonymous_101"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_103": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_103",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_102",
        "kind": "def",
        "printable": "anonymous_102"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_104": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_104",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "F32",
        "kind": "def",
        "printable": "F32"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_105",
      "kind": "def",
      "printable": "anonymous_105"
    },
    "summary": "32-bit float"
  },
  "anonymous_105": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_105",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_36",
        "kind": "def",
        "printable": "anonymous_36"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_106": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_106",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_105",
        "kind": "def",
        "printable": "anonymous_105"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_107": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_107",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_106",
        "kind": "def",
        "printable": "anonymous_106"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_108": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_108",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_107",
        "kind": "def",
        "printable": "anonymous_107"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_109": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_109",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "F64",
        "kind": "def",
        "printable": "F64"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_110",
      "kind": "def",
      "printable": "anonymous_110"
    },
    "summary": "64-bit float"
  },
  "anonymous_11": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_11",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isInteger(32))"
  },
  "anonymous_110": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_110",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_37",
        "kind": "def",
        "printable": "anonymous_37"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_111": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_111",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_110",
        "kind": "def",
        "printable": "anonymous_110"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_112": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_112",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_111",
        "kind": "def",
        "printable": "anonymous_111"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_113": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_113",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_112",
        "kind": "def",
        "printable": "anonymous_112"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_114": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:415"
    ],
    "!name": "anonymous_114",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And",
      "HasRankGreaterOrEqualPred"
    ],
    "children": [
      {
        "def": "HasRankPred",
        "kind": "def",
        "printable": "HasRankPred"
      },
      {
        "def": "anonymous_115",
        "kind": "def",
        "printable": "anonymous_115"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_115": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_115",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).getRank() >= 1)"
  },
  "anonymous_116": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_116",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsTensorTypePred",
        "kind": "def",
        "printable": "IsTensorTypePred"
      },
      {
        "def": "anonymous_114",
        "kind": "def",
        "printable": "anonymous_114"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_117": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_117",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsRankedTensorTypePred",
        "kind": "def",
        "printable": "IsRankedTensorTypePred"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_118": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_118",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_117",
        "kind": "def",
        "printable": "anonymous_117"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_119": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_119",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_116",
        "kind": "def",
        "printable": "anonymous_116"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_12": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_12",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isInteger(64))"
  },
  "anonymous_120": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_120",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsUnrankedTensorTypePred",
        "kind": "def",
        "printable": "IsUnrankedTensorTypePred"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_121": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_121",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_120",
        "kind": "def",
        "printable": "anonymous_120"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_122": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_122",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_121",
        "kind": "def",
        "printable": "anonymous_121"
      },
      {
        "def": "anonymous_119",
        "kind": "def",
        "printable": "anonymous_119"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_123": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:407"
    ],
    "!name": "anonymous_123",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And",
      "HasAnyRankOfPred"
    ],
    "children": [
      {
        "def": "HasRankPred",
        "kind": "def",
        "printable": "HasRankPred"
      },
      {
        "def": "anonymous_125",
        "kind": "def",
        "printable": "anonymous_125"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_124": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_124",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).getRank()\n                         == 0)"
  },
  "anonymous_125": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_125",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_124",
        "kind": "def",
        "printable": "anonymous_124"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_126": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_126",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsRankedTensorTypePred",
        "kind": "def",
        "printable": "IsRankedTensorTypePred"
      },
      {
        "def": "anonymous_123",
        "kind": "def",
        "printable": "anonymous_123"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_127": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:407"
    ],
    "!name": "anonymous_127",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And",
      "HasAnyRankOfPred"
    ],
    "children": [
      {
        "def": "HasRankPred",
        "kind": "def",
        "printable": "HasRankPred"
      },
      {
        "def": "anonymous_129",
        "kind": "def",
        "printable": "anonymous_129"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_128": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_128",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).getRank()\n                         == 1)"
  },
  "anonymous_129": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_129",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_128",
        "kind": "def",
        "printable": "anonymous_128"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_13": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_13",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessInteger())"
  },
  "anonymous_130": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_130",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsRankedTensorTypePred",
        "kind": "def",
        "printable": "IsRankedTensorTypePred"
      },
      {
        "def": "anonymous_127",
        "kind": "def",
        "printable": "anonymous_127"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_131": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:407"
    ],
    "!name": "anonymous_131",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And",
      "HasAnyRankOfPred"
    ],
    "children": [
      {
        "def": "HasRankPred",
        "kind": "def",
        "printable": "HasRankPred"
      },
      {
        "def": "anonymous_133",
        "kind": "def",
        "printable": "anonymous_133"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_132": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_132",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).getRank()\n                         == 2)"
  },
  "anonymous_133": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_133",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_132",
        "kind": "def",
        "printable": "anonymous_132"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_134": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_134",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsRankedTensorTypePred",
        "kind": "def",
        "printable": "IsRankedTensorTypePred"
      },
      {
        "def": "anonymous_131",
        "kind": "def",
        "printable": "anonymous_131"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_135": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:407"
    ],
    "!name": "anonymous_135",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And",
      "HasAnyRankOfPred"
    ],
    "children": [
      {
        "def": "HasRankPred",
        "kind": "def",
        "printable": "HasRankPred"
      },
      {
        "def": "anonymous_137",
        "kind": "def",
        "printable": "anonymous_137"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_136": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_136",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).getRank()\n                         == 3)"
  },
  "anonymous_137": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_137",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_136",
        "kind": "def",
        "printable": "anonymous_136"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_138": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_138",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsRankedTensorTypePred",
        "kind": "def",
        "printable": "IsRankedTensorTypePred"
      },
      {
        "def": "anonymous_135",
        "kind": "def",
        "printable": "anonymous_135"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_139": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:407"
    ],
    "!name": "anonymous_139",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And",
      "HasAnyRankOfPred"
    ],
    "children": [
      {
        "def": "HasRankPred",
        "kind": "def",
        "printable": "HasRankPred"
      },
      {
        "def": "anonymous_141",
        "kind": "def",
        "printable": "anonymous_141"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_14": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_14",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessInteger(1))"
  },
  "anonymous_140": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_140",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::ShapedType>($_self).getRank()\n                         == 4)"
  },
  "anonymous_141": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_141",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_140",
        "kind": "def",
        "printable": "anonymous_140"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_142": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_142",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsRankedTensorTypePred",
        "kind": "def",
        "printable": "IsRankedTensorTypePred"
      },
      {
        "def": "anonymous_139",
        "kind": "def",
        "printable": "anonymous_139"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_143": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_143",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsRankedTensorTypePred",
        "kind": "def",
        "printable": "IsRankedTensorTypePred"
      },
      {
        "def": "HasStaticShapePred",
        "kind": "def",
        "printable": "HasStaticShapePred"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_144": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_144",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_143",
        "kind": "def",
        "printable": "anonymous_143"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_145": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_145",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsUnrankedMemRefTypePred",
        "kind": "def",
        "printable": "IsUnrankedMemRefTypePred"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_146": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_146",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_147": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:757"
    ],
    "!name": "anonymous_147",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "MemRefOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::MemRefType",
    "description": "",
    "predicate": {
      "def": "anonymous_146",
      "kind": "def",
      "printable": "anonymous_146"
    },
    "summary": "memref of any type values"
  },
  "anonymous_148": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_148",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_146",
        "kind": "def",
        "printable": "anonymous_146"
      },
      {
        "def": "anonymous_114",
        "kind": "def",
        "printable": "anonymous_114"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_149": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_149",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsBaseMemRefTypePred",
        "kind": "def",
        "printable": "IsBaseMemRefTypePred"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_15": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_15",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessInteger(8))"
  },
  "anonymous_150": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_150",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_149",
        "kind": "def",
        "printable": "anonymous_149"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_151": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_151",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_145",
        "kind": "def",
        "printable": "anonymous_145"
      },
      {
        "def": "anonymous_148",
        "kind": "def",
        "printable": "anonymous_148"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_152": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_152",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_67",
        "kind": "def",
        "printable": "anonymous_67"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_153": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_153",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_72",
        "kind": "def",
        "printable": "anonymous_72"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_154": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_154",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_77",
        "kind": "def",
        "printable": "anonymous_77"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_155": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_155",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_82",
        "kind": "def",
        "printable": "anonymous_82"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_156": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_156",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_87",
        "kind": "def",
        "printable": "anonymous_87"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_157": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_157",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_97",
        "kind": "def",
        "printable": "anonymous_97"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_158": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_158",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_102",
        "kind": "def",
        "printable": "anonymous_102"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_159": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_159",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_107",
        "kind": "def",
        "printable": "anonymous_107"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_16": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_16",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessInteger(16))"
  },
  "anonymous_160": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_160",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsMemRefTypePred",
        "kind": "def",
        "printable": "IsMemRefTypePred"
      },
      {
        "def": "anonymous_112",
        "kind": "def",
        "printable": "anonymous_112"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_161": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_161",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_146",
        "kind": "def",
        "printable": "anonymous_146"
      },
      {
        "def": "HasStaticShapePred",
        "kind": "def",
        "printable": "HasStaticShapePred"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_162": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_162",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_146",
        "kind": "def",
        "printable": "anonymous_146"
      },
      {
        "def": "HasStridesPred",
        "kind": "def",
        "printable": "HasStridesPred"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_163": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:421"
    ],
    "!name": "anonymous_163",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "ValueSemanticsContainerOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_165",
      "kind": "def",
      "printable": "anonymous_165"
    },
    "summary": "container with value semantics of 1-bit signless integer values"
  },
  "anonymous_164": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_164",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "I1",
        "kind": "def",
        "printable": "I1"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_65",
      "kind": "def",
      "printable": "anonymous_65"
    },
    "summary": "1-bit signless integer"
  },
  "anonymous_165": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_165",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "HasValueSemanticsPred",
        "kind": "def",
        "printable": "HasValueSemanticsPred"
      },
      {
        "def": "anonymous_67",
        "kind": "def",
        "printable": "anonymous_67"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_166": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_166",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_14",
        "kind": "def",
        "printable": "anonymous_14"
      },
      {
        "def": "anonymous_165",
        "kind": "def",
        "printable": "anonymous_165"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_167": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:433"
    ],
    "!name": "anonymous_167",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "VectorOfAnyRankOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::VectorType",
    "description": "",
    "predicate": {
      "def": "anonymous_168",
      "kind": "def",
      "printable": "anonymous_168"
    },
    "summary": "vector of 1-bit signless integer values"
  },
  "anonymous_168": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_168",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsVectorOfAnyRankTypePred",
        "kind": "def",
        "printable": "IsVectorOfAnyRankTypePred"
      },
      {
        "def": "anonymous_67",
        "kind": "def",
        "printable": "anonymous_67"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_169": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:693"
    ],
    "!name": "anonymous_169",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_68",
      "kind": "def",
      "printable": "anonymous_68"
    },
    "summary": "tensor of 1-bit signless integer values"
  },
  "anonymous_17": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_17",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessInteger(32))"
  },
  "anonymous_170": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_170",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_14",
        "kind": "def",
        "printable": "anonymous_14"
      },
      {
        "def": "anonymous_168",
        "kind": "def",
        "printable": "anonymous_168"
      },
      {
        "def": "anonymous_68",
        "kind": "def",
        "printable": "anonymous_68"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_171": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:421"
    ],
    "!name": "anonymous_171",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "ValueSemanticsContainerOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_176",
      "kind": "def",
      "printable": "anonymous_176"
    },
    "summary": "container with value semantics of signless integer or index values"
  },
  "anonymous_172": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_172",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "AnySignlessIntegerOrIndex",
        "kind": "def",
        "printable": "AnySignlessIntegerOrIndex"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_173",
      "kind": "def",
      "printable": "anonymous_173"
    },
    "summary": "signless integer or index"
  },
  "anonymous_173": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_173",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_33",
        "kind": "def",
        "printable": "anonymous_33"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_174": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_174",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_173",
        "kind": "def",
        "printable": "anonymous_173"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_175": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_175",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_174",
        "kind": "def",
        "printable": "anonymous_174"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_176": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_176",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "HasValueSemanticsPred",
        "kind": "def",
        "printable": "HasValueSemanticsPred"
      },
      {
        "def": "anonymous_175",
        "kind": "def",
        "printable": "anonymous_175"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_177": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_177",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_33",
        "kind": "def",
        "printable": "anonymous_33"
      },
      {
        "def": "anonymous_176",
        "kind": "def",
        "printable": "anonymous_176"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_178": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:433"
    ],
    "!name": "anonymous_178",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "VectorOfAnyRankOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::VectorType",
    "description": "",
    "predicate": {
      "def": "anonymous_179",
      "kind": "def",
      "printable": "anonymous_179"
    },
    "summary": "vector of signless integer or index values"
  },
  "anonymous_179": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_179",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsVectorOfAnyRankTypePred",
        "kind": "def",
        "printable": "IsVectorOfAnyRankTypePred"
      },
      {
        "def": "anonymous_175",
        "kind": "def",
        "printable": "anonymous_175"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_18": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_18",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessInteger(64))"
  },
  "anonymous_180": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:693"
    ],
    "!name": "anonymous_180",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "TensorOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::TensorType",
    "description": "",
    "predicate": {
      "def": "anonymous_181",
      "kind": "def",
      "printable": "anonymous_181"
    },
    "summary": "tensor of signless integer or index values"
  },
  "anonymous_181": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_181",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_175",
        "kind": "def",
        "printable": "anonymous_175"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_182": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_182",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_33",
        "kind": "def",
        "printable": "anonymous_33"
      },
      {
        "def": "anonymous_179",
        "kind": "def",
        "printable": "anonymous_179"
      },
      {
        "def": "anonymous_181",
        "kind": "def",
        "printable": "anonymous_181"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_183": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:421"
    ],
    "!name": "anonymous_183",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "ShapedContainerType",
      "ValueSemanticsContainerOf"
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_188",
      "kind": "def",
      "printable": "anonymous_188"
    },
    "summary": "container with value semantics of floating-point values"
  },
  "anonymous_184": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_184",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "AnyFloat",
        "kind": "def",
        "printable": "AnyFloat"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_185",
      "kind": "def",
      "printable": "anonymous_185"
    },
    "summary": "floating-point"
  },
  "anonymous_185": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_185",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_34",
        "kind": "def",
        "printable": "anonymous_34"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_186": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_186",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_185",
        "kind": "def",
        "printable": "anonymous_185"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_187": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_187",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_186",
        "kind": "def",
        "printable": "anonymous_186"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_188": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_188",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "HasValueSemanticsPred",
        "kind": "def",
        "printable": "HasValueSemanticsPred"
      },
      {
        "def": "anonymous_187",
        "kind": "def",
        "printable": "anonymous_187"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_189": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_189",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_34",
        "kind": "def",
        "printable": "anonymous_34"
      },
      {
        "def": "anonymous_188",
        "kind": "def",
        "printable": "anonymous_188"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_19": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_19",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessInteger(128))"
  },
  "anonymous_190": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_190",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_177",
        "kind": "def",
        "printable": "anonymous_177"
      },
      {
        "def": "anonymous_189",
        "kind": "def",
        "printable": "anonymous_189"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_191": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_191",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::LocationAttr>($_self))"
  },
  "anonymous_192": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_192",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::BoolAttr>($_self))"
  },
  "anonymous_193": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_193",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::IntegerAttr>($_self))"
  },
  "anonymous_194": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_194",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::IndexType>(::llvm::cast<::mlir::IntegerAttr>($_self).getType()))"
  },
  "anonymous_195": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_195",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_194",
        "kind": "def",
        "printable": "anonymous_194"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_196": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_196",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isInteger(1))"
  },
  "anonymous_197": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_197",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_196",
        "kind": "def",
        "printable": "anonymous_196"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_198": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_198",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isInteger(8))"
  },
  "anonymous_199": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_199",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_198",
        "kind": "def",
        "printable": "anonymous_198"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_2": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_2",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::VectorType>($_self).getScalableDims().back())"
  },
  "anonymous_20": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_20",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignedInteger())"
  },
  "anonymous_200": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_200",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isInteger(16))"
  },
  "anonymous_201": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_201",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_200",
        "kind": "def",
        "printable": "anonymous_200"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_202": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_202",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isInteger(32))"
  },
  "anonymous_203": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_203",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_202",
        "kind": "def",
        "printable": "anonymous_202"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_204": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_204",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isInteger(64))"
  },
  "anonymous_205": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_205",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_204",
        "kind": "def",
        "printable": "anonymous_204"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_206": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_206",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignlessInteger(1))"
  },
  "anonymous_207": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_207",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_206",
        "kind": "def",
        "printable": "anonymous_206"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_208": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_208",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignlessInteger(8))"
  },
  "anonymous_209": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_209",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_208",
        "kind": "def",
        "printable": "anonymous_208"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_21": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_21",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignedInteger(1))"
  },
  "anonymous_210": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_210",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignlessInteger(16))"
  },
  "anonymous_211": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_211",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_210",
        "kind": "def",
        "printable": "anonymous_210"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_212": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_212",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignlessInteger(32))"
  },
  "anonymous_213": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_213",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_212",
        "kind": "def",
        "printable": "anonymous_212"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_214": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_214",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignlessInteger(64))"
  },
  "anonymous_215": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_215",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_214",
        "kind": "def",
        "printable": "anonymous_214"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_216": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_216",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignedInteger(1))"
  },
  "anonymous_217": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_217",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_216",
        "kind": "def",
        "printable": "anonymous_216"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_218": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_218",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignedInteger(8))"
  },
  "anonymous_219": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_219",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_218",
        "kind": "def",
        "printable": "anonymous_218"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_22": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_22",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignedInteger(8))"
  },
  "anonymous_220": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_220",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignedInteger(16))"
  },
  "anonymous_221": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_221",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_220",
        "kind": "def",
        "printable": "anonymous_220"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_222": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_222",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignedInteger(32))"
  },
  "anonymous_223": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_223",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_222",
        "kind": "def",
        "printable": "anonymous_222"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_224": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_224",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isSignedInteger(64))"
  },
  "anonymous_225": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_225",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_224",
        "kind": "def",
        "printable": "anonymous_224"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_226": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_226",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isUnsignedInteger(1))"
  },
  "anonymous_227": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_227",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_226",
        "kind": "def",
        "printable": "anonymous_226"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_228": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_228",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isUnsignedInteger(8))"
  },
  "anonymous_229": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_229",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_228",
        "kind": "def",
        "printable": "anonymous_228"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_23": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_23",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignedInteger(16))"
  },
  "anonymous_230": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_230",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isUnsignedInteger(16))"
  },
  "anonymous_231": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_231",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_230",
        "kind": "def",
        "printable": "anonymous_230"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_232": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_232",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isUnsignedInteger(32))"
  },
  "anonymous_233": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_233",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_232",
        "kind": "def",
        "printable": "anonymous_232"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_234": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_234",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getType().isUnsignedInteger(64))"
  },
  "anonymous_235": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_235",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_193",
        "kind": "def",
        "printable": "anonymous_193"
      },
      {
        "def": "anonymous_234",
        "kind": "def",
        "printable": "anonymous_234"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_236": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_236",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::FloatAttr>($_self))"
  },
  "anonymous_237": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_237",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::FloatAttr>($_self).getType().isF32())"
  },
  "anonymous_238": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_238",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_236",
        "kind": "def",
        "printable": "anonymous_236"
      },
      {
        "def": "anonymous_237",
        "kind": "def",
        "printable": "anonymous_237"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_239": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_239",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::FloatAttr>($_self).getType().isF64())"
  },
  "anonymous_24": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_24",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignedInteger(32))"
  },
  "anonymous_240": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_240",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_236",
        "kind": "def",
        "printable": "anonymous_236"
      },
      {
        "def": "anonymous_239",
        "kind": "def",
        "printable": "anonymous_239"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_241": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_241",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::StringAttr>($_self))"
  },
  "anonymous_242": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_242",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::TypeAttr>($_self))"
  },
  "anonymous_243": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_243",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::Type>(::llvm::cast<::mlir::TypeAttr>($_self).getValue()))"
  },
  "anonymous_244": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_244",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_5",
        "kind": "def",
        "printable": "anonymous_5"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "::llvm::cast<::mlir::TypeAttr>($_self).getValue()"
  },
  "anonymous_245": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_245",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_242",
        "kind": "def",
        "printable": "anonymous_242"
      },
      {
        "def": "anonymous_243",
        "kind": "def",
        "printable": "anonymous_243"
      },
      {
        "def": "anonymous_244",
        "kind": "def",
        "printable": "anonymous_244"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_246": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_246",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::UnitAttr>($_self))"
  },
  "anonymous_247": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_247",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DictionaryAttr>($_self))"
  },
  "anonymous_248": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_248",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::ElementsAttr>($_self))"
  },
  "anonymous_249": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_249",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseIntElementsAttr>($_self))"
  },
  "anonymous_25": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_25",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignedInteger(64))"
  },
  "anonymous_250": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_250",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseBoolArrayAttr>($_self))"
  },
  "anonymous_251": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_251",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseI8ArrayAttr>($_self))"
  },
  "anonymous_252": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_252",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseI16ArrayAttr>($_self))"
  },
  "anonymous_253": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_253",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseI32ArrayAttr>($_self))"
  },
  "anonymous_254": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_254",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseI64ArrayAttr>($_self))"
  },
  "anonymous_255": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_255",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseF32ArrayAttr>($_self))"
  },
  "anonymous_256": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_256",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseF64ArrayAttr>($_self))"
  },
  "anonymous_257": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_257",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::DenseIntElementsAttr>($_self)\n                                      .getType()\n                                      .getElementType()\n                                      .isIndex())"
  },
  "anonymous_258": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_258",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_249",
        "kind": "def",
        "printable": "anonymous_249"
      },
      {
        "def": "anonymous_257",
        "kind": "def",
        "printable": "anonymous_257"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_259": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_259",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_249",
        "kind": "def",
        "printable": "anonymous_249"
      },
      {
        "def": "anonymous_5",
        "kind": "def",
        "printable": "anonymous_5"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_26": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_26",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isUnsignedInteger())"
  },
  "anonymous_260": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_260",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::DenseIntElementsAttr>($_self).getType().getElementType().isInteger(32))"
  },
  "anonymous_261": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_261",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_249",
        "kind": "def",
        "printable": "anonymous_249"
      },
      {
        "def": "anonymous_260",
        "kind": "def",
        "printable": "anonymous_260"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_262": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_262",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::DenseIntElementsAttr>($_self).getType().getElementType().isInteger(64))"
  },
  "anonymous_263": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_263",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_249",
        "kind": "def",
        "printable": "anonymous_249"
      },
      {
        "def": "anonymous_262",
        "kind": "def",
        "printable": "anonymous_262"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_264": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_264",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::DenseIntElementsAttr>($_self).getType().getElementType().isSignlessInteger(32))"
  },
  "anonymous_265": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_265",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_249",
        "kind": "def",
        "printable": "anonymous_249"
      },
      {
        "def": "anonymous_264",
        "kind": "def",
        "printable": "anonymous_264"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_266": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_266",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::DenseIntElementsAttr>($_self).getType().getElementType().isSignlessInteger(64))"
  },
  "anonymous_267": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_267",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_249",
        "kind": "def",
        "printable": "anonymous_249"
      },
      {
        "def": "anonymous_266",
        "kind": "def",
        "printable": "anonymous_266"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_268": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:459"
    ],
    "!name": "anonymous_268",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase",
      "SignlessIntElementsAttr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::llvm::cast<::mlir::DenseIntElementsAttr>(::mlir::DenseElementsAttr::get(::mlir::RankedTensorType::get({}, $_builder.getIntegerType(32)), ::llvm::ArrayRef($0)))",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_265",
      "kind": "def",
      "printable": "anonymous_265"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "32-bit signless integer elements attribute",
    "valueType": null
  },
  "anonymous_269": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:459"
    ],
    "!name": "anonymous_269",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "ElementsAttrBase",
      "IntElementsAttrBase",
      "SignlessIntElementsAttr"
    ],
    "baseAttr": null,
    "constBuilderCall": "::llvm::cast<::mlir::DenseIntElementsAttr>(::mlir::DenseElementsAttr::get(::mlir::RankedTensorType::get({}, $_builder.getIntegerType(64)), ::llvm::ArrayRef($0)))",
    "convertFromStorage": "$_self",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_267",
      "kind": "def",
      "printable": "anonymous_267"
    },
    "returnType": " ::mlir::DenseIntElementsAttr ",
    "storageType": " ::mlir::DenseIntElementsAttr ",
    "summary": "64-bit signless integer elements attribute",
    "valueType": null
  },
  "anonymous_27": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_27",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isUnsignedInteger(1))"
  },
  "anonymous_270": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_270",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseFPElementsAttr>($_self) &&::llvm::cast<::mlir::DenseElementsAttr>($_self).getType().getElementType().isF64())"
  },
  "anonymous_271": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_271",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::DenseStringElementsAttr>($_self))"
  },
  "anonymous_272": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_272",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::AffineMapAttr>($_self))"
  },
  "anonymous_273": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_273",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::ArrayAttr>($_self))"
  },
  "anonymous_274": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_274",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_191",
        "kind": "def",
        "printable": "anonymous_191"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_275": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_275",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_274",
        "kind": "def",
        "printable": "anonymous_274"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_276": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_276",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_275",
        "kind": "def",
        "printable": "anonymous_275"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_277": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_277",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_272",
        "kind": "def",
        "printable": "anonymous_272"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_278": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_278",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_277",
        "kind": "def",
        "printable": "anonymous_277"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_279": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_279",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_278",
        "kind": "def",
        "printable": "anonymous_278"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_28": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_28",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isUnsignedInteger(8))"
  },
  "anonymous_280": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_280",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_192",
        "kind": "def",
        "printable": "anonymous_192"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_281": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_281",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_280",
        "kind": "def",
        "printable": "anonymous_280"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_282": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_282",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_281",
        "kind": "def",
        "printable": "anonymous_281"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_283": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_283",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_213",
        "kind": "def",
        "printable": "anonymous_213"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_284": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_284",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_283",
        "kind": "def",
        "printable": "anonymous_283"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_285": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_285",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_284",
        "kind": "def",
        "printable": "anonymous_284"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_286": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_286",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_215",
        "kind": "def",
        "printable": "anonymous_215"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_287": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_287",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_286",
        "kind": "def",
        "printable": "anonymous_286"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_288": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_288",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_287",
        "kind": "def",
        "printable": "anonymous_287"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_289": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_289",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_238",
        "kind": "def",
        "printable": "anonymous_238"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_29": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_29",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isUnsignedInteger(16))"
  },
  "anonymous_290": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_290",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_289",
        "kind": "def",
        "printable": "anonymous_289"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_291": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_291",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_290",
        "kind": "def",
        "printable": "anonymous_290"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_292": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_292",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_240",
        "kind": "def",
        "printable": "anonymous_240"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_293": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_293",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_292",
        "kind": "def",
        "printable": "anonymous_292"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_294": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_294",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_293",
        "kind": "def",
        "printable": "anonymous_293"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_295": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_295",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_241",
        "kind": "def",
        "printable": "anonymous_241"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_296": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_296",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_295",
        "kind": "def",
        "printable": "anonymous_295"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_297": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_297",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_296",
        "kind": "def",
        "printable": "anonymous_296"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_298": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_298",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_245",
        "kind": "def",
        "printable": "anonymous_245"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_299": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_299",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_298",
        "kind": "def",
        "printable": "anonymous_298"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_3": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_3",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(!llvm::is_contained(::llvm::cast<::mlir::VectorType>($_self).getScalableDims().drop_back(), true))"
  },
  "anonymous_30": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_30",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isUnsignedInteger(32))"
  },
  "anonymous_300": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_300",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_299",
        "kind": "def",
        "printable": "anonymous_299"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_301": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_301",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_288",
        "kind": "def",
        "printable": "anonymous_288"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_302": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_302",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_301",
        "kind": "def",
        "printable": "anonymous_301"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_303": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_303",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_302",
        "kind": "def",
        "printable": "anonymous_302"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_304": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_304",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_247",
        "kind": "def",
        "printable": "anonymous_247"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_305": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_305",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_304",
        "kind": "def",
        "printable": "anonymous_304"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_306": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_306",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_305",
        "kind": "def",
        "printable": "anonymous_305"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_307": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_307",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::SymbolRefAttr>($_self))"
  },
  "anonymous_308": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_308",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::FlatSymbolRefAttr>($_self))"
  },
  "anonymous_309": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_309",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_307",
        "kind": "def",
        "printable": "anonymous_307"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_31": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_31",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isUnsignedInteger(64))"
  },
  "anonymous_310": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_310",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_309",
        "kind": "def",
        "printable": "anonymous_309"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_311": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_311",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_310",
        "kind": "def",
        "printable": "anonymous_310"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_312": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_312",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_308",
        "kind": "def",
        "printable": "anonymous_308"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "attr"
  },
  "anonymous_313": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_313",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_312",
        "kind": "def",
        "printable": "anonymous_312"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "::llvm::all_of(::llvm::cast<::mlir::ArrayAttr>($_self), [&](::mlir::Attribute attr) { return attr && (",
    "suffix": "); })"
  },
  "anonymous_314": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_314",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_273",
        "kind": "def",
        "printable": "anonymous_273"
      },
      {
        "def": "anonymous_313",
        "kind": "def",
        "printable": "anonymous_313"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_315": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_315",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self == $_builder.getBoolAttr(false))"
  },
  "anonymous_316": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_316",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self == $_builder.getBoolAttr(true))"
  },
  "anonymous_317": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_317",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self == ((true) ? $_builder.getUnitAttr() : nullptr))"
  },
  "anonymous_318": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_318",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(!::llvm::cast<::mlir::IntegerAttr>($_self).getValue().isNegative())"
  },
  "anonymous_319": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_319",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getValue().isStrictlyPositive())"
  },
  "anonymous_32": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_32",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::IndexType>($_self))"
  },
  "anonymous_320": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_320",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(!$_self)"
  },
  "anonymous_321": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_321",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "()"
  },
  "anonymous_322": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_322",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_323",
      "kind": "def",
      "printable": "anonymous_323"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "eq",
    "summary": "case eq",
    "symbol": "EQ",
    "value": 0,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_323": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_323",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 0)"
  },
  "anonymous_324": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_324",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_325",
      "kind": "def",
      "printable": "anonymous_325"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "ne",
    "summary": "case ne",
    "symbol": "NE",
    "value": 1,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_325": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_325",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 1)"
  },
  "anonymous_326": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_326",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_327",
      "kind": "def",
      "printable": "anonymous_327"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "slt",
    "summary": "case slt",
    "symbol": "SLT",
    "value": 2,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_327": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_327",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 2)"
  },
  "anonymous_328": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_328",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_329",
      "kind": "def",
      "printable": "anonymous_329"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "sle",
    "summary": "case sle",
    "symbol": "SLE",
    "value": 3,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_329": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_329",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 3)"
  },
  "anonymous_33": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_33",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isSignlessIntOrIndex())"
  },
  "anonymous_330": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_330",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_331",
      "kind": "def",
      "printable": "anonymous_331"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "sgt",
    "summary": "case sgt",
    "symbol": "SGT",
    "value": 4,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_331": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_331",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 4)"
  },
  "anonymous_332": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_332",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_333",
      "kind": "def",
      "printable": "anonymous_333"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "sge",
    "summary": "case sge",
    "symbol": "SGE",
    "value": 5,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_333": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_333",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 5)"
  },
  "anonymous_334": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_334",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_335",
      "kind": "def",
      "printable": "anonymous_335"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "ult",
    "summary": "case ult",
    "symbol": "ULT",
    "value": 6,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_335": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_335",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 6)"
  },
  "anonymous_336": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_336",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_337",
      "kind": "def",
      "printable": "anonymous_337"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "ule",
    "summary": "case ule",
    "symbol": "ULE",
    "value": 7,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_337": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_337",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 7)"
  },
  "anonymous_338": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_338",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_339",
      "kind": "def",
      "printable": "anonymous_339"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "ugt",
    "summary": "case ugt",
    "symbol": "UGT",
    "value": 8,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_339": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_339",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 8)"
  },
  "anonymous_34": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_34",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::FloatType>($_self))"
  },
  "anonymous_340": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:42"
    ],
    "!name": "anonymous_340",
    "!superclasses": [
      "EnumAttrCaseInfo",
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrCaseBase",
      "I32EnumAttrCase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_341",
      "kind": "def",
      "printable": "anonymous_341"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "str": "uge",
    "summary": "case uge",
    "symbol": "UGE",
    "value": 9,
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_341": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_341",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::IntegerAttr>($_self).getInt() == 9)"
  },
  "anonymous_342": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:205"
    ],
    "!name": "anonymous_342",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase",
      "IntEnumAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_345",
      "kind": "def",
      "printable": "anonymous_345"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "index comparison predicate kind",
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_343": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_343",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_323",
        "kind": "def",
        "printable": "anonymous_323"
      },
      {
        "def": "anonymous_325",
        "kind": "def",
        "printable": "anonymous_325"
      },
      {
        "def": "anonymous_327",
        "kind": "def",
        "printable": "anonymous_327"
      },
      {
        "def": "anonymous_329",
        "kind": "def",
        "printable": "anonymous_329"
      },
      {
        "def": "anonymous_331",
        "kind": "def",
        "printable": "anonymous_331"
      },
      {
        "def": "anonymous_333",
        "kind": "def",
        "printable": "anonymous_333"
      },
      {
        "def": "anonymous_335",
        "kind": "def",
        "printable": "anonymous_335"
      },
      {
        "def": "anonymous_337",
        "kind": "def",
        "printable": "anonymous_337"
      },
      {
        "def": "anonymous_339",
        "kind": "def",
        "printable": "anonymous_339"
      },
      {
        "def": "anonymous_341",
        "kind": "def",
        "printable": "anonymous_341"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_344": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonAttrConstraints.td:230"
    ],
    "!name": "anonymous_344",
    "!superclasses": [
      "Constraint",
      "AttrConstraint",
      "Attr",
      "TypedAttrBase",
      "SignlessIntegerAttrBase"
    ],
    "baseAttr": null,
    "constBuilderCall": "$_builder.getIntegerAttr($_builder.getIntegerType(32), $0)",
    "convertFromStorage": "$_self.getValue()",
    "cppNamespace": "",
    "defaultValue": null,
    "description": "",
    "isOptional": 0,
    "predicate": {
      "def": "anonymous_213",
      "kind": "def",
      "printable": "anonymous_213"
    },
    "returnType": " ::llvm::APInt ",
    "storageType": "::mlir::IntegerAttr",
    "summary": "index comparison predicate kind",
    "valueType": {
      "def": "I32",
      "kind": "def",
      "printable": "I32"
    }
  },
  "anonymous_345": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_345",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_213",
        "kind": "def",
        "printable": "anonymous_213"
      },
      {
        "def": "anonymous_343",
        "kind": "def",
        "printable": "anonymous_343"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_346": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "EnumAttr.td:352"
    ],
    "!name": "anonymous_346",
    "!superclasses": [
      "AttrOrTypeParameter",
      "AttrParameter",
      "EnumParameter"
    ],
    "allocator": null,
    "comparator": null,
    "convertFromStorage": "$_self",
    "cppAccessorType": "::mlir::index::IndexCmpPredicate",
    "cppStorageType": "::mlir::index::IndexCmpPredicate",
    "cppType": "::mlir::index::IndexCmpPredicate",
    "defaultValue": "",
    "parser": "[&]() -> ::mlir::FailureOr<::mlir::index::IndexCmpPredicate> {\n    auto loc = $_parser.getCurrentLocation();\n    ::llvm::StringRef enumKeyword;\n    if (::mlir::failed($_parser.parseKeyword(&enumKeyword)))\n      return ::mlir::failure();\n    auto maybeEnum = ::mlir::index::symbolizeIndexCmpPredicate(enumKeyword);\n    if (maybeEnum)\n      return *maybeEnum;\n    return {(::llvm::LogicalResult)($_parser.emitError(loc) << \"expected \" << \"::mlir::index::IndexCmpPredicate\" << \" to be one of: \" << \"eq\" << \", \" << \"ne\" << \", \" << \"slt\" << \", \" << \"sle\" << \", \" << \"sgt\" << \", \" << \"sge\" << \", \" << \"ult\" << \", \" << \"ule\" << \", \" << \"ugt\" << \", \" << \"uge\")};\n  }()",
    "printer": "$_printer << stringifyIndexCmpPredicate($_self)",
    "summary": "an enum of type IndexCmpPredicate",
    "syntax": null
  },
  "anonymous_347": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_347",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::index::IndexCmpPredicateAttr>($_self))"
  },
  "anonymous_348": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Properties.td:17"
    ],
    "!name": "anonymous_348",
    "!superclasses": [
      "Property"
    ],
    "assignToStorage": "$_storage = $_value",
    "baseProperty": null,
    "convertFromAttribute": "\n    return convertFromAttribute($_storage, $_attr, $_diag);\n  ",
    "convertFromStorage": "$_storage",
    "convertToAttribute": "\n    return convertToAttribute($_ctxt, $_storage);\n  ",
    "defaultValue": "",
    "description": "",
    "hashProperty": "",
    "interfaceType": "",
    "optionalParser": "",
    "parser": "\n    auto value = ::mlir::FieldParser<>::parse($_parser);\n    if (::mlir::failed(value))\n      return ::mlir::failure();\n    $_storage = std::move(*value);\n  ",
    "printer": "$_printer << $_storage",
    "readFromMlirBytecode": "\n    if (::mlir::failed(readFromMlirBytecode($_reader, $_storage)))\n      return ::mlir::failure();\n  ",
    "storageType": "",
    "storageTypeValueOverride": "",
    "summary": "",
    "writeToMlirBytecode": "\n    writeToMlirBytecode($_writer, $_storage);\n  "
  },
  "anonymous_349": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:495"
    ],
    "!name": "anonymous_349",
    "!superclasses": [
      "StrFunc",
      "ElementCount"
    ],
    "result": "llvm::cast<::mlir::ShapedType>($_self.getType()).getNumElements()"
  },
  "anonymous_35": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_35",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isF16())"
  },
  "anonymous_350": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:499"
    ],
    "!name": "anonymous_350",
    "!superclasses": [
      "StrFunc",
      "ElementType"
    ],
    "result": "getElementTypeOrSelf($_self)"
  },
  "anonymous_351": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:489"
    ],
    "!name": "anonymous_351",
    "!superclasses": [
      "StrFunc",
      "Rank"
    ],
    "result": "::llvm::cast<::mlir::ShapedType>($_self.getType()).getRank()"
  },
  "anonymous_352": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:492"
    ],
    "!name": "anonymous_352",
    "!superclasses": [
      "StrFunc",
      "Shape"
    ],
    "result": "::llvm::cast<::mlir::ShapedType>($_self.getType()).getShape()"
  },
  "anonymous_353": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:82"
    ],
    "!name": "anonymous_353",
    "!superclasses": [
      "InterfaceMethod",
      "StaticInterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::TypeRange",
          "inputs"
        ],
        [
          "::mlir::TypeRange",
          "outputs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::TypeRange\":$inputs, \"::mlir::TypeRange\":$outputs)"
    },
    "body": "",
    "defaultBody": "",
    "description": "\n        Returns true if the given set of input and result types are compatible\n        to cast using this cast operation.\n      ",
    "name": "areCastCompatible",
    "returnType": "bool"
  },
  "anonymous_354": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_354",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::llvm::ArrayRef<::mlir::ConstantIntRanges>",
          "argRanges"
        ],
        [
          "::mlir::SetIntRangeFn",
          "setResultRanges"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::llvm::ArrayRef<::mlir::ConstantIntRanges>\":$argRanges, \"::mlir::SetIntRangeFn\":$setResultRanges)"
    },
    "body": "",
    "defaultBody": "\n      ::mlir::intrange::detail::defaultInferResultRangesFromOptional($_op,\n                                                                     argRanges,\n                                                                     setResultRanges);\n    ",
    "description": "\n      Infer the bounds on the results of this op given the bounds on its arguments.\n      For each result value or block argument (that isn't a branch argument,\n      since the dataflow analysis handles those case), the method should call\n      `setValueRange` with that `Value` as an argument. When implemented,\n      `setValueRange` should be called on all result values for the operation.\n      When operations take non-integer inputs, the\n     `inferResultRangesFromOptional` method should be implemented instead.\n\n      When called on an op that also implements the RegionBranchOpInterface\n      or BranchOpInterface, this method should not attempt to infer the values\n      of the branch results, as this will be handled by the analyses that use\n      this interface.\n\n      This function will only be called when at least one result of the op is a\n      scalar integer value or the op has a region.\n    ",
    "name": "inferResultRanges",
    "returnType": "void"
  },
  "anonymous_355": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_355",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::llvm::ArrayRef<::mlir::IntegerValueRange>",
          "argRanges"
        ],
        [
          "::mlir::SetIntLatticeFn",
          "setResultRanges"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::llvm::ArrayRef<::mlir::IntegerValueRange>\":$argRanges, \"::mlir::SetIntLatticeFn\":$setResultRanges)"
    },
    "body": "",
    "defaultBody": "\n      ::mlir::intrange::detail::defaultInferResultRanges($_op,\n                                                         argRanges,\n                                                         setResultRanges);\n    ",
    "description": "\n      Infer the bounds on the results of this op given the lattice representation\n      of the bounds for its arguments. For each result value or block argument\n      (that isn't a branch argument, since the dataflow analysis handles\n      those case), the method should call `setValueRange` with that `Value`\n      as an argument. When implemented, `setValueRange` should be called on\n      all result values for the operation.\n\n      This method allows for more precise implementations when operations\n      want to reason about inputs which may be undefined during the analysis.\n    ",
    "name": "inferResultRangesFromOptional",
    "returnType": "void"
  },
  "anonymous_356": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:82"
    ],
    "!name": "anonymous_356",
    "!superclasses": [
      "InterfaceMethod",
      "StaticInterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::MLIRContext *",
          "context"
        ],
        [
          "::std::optional<::mlir::Location>",
          "location"
        ],
        [
          "::mlir::ValueRange",
          "operands"
        ],
        [
          "::mlir::DictionaryAttr",
          "attributes"
        ],
        [
          "::mlir::OpaqueProperties",
          "properties"
        ],
        [
          "::mlir::RegionRange",
          "regions"
        ],
        [
          "::llvm::SmallVectorImpl<::mlir::Type>&",
          "inferredReturnTypes"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::MLIRContext *\":$context, \"::std::optional<::mlir::Location>\":$location, \"::mlir::ValueRange\":$operands, \"::mlir::DictionaryAttr\":$attributes, \"::mlir::OpaqueProperties\":$properties, \"::mlir::RegionRange\":$regions, \"::llvm::SmallVectorImpl<::mlir::Type>&\":$inferredReturnTypes)"
    },
    "body": "",
    "defaultBody": "",
    "description": "Infer the return types that an op would generate.\n\n      The method takes an optional location which, if set, will be used to\n      report errors on. The operands and attributes correspond to those with\n      which an Operation would be created (e.g., as used in Operation::create)\n      and the regions of the op. Be aware that this method is supposed to be\n      called with valid arguments, e.g., operands are verified, or it may result\n      in an undefined behavior.\n      ",
    "name": "inferReturnTypes",
    "returnType": "::llvm::LogicalResult"
  },
  "anonymous_357": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:82"
    ],
    "!name": "anonymous_357",
    "!superclasses": [
      "InterfaceMethod",
      "StaticInterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::MLIRContext *",
          "context"
        ],
        [
          "::std::optional<::mlir::Location>",
          "location"
        ],
        [
          "::mlir::ValueRange",
          "operands"
        ],
        [
          "::mlir::DictionaryAttr",
          "attributes"
        ],
        [
          "::mlir::OpaqueProperties",
          "properties"
        ],
        [
          "::mlir::RegionRange",
          "regions"
        ],
        [
          "::llvm::SmallVectorImpl<::mlir::Type>&",
          "returnTypes"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::MLIRContext *\":$context, \"::std::optional<::mlir::Location>\":$location, \"::mlir::ValueRange\":$operands, \"::mlir::DictionaryAttr\":$attributes, \"::mlir::OpaqueProperties\":$properties, \"::mlir::RegionRange\":$regions, \"::llvm::SmallVectorImpl<::mlir::Type>&\":$returnTypes)"
    },
    "body": "",
    "defaultBody": "\n          llvm::SmallVector<Type, 4> inferredReturnTypes;\n          if (failed(ConcreteOp::inferReturnTypes(context, location, operands,\n                                                  attributes, properties, regions,\n                                                  inferredReturnTypes)))\n            return failure();\n          if (!ConcreteOp::isCompatibleReturnTypes(inferredReturnTypes,\n                                                   returnTypes)) {\n            return emitOptionalError(\n                location, \"'\", ConcreteOp::getOperationName(),\n                \"' op inferred type(s) \", inferredReturnTypes,\n                \" are incompatible with return type(s) of operation \",\n                returnTypes);\n          }\n          return success();\n      ",
    "description": "Refine the return types that an op would generate.\n\n      This method computes the return types as `inferReturnTypes` does but\n      additionally takes the existing result types as input. The existing\n      result types can be checked as part of inference to provide more\n      op-specific error messages as well as part of inference to merge\n      additional information, attributes, during inference. It is called during\n      verification for ops implementing this trait with default behavior\n      reporting mismatch with current and inferred types printed.\n\n      The operands and attributes correspond to those with which an Operation\n      would be created (e.g., as used in Operation::create) and the regions of\n      the op. The method takes an optional location which, if set, will be used\n      to report errors on.\n\n      The return types may be elided or specific elements be null for elements\n      that should just be returned but not verified.\n\n      Because this method can be called from within different stages of IR\n      verification, implementations should not assume the arguments to\n      represent fully valid IR and are responsible for checking inputs for\n      validity to the degree necessary to perform the return type inference.\n      ",
    "name": "refineReturnTypes",
    "returnType": "::llvm::LogicalResult"
  },
  "anonymous_358": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:82"
    ],
    "!name": "anonymous_358",
    "!superclasses": [
      "InterfaceMethod",
      "StaticInterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::TypeRange",
          "lhs"
        ],
        [
          "::mlir::TypeRange",
          "rhs"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::TypeRange\":$lhs, \"::mlir::TypeRange\":$rhs)"
    },
    "body": "\n        return ConcreteOp::isCompatibleReturnTypes(lhs, rhs);\n      ",
    "defaultBody": "\n        /// Returns whether two arrays are equal as strongest check for\n        /// compatibility by default.\n        return lhs == rhs;\n      ",
    "description": "Returns whether two array of types are compatible result types for an op.",
    "name": "isCompatibleReturnTypes",
    "returnType": "bool"
  },
  "anonymous_359": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:82"
    ],
    "!name": "anonymous_359",
    "!superclasses": [
      "InterfaceMethod",
      "StaticInterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::MLIRContext*",
          "context"
        ],
        [
          "::std::optional<::mlir::Location>",
          "location"
        ],
        [
          "::mlir::ValueShapeRange",
          "operands"
        ],
        [
          "::mlir::DictionaryAttr",
          "attributes"
        ],
        [
          "::mlir::OpaqueProperties",
          "properties"
        ],
        [
          "::mlir::RegionRange",
          "regions"
        ],
        [
          "::llvm::SmallVectorImpl<::mlir::ShapedTypeComponents>&",
          "inferredReturnShapes"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::MLIRContext*\":$context, \"::std::optional<::mlir::Location>\":$location, \"::mlir::ValueShapeRange\":$operands, \"::mlir::DictionaryAttr\":$attributes, \"::mlir::OpaqueProperties\":$properties, \"::mlir::RegionRange\":$regions, \"::llvm::SmallVectorImpl<::mlir::ShapedTypeComponents>&\":$inferredReturnShapes)"
    },
    "body": "",
    "defaultBody": " return ::mlir::failure(); ",
    "description": "Infer the components of return type of shape containter.\n\n      The method takes an optional location which, if set, will be used to\n      report errors on. The operands and attributes correspond to those with\n      which an Operation would be created (e.g., as used in Operation::create)\n      and the regions of the op.\n\n      Unknown (e.g., unranked) shape and nullptrs for element type and attribute\n      may be returned by this function while returning success. E.g., partial\n      population of components is not error condition.\n\n      Because this method can be called from within different stages of IR\n      verification, implementations should not assume the arguments to\n      represent fully valid IR and are responsible for checking inputs for\n      validity to the degree necessary to perform the return type inference.\n      ",
    "name": "inferReturnTypeComponents",
    "returnType": "::llvm::LogicalResult"
  },
  "anonymous_36": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_36",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isF32())"
  },
  "anonymous_360": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_360",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::OpBuilder&",
          "builder"
        ],
        [
          "::mlir::ValueRange",
          "operands"
        ],
        [
          "::llvm::SmallVectorImpl<::mlir::Value> &",
          "reifiedReturnShapes"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::OpBuilder&\":$builder, \"::mlir::ValueRange\":$operands, \"::llvm::SmallVectorImpl<::mlir::Value> &\":$reifiedReturnShapes)"
    },
    "body": "",
    "defaultBody": " return ::mlir::failure(); ",
    "description": "Reify the shape computation for the operation.\n\n      Insert operations using the given OpBuilder that computes the\n      result shape. This interface is supposed to be workable during dialect\n      conversion (e.g. convert from tensor world to buffer world),\n      where `getOperand` may be invalid. For example, some ops (e.g.\n      dynamic_reshape(input, target_shape)) may depend on their operands\n      to calculate the result shape. When the `matchAndRewrite ` method\n      of a conversion pattern is called, the operands of the op to convert\n      may have been converted into other types, which makes it invalid to\n      call the `getOperand` method of such op directly inside the\n      conversion pattern.  To solve this problem, this interface follows\n      the design of the conversion pattern, that is, accepting passed in\n      operands to avoid calling `getOperand` directly inside the interface\n      implementation.\n      ",
    "name": "reifyReturnTypeShapes",
    "returnType": "::llvm::LogicalResult"
  },
  "anonymous_361": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:171"
    ],
    "!name": "anonymous_361",
    "!superclasses": [
      "DeclareInterfaceMethods",
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface",
      "DeclareOpInterfaceMethods"
    ],
    "alwaysOverriddenMethods": [],
    "baseInterfaces": [],
    "cppInterfaceName": "InferTypeOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Interface to infer the return types for an operation that could be used\n    during op construction, verification or type inference.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_356",
        "kind": "def",
        "printable": "anonymous_356"
      },
      {
        "def": "anonymous_357",
        "kind": "def",
        "printable": "anonymous_357"
      },
      {
        "def": "anonymous_358",
        "kind": "def",
        "printable": "anonymous_358"
      }
    ],
    "trait": "InferTypeOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "anonymous_362": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:36"
    ],
    "!name": "anonymous_362",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "\n        static ::llvm::LogicalResult\n        inferReturnTypes(::mlir::MLIRContext *context,\n                                std::optional<::mlir::Location> location,\n                                Adaptor adaptor,\n                                ::llvm::SmallVectorImpl<::mlir::Type> &inferredReturnTypes);\n      ",
    "extraConcreteClassDefinition": "\n        ::llvm::LogicalResult\n        $cppClass::inferReturnTypes(::mlir::MLIRContext *context,\n                          std::optional<::mlir::Location> location,\n                          ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes,\n                          ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions,\n                          ::llvm::SmallVectorImpl<::mlir::Type> &inferredReturnTypes) {\n          $cppClass::Adaptor adaptor(operands, attributes, properties, regions);\n          return $cppClass::inferReturnTypes(context,\n            location, adaptor, inferredReturnTypes);\n        }\n      ",
    "trait": "InferTypeOpAdaptor"
  },
  "anonymous_363": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:36"
    ],
    "!name": "anonymous_363",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "\n        static ::llvm::LogicalResult\n        inferReturnTypes(::mlir::MLIRContext *context,\n                                std::optional<::mlir::Location> location,\n                                Adaptor adaptor,\n                                ::llvm::SmallVectorImpl<::mlir::Type> &inferredReturnTypes);\n      \n    static bool isCompatibleReturnTypes(::mlir::TypeRange l, ::mlir::TypeRange r);\n  ",
    "extraConcreteClassDefinition": "\n        ::llvm::LogicalResult\n        $cppClass::inferReturnTypes(::mlir::MLIRContext *context,\n                          std::optional<::mlir::Location> location,\n                          ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes,\n                          ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions,\n                          ::llvm::SmallVectorImpl<::mlir::Type> &inferredReturnTypes) {\n          $cppClass::Adaptor adaptor(operands, attributes, properties, regions);\n          return $cppClass::inferReturnTypes(context,\n            location, adaptor, inferredReturnTypes);\n        }\n      ",
    "trait": "InferTypeOpAdaptor"
  },
  "anonymous_364": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:36"
    ],
    "!name": "anonymous_364",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "\n        static ::llvm::LogicalResult\n        inferReturnTypeComponents(::mlir::MLIRContext *context,\n                                std::optional<::mlir::Location> location,\n                                Adaptor adaptor,\n                                ::llvm::SmallVectorImpl<::mlir::ShapedTypeComponents> &inferredReturnShapes);\n      ",
    "extraConcreteClassDefinition": "\n        ::llvm::LogicalResult\n        $cppClass::inferReturnTypeComponents(::mlir::MLIRContext *context,\n                          std::optional<::mlir::Location> location,\n                          ::mlir::ValueShapeRange operands, ::mlir::DictionaryAttr attributes,\n                          ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions,\n                          ::llvm::SmallVectorImpl<::mlir::ShapedTypeComponents> &inferredReturnShapes) {\n          $cppClass::Adaptor adaptor(operands, attributes, properties, regions);\n          return $cppClass::inferReturnTypeComponents(context,\n            location, adaptor, inferredReturnShapes);\n        }\n      ",
    "trait": "InferShapedTypeOpAdaptor"
  },
  "anonymous_365": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:171"
    ],
    "!name": "anonymous_365",
    "!superclasses": [
      "DeclareInterfaceMethods",
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface",
      "DeclareOpInterfaceMethods"
    ],
    "alwaysOverriddenMethods": [
      "inferReturnTypeComponents"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "InferShapedTypeOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Interface to infer the components of a ShapedType returned by an operation\n    that could be used during op construction, verification or shape inference.\n\n    The components consists of element type, shape and raw attribute.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_359",
        "kind": "def",
        "printable": "anonymous_359"
      },
      {
        "def": "anonymous_360",
        "kind": "def",
        "printable": "anonymous_360"
      }
    ],
    "trait": "InferShapedTypeOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "anonymous_366": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:171"
    ],
    "!name": "anonymous_366",
    "!superclasses": [
      "DeclareInterfaceMethods",
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface",
      "DeclareOpInterfaceMethods"
    ],
    "alwaysOverriddenMethods": [
      "inferReturnTypeComponents",
      "reifyReturnTypeShapes"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "InferShapedTypeOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Interface to infer the components of a ShapedType returned by an operation\n    that could be used during op construction, verification or shape inference.\n\n    The components consists of element type, shape and raw attribute.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_359",
        "kind": "def",
        "printable": "anonymous_359"
      },
      {
        "def": "anonymous_360",
        "kind": "def",
        "printable": "anonymous_360"
      }
    ],
    "trait": "InferShapedTypeOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "anonymous_367": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:36"
    ],
    "!name": "anonymous_367",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "\n        ::llvm::LogicalResult\n        $cppClass::inferReturnTypes(::mlir::MLIRContext *context,\n                          std::optional<::mlir::Location> location,\n                          ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes,\n                          ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions,\n                          ::llvm::SmallVectorImpl<::mlir::Type> &inferredReturnTypes) {\n          ::llvm::SmallVector<::mlir::ShapedTypeComponents, 2> retComponents;\n          if (failed($cppClass::inferReturnTypeComponents(context, location,\n                                    operands, attributes, properties, regions,\n                                    retComponents)))\n            return failure();\n          return ::mlir::detail::inferReturnTensorTypes(retComponents,\n                                    inferredReturnTypes);\n        }\n      ",
    "trait": "InferTensorType"
  },
  "anonymous_368": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:36"
    ],
    "!name": "anonymous_368",
    "!superclasses": [
      "Trait",
      "NativeTrait",
      "NativeOpTrait"
    ],
    "cppNamespace": "::mlir::OpTrait",
    "dependentTraits": [],
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "\n        LogicalResult\n        $cppClass::inferReturnTypes(::mlir::MLIRContext *context,\n                          std::optional<::mlir::Location> location,\n                          ::mlir::ValueRange operands, ::mlir::DictionaryAttr attributes,\n                          ::mlir::OpaqueProperties properties, ::mlir::RegionRange regions,\n                          ::llvm::SmallVectorImpl<::mlir::Type> &inferredReturnTypes) {\n          SmallVector<ShapedTypeComponents, 2> retComponents;\n          if (failed($cppClass::inferReturnTypeComponents(context, location,\n                                    operands, attributes, properties, regions,\n                                    retComponents)))\n            return failure();\n          return ::mlir::detail::inferReturnTensorTypes(retComponents,\n                                    inferredReturnTypes);\n        }\n      ",
    "trait": "InferTensorType"
  },
  "anonymous_369": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:234"
    ],
    "!name": "anonymous_369",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferShapedTypeOpAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_365",
        "kind": "def",
        "printable": "anonymous_365"
      },
      {
        "def": "anonymous_364",
        "kind": "def",
        "printable": "anonymous_364"
      }
    ]
  },
  "anonymous_37": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_37",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isF64())"
  },
  "anonymous_370": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "InferTypeOpInterface.td:234"
    ],
    "!name": "anonymous_370",
    "!superclasses": [
      "Trait",
      "TraitList",
      "InferShapedTypeOpAdaptorBase"
    ],
    "traits": [
      {
        "def": "anonymous_366",
        "kind": "def",
        "printable": "anonymous_366"
      },
      {
        "def": "anonymous_364",
        "kind": "def",
        "printable": "anonymous_364"
      }
    ]
  },
  "anonymous_371": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_371",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::OpBuilder &",
          "builder"
        ],
        [
          "::mlir::ReifiedRankedShapedTypeDims &",
          "reifiedReturnShapes"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::OpBuilder &\":$builder, \"::mlir::ReifiedRankedShapedTypeDims &\":$reifiedReturnShapes)"
    },
    "body": "",
    "defaultBody": "",
    "description": "\n        Reify the shape of the result of an operation (typically in terms of the\n        shape of its operands).\n\n        `reifiedReturnShapes` is populated with one vector per op result. Each\n        of those vectors contains an OpFoldResult for each dimension of the\n        shaped type. In case a dimension in the type is static, the\n        corresponding entry is an IntegerAttr. Otherwise, it is a Value. The\n        given builder may be used to insert ops that compute result shapes.\n\n        If the shape of a particular result cannot be computed it must be empty.\n      ",
    "name": "reifyResultShapes",
    "returnType": "::llvm::LogicalResult"
  },
  "anonymous_372": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_372",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::llvm::SmallVectorImpl<::mlir::SideEffects::EffectInstance<::mlir::MemoryEffects::Effect>> &",
          "effects"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::llvm::SmallVectorImpl<::mlir::SideEffects::EffectInstance<::mlir::MemoryEffects::Effect>> &\":$effects)"
    },
    "body": "",
    "defaultBody": "",
    "description": "\n        Collects all of the operation's effects into `effects`.\n      ",
    "name": "getEffects",
    "returnType": "void"
  },
  "anonymous_373": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_373",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins)"
    },
    "body": "",
    "defaultBody": "",
    "description": "\n        Returns value indicating whether the specific operation in question can\n        be speculatively executed.  Please see the documentation on the\n        Speculatability enum to know how to interpret the return value.\n      ",
    "name": "getSpeculatability",
    "returnType": "::mlir::Speculation::Speculatability"
  },
  "anonymous_374": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_374",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::OpAsmSetValueNameFn",
          "setNameFn"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::OpAsmSetValueNameFn\":$setNameFn)"
    },
    "body": "",
    "defaultBody": "return;",
    "description": "\n        Get a special name to use when printing the results of this operation.\n        The given callback is invoked with a specific result value that starts a\n        result \"pack\", and the name to give this result pack. To signal that a\n        result pack should use the default naming scheme, a None can be passed\n        in instead of the name.\n\n        For example, if you have an operation that has four results and you want\n        to split these into three distinct groups you could do the following:\n\n        ```c++\n          setNameFn(getResult(0), \"first_result\");\n          setNameFn(getResult(1), \"middle_results\");\n          setNameFn(getResult(3), \"\"); // use the default numbering.\n        ```\n\n        This would print the operation as follows:\n\n        ```mlir\n          %first_result, %middle_results:2, %0 = \"my.op\" ...\n        ```\n      ",
    "name": "getAsmResultNames",
    "returnType": "void"
  },
  "anonymous_375": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_375",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::Region&",
          "region"
        ],
        [
          "::mlir::OpAsmSetValueNameFn",
          "setNameFn"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::Region&\":$region, \"::mlir::OpAsmSetValueNameFn\":$setNameFn)"
    },
    "body": "",
    "defaultBody": "return;",
    "description": "\n        Get a special name to use when printing the block arguments for a region\n        immediately nested under this operation.\n      ",
    "name": "getAsmBlockArgumentNames",
    "returnType": "void"
  },
  "anonymous_376": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:59"
    ],
    "!name": "anonymous_376",
    "!superclasses": [
      "InterfaceMethod"
    ],
    "arguments": {
      "args": [
        [
          "::mlir::OpAsmSetBlockNameFn",
          "setNameFn"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"::mlir::OpAsmSetBlockNameFn\":$setNameFn)"
    },
    "body": "",
    "defaultBody": ";",
    "description": "\n        Get the name to use for a given block inside a region attached to this\n        operation.\n\n        For example if this operation has multiple blocks:\n\n        ```mlir\n          some.op() ({\n            ^bb0:\n              ...\n            ^bb1:\n              ...\n          })\n        ```\n\n        the method will be invoked on each of the blocks allowing the op to\n        print:\n\n        ```mlir\n          some.op() ({\n            ^custom_foo_name:\n              ...\n            ^custom_bar_name:\n              ...\n          })\n        ```\n      ",
    "name": "getAsmBlockNames",
    "returnType": "void"
  },
  "anonymous_377": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:82"
    ],
    "!name": "anonymous_377",
    "!superclasses": [
      "InterfaceMethod",
      "StaticInterfaceMethod"
    ],
    "arguments": {
      "args": [],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins)"
    },
    "body": "",
    "defaultBody": "return \"\";",
    "description": "\n      Return the default dialect used when printing/parsing operations in\n      regions nested under this operation. This allows for eliding the dialect\n      prefix from the operation name, for example it would be possible to omit\n      the `spirv.` prefix from all operations within a SpirV module if this method\n      returned `spv`. The default implementation returns an empty string which\n      is ignored.\n      ",
    "name": "getDefaultDialect",
    "returnType": "::llvm::StringRef"
  },
  "anonymous_378": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:171"
    ],
    "!name": "anonymous_378",
    "!superclasses": [
      "DeclareInterfaceMethods",
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface",
      "DeclareOpInterfaceMethods"
    ],
    "alwaysOverriddenMethods": [
      "inferResultRanges"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "InferIntRangeInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    Allows operations to participate in range analysis for scalar integer values by\n    providing a methods that allows them to specify lower and upper bounds on their\n    result(s) given lower and upper bounds on their input(s) if known.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_354",
        "kind": "def",
        "printable": "anonymous_354"
      },
      {
        "def": "anonymous_355",
        "kind": "def",
        "printable": "anonymous_355"
      }
    ],
    "trait": "InferIntRangeInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "anonymous_379": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:171"
    ],
    "!name": "anonymous_379",
    "!superclasses": [
      "DeclareInterfaceMethods",
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface",
      "DeclareOpInterfaceMethods"
    ],
    "alwaysOverriddenMethods": [],
    "baseInterfaces": [],
    "cppInterfaceName": "CastOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    A cast-like operation is one that converts from a set of input types to a\n    set of output types. The arity of the inputs may be from 0-N, whereas the\n    arity of the outputs may be anything from 1-N. Cast-like operations are\n    trivially removable in cases where they produce an No-op, i.e when the\n    input types and output types match 1-1.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_353",
        "kind": "def",
        "printable": "anonymous_353"
      }
    ],
    "trait": "CastOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "anonymous_38": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_38",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isF80())"
  },
  "anonymous_380": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_380",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "AnyInteger",
        "kind": "def",
        "printable": "AnyInteger"
      },
      {
        "def": "Index",
        "kind": "def",
        "printable": "Index"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_381",
      "kind": "def",
      "printable": "anonymous_381"
    },
    "summary": "integer or index"
  },
  "anonymous_381": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_381",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_7",
        "kind": "def",
        "printable": "anonymous_7"
      },
      {
        "def": "anonymous_32",
        "kind": "def",
        "printable": "anonymous_32"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_382": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Interfaces.td:171"
    ],
    "!name": "anonymous_382",
    "!superclasses": [
      "DeclareInterfaceMethods",
      "Interface",
      "Trait",
      "NativeTrait",
      "InterfaceTrait",
      "OpInterfaceTrait",
      "OpInterface",
      "DeclareOpInterfaceMethods"
    ],
    "alwaysOverriddenMethods": [
      "getAsmResultNames"
    ],
    "baseInterfaces": [],
    "cppInterfaceName": "OpAsmOpInterface",
    "cppNamespace": "::mlir",
    "dependentTraits": [],
    "description": "\n    This interface provides hooks to interact with the AsmPrinter and AsmParser\n    classes.\n  ",
    "extraClassDeclaration": "",
    "extraClassOf": "",
    "extraConcreteClassDeclaration": "",
    "extraConcreteClassDefinition": "",
    "extraSharedClassDeclaration": "",
    "extraTraitClassDeclaration": "",
    "methods": [
      {
        "def": "anonymous_374",
        "kind": "def",
        "printable": "anonymous_374"
      },
      {
        "def": "anonymous_375",
        "kind": "def",
        "printable": "anonymous_375"
      },
      {
        "def": "anonymous_376",
        "kind": "def",
        "printable": "anonymous_376"
      },
      {
        "def": "anonymous_377",
        "kind": "def",
        "printable": "anonymous_377"
      }
    ],
    "trait": "OpAsmOpInterface::Trait",
    "verify": "",
    "verifyWithRegions": 0
  },
  "anonymous_383": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "OpBase.td:277"
    ],
    "!name": "anonymous_383",
    "!superclasses": [
      "OpBuilder"
    ],
    "body": "",
    "dagParams": {
      "args": [
        [
          "int64_t",
          "value"
        ]
      ],
      "kind": "dag",
      "operator": {
        "def": "ins",
        "kind": "def",
        "printable": "ins"
      },
      "printable": "(ins \"int64_t\":$value)"
    }
  },
  "anonymous_39": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_39",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isF128())"
  },
  "anonymous_4": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_4",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::cast<::mlir::VectorType>($_self).allDimsScalable())"
  },
  "anonymous_40": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_40",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isBF16())"
  },
  "anonymous_41": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_41",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isTF32())"
  },
  "anonymous_42": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_42",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat8E4M3FN())"
  },
  "anonymous_43": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_43",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat8E5M2())"
  },
  "anonymous_44": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_44",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat8E4M3())"
  },
  "anonymous_45": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_45",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat8E4M3FNUZ())"
  },
  "anonymous_46": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_46",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat8E4M3B11FNUZ())"
  },
  "anonymous_47": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_47",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat8E5M2FNUZ())"
  },
  "anonymous_48": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_48",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat8E3M4())"
  },
  "anonymous_49": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_49",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat6E2M3FN())"
  },
  "anonymous_5": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_5",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(true)"
  },
  "anonymous_50": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_50",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isFloat6E3M2FN())"
  },
  "anonymous_51": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_51",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::ComplexType>($_self))"
  },
  "anonymous_52": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_52",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::FunctionType>($_self))"
  },
  "anonymous_53": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_53",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "AnyType",
        "kind": "def",
        "printable": "AnyType"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_54",
      "kind": "def",
      "printable": "anonymous_54"
    },
    "summary": "any type"
  },
  "anonymous_54": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_54",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_5",
        "kind": "def",
        "printable": "anonymous_5"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_55": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_55",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_54",
        "kind": "def",
        "printable": "anonymous_54"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_56": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_56",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_55",
        "kind": "def",
        "printable": "anonymous_55"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_57": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_57",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsVectorTypePred",
        "kind": "def",
        "printable": "IsVectorTypePred"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_58": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_58",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsVectorOfAnyRankTypePred",
        "kind": "def",
        "printable": "IsVectorOfAnyRankTypePred"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_59": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_59",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsFixedVectorTypePred",
        "kind": "def",
        "printable": "IsFixedVectorTypePred"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_6": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_6",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::NoneType>($_self))"
  },
  "anonymous_60": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_60",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsVectorTypeWithAnyDimScalablePred",
        "kind": "def",
        "printable": "IsVectorTypeWithAnyDimScalablePred"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_61": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_61",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsShapedTypePred",
        "kind": "def",
        "printable": "IsShapedTypePred"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_62": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_62",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "IsTensorTypePred",
        "kind": "def",
        "printable": "IsTensorTypePred"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_63": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_63",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_56",
        "kind": "def",
        "printable": "anonymous_56"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_64": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_64",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "I1",
        "kind": "def",
        "printable": "I1"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_65",
      "kind": "def",
      "printable": "anonymous_65"
    },
    "summary": "1-bit signless integer"
  },
  "anonymous_65": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_65",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_14",
        "kind": "def",
        "printable": "anonymous_14"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_66": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_66",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_65",
        "kind": "def",
        "printable": "anonymous_65"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_67": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_67",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_66",
        "kind": "def",
        "printable": "anonymous_66"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_68": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_68",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_67",
        "kind": "def",
        "printable": "anonymous_67"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_69": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_69",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "I8",
        "kind": "def",
        "printable": "I8"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_70",
      "kind": "def",
      "printable": "anonymous_70"
    },
    "summary": "8-bit signless integer"
  },
  "anonymous_7": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_7",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "(::llvm::isa<::mlir::IntegerType>($_self))"
  },
  "anonymous_70": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_70",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_15",
        "kind": "def",
        "printable": "anonymous_15"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_71": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_71",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_70",
        "kind": "def",
        "printable": "anonymous_70"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_72": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_72",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_71",
        "kind": "def",
        "printable": "anonymous_71"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_73": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_73",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_72",
        "kind": "def",
        "printable": "anonymous_72"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_74": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_74",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "I16",
        "kind": "def",
        "printable": "I16"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_75",
      "kind": "def",
      "printable": "anonymous_75"
    },
    "summary": "16-bit signless integer"
  },
  "anonymous_75": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_75",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_16",
        "kind": "def",
        "printable": "anonymous_16"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_76": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_76",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_75",
        "kind": "def",
        "printable": "anonymous_75"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_77": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_77",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_76",
        "kind": "def",
        "printable": "anonymous_76"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_78": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_78",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_77",
        "kind": "def",
        "printable": "anonymous_77"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_79": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_79",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "I32",
        "kind": "def",
        "printable": "I32"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_80",
      "kind": "def",
      "printable": "anonymous_80"
    },
    "summary": "32-bit signless integer"
  },
  "anonymous_8": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_8",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isInteger(1))"
  },
  "anonymous_80": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_80",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_17",
        "kind": "def",
        "printable": "anonymous_17"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_81": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_81",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_80",
        "kind": "def",
        "printable": "anonymous_80"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_82": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_82",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_81",
        "kind": "def",
        "printable": "anonymous_81"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_83": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_83",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_82",
        "kind": "def",
        "printable": "anonymous_82"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_84": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_84",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "I64",
        "kind": "def",
        "printable": "I64"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_85",
      "kind": "def",
      "printable": "anonymous_85"
    },
    "summary": "64-bit signless integer"
  },
  "anonymous_85": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_85",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_18",
        "kind": "def",
        "printable": "anonymous_18"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_86": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_86",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_85",
        "kind": "def",
        "printable": "anonymous_85"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_87": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_87",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_86",
        "kind": "def",
        "printable": "anonymous_86"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_88": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_88",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_87",
        "kind": "def",
        "printable": "anonymous_87"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_89": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_89",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "Index",
        "kind": "def",
        "printable": "Index"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_90",
      "kind": "def",
      "printable": "anonymous_90"
    },
    "summary": "index"
  },
  "anonymous_9": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:63"
    ],
    "!name": "anonymous_9",
    "!superclasses": [
      "Pred",
      "CPred"
    ],
    "predExpr": "($_self.isInteger(8))"
  },
  "anonymous_90": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_90",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_32",
        "kind": "def",
        "printable": "anonymous_32"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_91": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_91",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_90",
        "kind": "def",
        "printable": "anonymous_90"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_92": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_92",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_91",
        "kind": "def",
        "printable": "anonymous_91"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_93": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_93",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_92",
        "kind": "def",
        "printable": "anonymous_92"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_94": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_94",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "BF16",
        "kind": "def",
        "printable": "BF16"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_95",
      "kind": "def",
      "printable": "anonymous_95"
    },
    "summary": "bfloat16 type"
  },
  "anonymous_95": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:91"
    ],
    "!name": "anonymous_95",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Or"
    ],
    "children": [
      {
        "def": "anonymous_40",
        "kind": "def",
        "printable": "anonymous_40"
      }
    ],
    "kind": {
      "def": "PredCombinerOr",
      "kind": "def",
      "printable": "PredCombinerOr"
    }
  },
  "anonymous_96": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:102"
    ],
    "!name": "anonymous_96",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "SubstLeaves"
    ],
    "children": [
      {
        "def": "anonymous_95",
        "kind": "def",
        "printable": "anonymous_95"
      }
    ],
    "kind": {
      "def": "PredCombinerSubstLeaves",
      "kind": "def",
      "printable": "PredCombinerSubstLeaves"
    },
    "pattern": "$_self",
    "replacement": "elementType"
  },
  "anonymous_97": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:111"
    ],
    "!name": "anonymous_97",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "Concat"
    ],
    "children": [
      {
        "def": "anonymous_96",
        "kind": "def",
        "printable": "anonymous_96"
      }
    ],
    "kind": {
      "def": "PredCombinerConcat",
      "kind": "def",
      "printable": "PredCombinerConcat"
    },
    "prefix": "[](::mlir::Type elementType) { return ",
    "suffix": "; }(::llvm::cast<::mlir::ShapedType>($_self).getElementType())"
  },
  "anonymous_98": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "Constraints.td:87"
    ],
    "!name": "anonymous_98",
    "!superclasses": [
      "Pred",
      "CombinedPred",
      "And"
    ],
    "children": [
      {
        "def": "anonymous_62",
        "kind": "def",
        "printable": "anonymous_62"
      },
      {
        "def": "anonymous_97",
        "kind": "def",
        "printable": "anonymous_97"
      }
    ],
    "kind": {
      "def": "PredCombinerAnd",
      "kind": "def",
      "printable": "PredCombinerAnd"
    }
  },
  "anonymous_99": {
    "!anonymous": true,
    "!fields": [],
    "!locs": [
      "CommonTypeConstraints.td:174"
    ],
    "!name": "anonymous_99",
    "!superclasses": [
      "Constraint",
      "TypeConstraint",
      "Type",
      "AnyTypeOf"
    ],
    "allowedTypes": [
      {
        "def": "F16",
        "kind": "def",
        "printable": "F16"
      }
    ],
    "builderCall": "",
    "cppFunctionName": "",
    "cppType": "::mlir::Type",
    "description": "",
    "predicate": {
      "def": "anonymous_100",
      "kind": "def",
      "printable": "anonymous_100"
    },
    "summary": "16-bit float"
  },
  "ins": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Utils.td:57"
    ],
    "!name": "ins",
    "!superclasses": []
  },
  "outs": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "Utils.td:60"
    ],
    "!name": "outs",
    "!superclasses": []
  },
  "region": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:230"
    ],
    "!name": "region",
    "!superclasses": []
  },
  "successor": {
    "!anonymous": false,
    "!fields": [],
    "!locs": [
      "OpBase.td:233"
    ],
    "!name": "successor",
    "!superclasses": []
  }
}
