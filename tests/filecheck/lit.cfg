import lit.formats
import os

config.test_source_root = os.path.dirname(__file__)
xdsl_src = os.path.dirname(os.path.dirname(config.test_source_root))

config.name = "xDSL"
config.suffixes = ['.test', '.mlir', '.py']

xdsl_opt = "xdsl/tools/xdsl-opt"
xdsl_run = "xdsl/tools/xdsl_run.py"
irdl_to_pyrdl = "xdsl/tools/irdl_to_pyrdl.py"

config.substitutions.append(('XDSL_ROUNDTRIP', "xdsl-opt %s --print-op-generic --split-input-file | xdsl-opt --split-input-file | filecheck %s"))
config.substitutions.append(("XDSL_GENERIC_ROUNDTRIP", "xdsl-opt %s --print-op-generic --split-input-file | filecheck %s --check-prefix=CHECK-GENERIC"))
if "COVERAGE" in lit_config.params:
    config.substitutions.append(('xdsl-opt', f"coverage run {xdsl_opt}"))
    config.substitutions.append(('xdsl-run', f"coverage run {xdsl_run}"))
    config.substitutions.append(('irdl-to-pyrdl', f"coverage run {irdl_to_pyrdl}"))
    config.substitutions.append(('python', f"coverage run"))

shtest_execute = lit.formats.ShTest.execute
def my_sh_test_execute(self, test, litConfig):
    sourcepath = test.getSourcePath()
    sourcedir = os.path.dirname(sourcepath)
    self.extra_substitutions.append(('%s', sourcepath.replace(" ", "\\ ")))
    self.extra_substitutions.append(('%S', sourcedir.replace(" ", "\\ ")))
    return shtest_execute(self, test, litConfig)

lit.formats.ShTest.execute = my_sh_test_execute

config.test_format = lit.formats.ShTest(preamble_commands=[f"cd {xdsl_src}"])